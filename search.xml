<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>0-1背包问题（转载）</title>
    <url>/article/6bd3a468.html</url>
    <content><![CDATA[<p>毫不夸张地说这篇文章我必须转载，实在是讲的太好了，清晰易懂，由浅入深，收获很大。</p>
<p><a href="https://www.jianshu.com/p/a66d5ce49df5">原博文</a></p>
<p><a href="https://www.jianshu.com/u/a40d61a49221">作者</a></p>
]]></content>
      <tags>
        <tag>数据结构&amp;算法</tag>
      </tags>
  </entry>
  <entry>
    <title>2020总结</title>
    <url>/article/b724f9cd.html</url>
    <content><![CDATA[<p>好快，2020终于过去了</p>
<p>2020发生了太多太多事了，我一下子也不可能说完，还有我的文笔实在糟糕，写这个真不太行，但还是要写，这样往后时回忆都会有不同感受和想法，会很有趣！</p>
<span id="more"></span>
<h1 id="回想整个2020">回想整个2020</h1>
<p>首先放了两个链接，第一个是B站2020跨年先导片，我觉得拍的挺不错的；第二个是当时看到的2020混剪，涵盖了2020许多大事件。</p>
<p><a
href="https://www.bilibili.com/bangumi/play/ep363555?from=search&amp;seid=8637342301562092068">2020最美的夜先导片</a></p>
<p><a
href="https://www.bilibili.com/video/BV1si4y1w7UN">【年度混剪】2020，像一场电影</a></p>
<h2 id="大同小异">大同小异</h2>
<p>我还是按时间线来吧</p>
<p>不一样的春节</p>
<blockquote>
<p>我记的不错的话，就是1.9到家的，同之前一样，没过两天就去亲戚理发店帮忙，年末新冠的消息已经开始报道了，这时我正巧感冒咳嗽，吃了一周的药都没好，到了大年初二全国上下进入战“疫”状态，全国上下一心，民众安分守在家中，“战士们”在前线坚守岗位，中国的凝聚力太强了。而我这时突然发烧直接到39°，医院输了5天液，我发烧感冒从来没有这么严重过，期间在医院翻手机翻到科比意外的消息，整个人挺震惊的，科比一个从初中听到现在的人物，突然就这么消逝了，感叹这个球场上的“小飞侠”，看过许多科比的视频，仰慕伤心。烧退了但却还没好，因为烧的太严重，整个嘴都废了，牙龈肿胀，嘴皮都是烂的，吃东西喝东西都要疼死，那是真是难受得要死，最渴望的事情就是简单的吃东西、吃好多好吃的。虽然我们这里没有经历严重的疫情，但我亲眼见到的，严格把关出入，每个人登记，尤其是最近返乡的行程，这只是在我们这种低风险区域，通过视频和想象就可以知道那些在一线工作者的辛苦，致敬。</p>
</blockquote>
<p>网课</p>
<blockquote>
<p>开学了，不过这次是网课，想都不敢想的事发生了，这样的体验真的难忘，钉钉、腾讯课堂、腾讯会议等各种手段，每个老师还会有些不同，有些只需要按时看完哪几个视频、完成哪些内容，有的是每次准时开课讲课还有互动。远隔千里，我们通过一块屏幕交流。往前推几年这种事情怎么敢想，但现在真的实现了。这个阶段，一直在家中帮忙家里的装修，旧房改造，所以这个学期对我来说成效并不好，但绝不是瞎混的，学到的东西还挺多的。春暖花开，我们却还未能相见，是所有期盼相聚人们的感慨。直到4、5月份，疫情慢慢稳定下来，复工复产复学，人们恢复到正常的生活状态。记得那时生活习惯是最好的，每天10点多最多11点睡觉，早上6点多起床，直接带上蓝牙耳机，出村走在两边都是麦田的路上，小跑起来，迎着太阳，奔跑。</p>
</blockquote>
<p>暑假</p>
<blockquote>
<p>果然还是没等到开学的那天，期末考试都是在网上进行的，就这么开始了暑假，我是不想闲下来的那种人，就是在这时买了三本书《大话数据结构》、《算法（第4版）》和《Java编程思想（第4版）》，制定计划每天要看多少页，要做哪些事，这时的状态是，习惯比前一阶段差一点，但还是不错的，早上看书，下午写博客（博客就是在这是搭建的），晚饭后出去与朋友散步、交谈。就算现在想起这样的状态还是很不错的，每天过的很舒服自在。就这样过了两个月的暑假，期盼着9月能够开学，这期间看到<a
href="https://www.bilibili.com/video/BV1x54y1e7zf">《黑神话：悟空》</a>，还是很激动的，很期待这个单机游戏，因为《西游记》在我心的地位特别高，本来我想为这个写一篇文章的，但看了<a
href="https://www.bilibili.com/video/BV11D4y127tj/?spm_id_from=333.788.recommend_more_video.0">【游戏侦查冰】对话《黑神话：悟空》创作团队——当一群取经人重新上路</a>觉得自己做不了这么好也就没写。特别有共鸣，这三个阶段，自己-天地-众生。</p>
</blockquote>
<p>开学了</p>
<blockquote>
<p>终于终于开学了，从放寒假到放暑假经历了大半年，终于开学了，不过要收拾的东西也太多了，从大棉袄到大裤衩，温度从零下已经回到30多了。哎，不知道学校那边有什么变化，同学老师有什么变化，似乎都期盼着回到校园。热，带着口罩回到校园，新学期开始了。说实话这学期过得也太快了，很多人还没从家里那个状态转变回来，这学期都过了大半了，这学期任务实在是重，尤其因为大作业搞到12点上床都是常有的事，感觉头发掉的都多了。这学期还特枯燥，几乎没有什们节日，也不放假，也没有去哪里玩，也就刚开学时去了次上河园（白嫖不香吗？），再说谁陪我去啊？所以说这学期超无聊，也不是那种没事做的无聊，而是做的事都很无聊，也就因此吧相当充实，学到了不少东西。</p>
</blockquote>
<p>期末</p>
<blockquote>
<p>这个到底算不算2020呢？算，但期末已经到1月了呀，不算，但这应该算这一年的一部分啊，毕竟农历新年还没到啊！额，期末挺辛苦的，整天就是复习复习复习。。。</p>
</blockquote>
<h1 id="展望">展望</h1>
<p>2021没过几天，看到这条视频</p>
<p><a
href="https://www.bilibili.com/video/BV1rX4y1u7Tp">中国的2021，牛转乾坤！</a></p>
<p>不知道你们什么感受，反正我是很激动的，因为我也相信中国明天会更好！！！</p>
]]></content>
      <tags>
        <tag>思考</tag>
        <tag>自己</tag>
      </tags>
  </entry>
  <entry>
    <title>AJAX与JSON初次使用</title>
    <url>/article/933adcc2.html</url>
    <content><![CDATA[<h1 id="简单介绍">简单介绍</h1>
<p>在这次<a href="https://wnhyang.github.io/article/54805cfd.html">Java
Web</a>大作业中，用到了好多次AJAX，实现异步刷新网页，其中主要功能部分有评论、写文章、修改信息等。</p>
<p>下面简单说一说我是怎么使用的吧！</p>
<span id="more"></span>
<h1 id="主要工具或是说环境">主要工具或是说环境</h1>
<ul>
<li>SSM</li>
<li>jQuery</li>
<li>fastjson</li>
</ul>
<h2 id="注意">注意：</h2>
<p>JSON返回时可能会出现乱码，需要设置一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;xxx&quot;, produces = &quot;text/json;charset=UTF-8&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br></pre></td></tr></table></figure>
<p>全局设置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/plain;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json;charset=utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/x-www-form-urlencoded;charset=utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jacksonMessageConverter&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/x-www-form-urlencoded;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="需求与实现">需求与实现</h1>
<p>接着按照需求-实现这样的过程，展示我做了些什么吧！</p>
<h2 id="查看某一类新闻">查看某一类新闻</h2>
<p>要求查看某一类新闻（国内、军事、科技。。。），点击类型后展示部分新闻，点击底部“查看更多”按钮，显示更多的这类新闻。</p>
<p>效果如下长截图，我设置的是每页10条新闻，若还有更多底部显示查看更多，若没有则显示没有更多内容。</p>
<figure>
<img data-src="https://img.imgdb.cn/item/60011af93ffa7d37b326cf3a.jpg"
alt="某类新闻" />
<figcaption aria-hidden="true">某类新闻</figcaption>
</figure>
<p>前端完整代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; prefix=&quot;fmt&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>news<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/Static/js/lib/layUi/css/layui.css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;all&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/Static/js/lib/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> css = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">marginLeft</span>: <span class="string">&#x27;auto&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">marginRight</span>: <span class="string">&#x27;auto&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">width</span>: <span class="string">&#x27;70%&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">height</span>: <span class="string">&#x27;auto&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#newsArea&quot;</span>).<span class="title function_">css</span>(css);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">more</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/queryNewsByCIdMore&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//注意序列化的值一定要放在最前面,并且不需要头部变量,不然获取的值得格式会有问题</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: &#123;<span class="attr">cid</span>: $&#123;cid&#125;, <span class="attr">cPage</span>: $(<span class="string">&quot;#cp&quot;</span>).<span class="title function_">val</span>()&#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    $.<span class="title function_">each</span>(data.<span class="property">moreNews</span>, <span class="keyword">function</span> (<span class="params">index, value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> s = <span class="string">&#x27;&lt;div class=&quot;layui-card&quot;&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&#x27;&lt;div class=&quot;layui-card-header&quot;&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&#x27;&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/queryNewsById?nid=&#x27;</span> + value.<span class="property">newsId</span> +</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&#x27;&quot; target=&quot;_blank&quot;&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&#x27;&lt;H2&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                            value.<span class="property">title</span> +</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&#x27;&lt;/H2&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&#x27;&lt;/a&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&#x27;&lt;/div&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&#x27;&lt;div class=&quot;layui-card-body&quot;&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                            value.<span class="property">createTime</span> +</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&#x27;&lt;/div&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#newsbody&quot;</span>).<span class="title function_">append</span>(s);</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(data.<span class="property">cPage</span>+<span class="number">1</span>&lt;$&#123;totalPage&#125;)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> x=<span class="string">&#x27;&lt;a href=&quot;javascript:void(0);&quot; onclick=&quot;more()&quot;&gt;点击查看更多&amp;gt;&amp;gt;&lt;/a&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#more&quot;</span>).<span class="title function_">html</span>(x)</span></span><br><span class="line"><span class="language-javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> y=<span class="string">&#x27;&lt;p&gt;没有更多内容了&lt;/p&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#more&quot;</span>).<span class="title function_">html</span>(y)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    $(<span class="string">&quot;#cp&quot;</span>).<span class="title function_">val</span>(data.<span class="property">cPage</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;newsArea&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;newsbody&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 20px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;newsL&#125;&quot;</span> <span class="attr">var</span>=<span class="string">&quot;news&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-card&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-card-header&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/queryNewsById?nid=$&#123;news.newsId&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">H2</span>&gt;</span>$&#123;news.title&#125;<span class="tag">&lt;/<span class="name">H2</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-card-body&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fmt:formatDate</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;news.createTime&#125;&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;more&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;cPage+1&lt;totalPage&#125;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;more()&quot;</span>&gt;</span>点击查看更多<span class="symbol">&amp;gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>没有更多内容了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;cp&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;cPage&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对应Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;queryNewsByCId&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">queryNewsByCid</span><span class="params">(<span class="meta">@RequestParam(&quot;cid&quot;)</span> <span class="type">long</span> cid, <span class="meta">@RequestParam(value = &quot;cPage&quot;, required = false, defaultValue = &quot;0&quot;)</span> <span class="type">int</span> cPage)</span> &#123;</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;front/news&quot;</span>);</span><br><span class="line">    List&lt;News&gt; newsL = frontService.QueryNewsByCId(cid, cPage);</span><br><span class="line">    <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> frontService.QueryNewsTotalByCId(cid);</span><br><span class="line">    <span class="type">int</span> <span class="variable">totalPage</span> <span class="operator">=</span> (<span class="type">int</span>) Math.ceil(total * <span class="number">1.0</span> / <span class="number">10</span>);</span><br><span class="line">    mv.addObject(<span class="string">&quot;cid&quot;</span>, cid);</span><br><span class="line">    mv.addObject(<span class="string">&quot;cPage&quot;</span>, cPage);</span><br><span class="line">    mv.addObject(<span class="string">&quot;totalPage&quot;</span>, totalPage);</span><br><span class="line">    mv.addObject(<span class="string">&quot;newsL&quot;</span>, newsL);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;queryNewsByCIdMore&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">queryNewsByCIdMore</span><span class="params">(Model model, <span class="meta">@RequestParam(&quot;cid&quot;)</span> <span class="type">long</span> cid, <span class="meta">@RequestParam(value = &quot;cPage&quot;, required = false, defaultValue = &quot;0&quot;)</span> <span class="type">int</span> cPage)</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">    List&lt;News&gt; newsL = frontService.QueryNewsByCId(cid, (cPage + <span class="number">1</span>) * <span class="number">10</span>);</span><br><span class="line">    map.put(<span class="string">&quot;moreNews&quot;</span>, newsL);</span><br><span class="line">    map.put(<span class="string">&quot;cPage&quot;</span>, cPage + <span class="number">1</span>);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;cPage&quot;</span>, cPage + <span class="number">1</span>);</span><br><span class="line">    JSON.DEFFAULT_DATE_FORMAT = <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> JSON.toJSONString(map, SerializerFeature.WriteDateUseDateFormat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>整个项目现在介绍不了，差很多东西，不过只看这部分AJAX与后台交互，还是可以的。</p>
<h2 id="查看关键词新闻">查看关键词新闻</h2>
<p>这个与上面的查看某一类新闻几乎相同，不做过多介绍了，仅仅是把byCid的部分换成byKey。</p>
<p>Controller部分代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;queryNewsByKey&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">queryNewsByKey</span><span class="params">(<span class="meta">@RequestParam(&quot;key&quot;)</span> String key, <span class="meta">@RequestParam(value = &quot;cPage&quot;, required = false, defaultValue = &quot;0&quot;)</span> <span class="type">int</span> cPage)</span> &#123;</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;front/searchNews&quot;</span>);</span><br><span class="line">    List&lt;News&gt; newsL = frontService.QueryNewsByKey(key, cPage);</span><br><span class="line">    <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> frontService.QueryNewsTotalByKey(key);</span><br><span class="line">    <span class="type">int</span> <span class="variable">totalPage</span> <span class="operator">=</span> (<span class="type">int</span>) Math.ceil(total * <span class="number">1.0</span> / <span class="number">10</span>);</span><br><span class="line">    mv.addObject(<span class="string">&quot;key&quot;</span>, key);</span><br><span class="line">    mv.addObject(<span class="string">&quot;cPage&quot;</span>, cPage);</span><br><span class="line">    mv.addObject(<span class="string">&quot;totalPage&quot;</span>, totalPage);</span><br><span class="line">    mv.addObject(<span class="string">&quot;newsL&quot;</span>, newsL);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;queryNewsByKeyMore&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">queryNewsByKeyMore</span><span class="params">(Model model, <span class="meta">@RequestParam(&quot;key&quot;)</span> String key, <span class="meta">@RequestParam(value = &quot;cPage&quot;, required = false, defaultValue = &quot;0&quot;)</span> <span class="type">int</span> cPage)</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    List&lt;News&gt; newsL = frontService.QueryNewsByKey(key, (cPage + <span class="number">1</span>) * <span class="number">10</span>);</span><br><span class="line">    map.put(<span class="string">&quot;moreNews&quot;</span>, newsL);</span><br><span class="line">    map.put(<span class="string">&quot;cPage&quot;</span>, cPage + <span class="number">1</span>);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;cPage&quot;</span>, cPage + <span class="number">1</span>);</span><br><span class="line">    JSON.DEFFAULT_DATE_FORMAT = <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> JSON.toJSONString(map, SerializerFeature.WriteDateUseDateFormat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="新闻增删改">新闻增删改</h2>
<p>登录账户后，点击写文章，可以进到如下界面，其实是模仿<strong>简书</strong>的，左侧是已经写过的文章，点击标题转到文章详情，下方图标表示文章状态，若审核通过就是下图中绿色图标，若审核中则是黄色图标，若审核未通过则是红色图标。右下角有“修改”、“删除”按钮，修改需要通过AJAX，后端处理后返回JSON到前端，显示到左侧编辑区，提交修改，新闻重新变为审核中状态，删除则提示“确认删除？”，删除后从左侧移除该新闻，新建新闻则是提示成功新加新闻，并在左侧列表添加新内容。</p>
<figure>
<img data-src="https://img.imgdb.cn/item/600120d83ffa7d37b32962ff.jpg"
alt="edit" />
<figcaption aria-hidden="true">edit</figcaption>
</figure>
<p>为防止未登录用户，或登录用户编辑他人的新闻，这里设置了一个特殊的a标签，如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">toEdit</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> myForm = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;form&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        myForm.<span class="property">method</span> = <span class="string">&quot;post&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        myForm.<span class="property">target</span> = <span class="string">&quot;_blank&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        myForm.<span class="property">action</span> = <span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/toEdit&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> myInput = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;input&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        myInput.<span class="title function_">setAttribute</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;uid&quot;</span>); <span class="comment">// 为input对象设置name</span></span></span><br><span class="line"><span class="language-javascript">        myInput.<span class="title function_">setAttribute</span>(<span class="string">&quot;value&quot;</span>, uid); <span class="comment">// 为input对象设置value</span></span></span><br><span class="line"><span class="language-javascript">        myForm.<span class="title function_">appendChild</span>(myInput);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(myForm);</span></span><br><span class="line"><span class="language-javascript">        myForm.<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(myForm); <span class="comment">// 提交后移除创建的form</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样的a标签将get请求变为post请求，更加安全一些。</p>
<p>前端完整代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">&lt;%@ taglib prefix=&quot;form&quot; uri=&quot;http://www.springframework.org/tags/form&quot; %&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/Static/js/lib/layUi/css/layui.css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;all&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/Static/js/lib/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/Static/js/lib/ckEditor/ckeditor.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable constant_">CKEDITOR</span>.<span class="title function_">replace</span>(<span class="string">&#x27;content&#x27;</span>, &#123;<span class="attr">height</span>: <span class="string">&quot;400px&quot;</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#submit&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> ops = $(<span class="string">&quot;#ops&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (ops !== <span class="string">&#x27;0&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">opNews</span>(<span class="string">&quot;updateNews&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">opNews</span>(<span class="string">&quot;addNews&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">delNews</span>(<span class="params">nid</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="title function_">confirm</span>(<span class="string">&quot;确定要删除吗？&quot;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">url</span>: <span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/deleteNews&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//注意序列化的值一定要放在最前面,并且不需要头部变量,不然获取的值得格式会有问题</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">data</span>: &#123;<span class="attr">nid</span>: nid&#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span> (data.<span class="property">result</span> === <span class="string">&#x27;success&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="title function_">alert</span>(<span class="string">&quot;新闻删除成功&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#div_&quot;</span> + nid).<span class="title function_">remove</span>();</span></span><br><span class="line"><span class="language-javascript">                        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="title function_">alert</span>(<span class="string">&quot;新闻删除失败&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">upNews</span>(<span class="params">nid</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/toUpdate&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//注意序列化的值一定要放在最前面,并且不需要头部变量,不然获取的值得格式会有问题</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: &#123;<span class="attr">nid</span>: nid&#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (data.<span class="property">result</span> === <span class="string">&#x27;success&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#ops&quot;</span>).<span class="title function_">val</span>(data.<span class="property">newsId</span>);</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> select = <span class="string">&#x27;dd[lay-value=&#x27;</span> + data.<span class="property">categoryId</span> + <span class="string">&#x27;]&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//触发点击事件，实现自动选择</span></span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#categoryId&quot;</span>).<span class="title function_">siblings</span>(<span class="string">&quot;div.layui-form-select&quot;</span>).<span class="title function_">find</span>(<span class="string">&#x27;dl&#x27;</span>).<span class="title function_">find</span>(select).<span class="title function_">click</span>();</span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#title&quot;</span>).<span class="title function_">val</span>(data.<span class="property">title</span>);</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable constant_">CKEDITOR</span>.<span class="property">instances</span>.<span class="property">content</span>.<span class="title function_">setData</span>(data.<span class="property">content</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&quot;出错！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">opNews</span>(<span class="params">op</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> ops = $(<span class="string">&quot;#ops&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> uid = <span class="string">&#x27;$&#123;sessionScope.userS.userId&#125;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> cid = $(<span class="string">&quot;#categoryId&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> title = $(<span class="string">&quot;#title&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> content = <span class="variable constant_">CKEDITOR</span>.<span class="property">instances</span>.<span class="property">content</span>.<span class="title function_">getData</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (title !== <span class="string">&quot;&quot;</span> &amp;&amp; content !== <span class="string">&quot;&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (ops !== <span class="string">&#x27;0&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> dataparam = &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">newsId</span>: ops,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">userId</span>: uid,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">categoryId</span>: cid,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">title</span>: title,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">content</span>: content,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">state</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> dataparam = &#123;<span class="attr">userId</span>: uid, <span class="attr">categoryId</span>: cid, <span class="attr">title</span>: title, <span class="attr">content</span>: content, <span class="attr">state</span>: <span class="number">0</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">url</span>: <span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/&quot;</span> + op,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//注意序列化的值一定要放在最前面,并且不需要头部变量,不然获取的值得格式会有问题</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">data</span>: dataparam,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span> (data.<span class="property">result</span> === <span class="string">&#x27;success&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="title function_">alert</span>(<span class="string">&quot;发布成功,审核通过后点击左侧标题查看效果！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">var</span> s = <span class="string">&#x27;&lt;div class=&quot;layui-card&quot; id=&quot;div_&#x27;</span> + data.<span class="property">newsId</span> + <span class="string">&#x27;&quot;&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                <span class="string">&#x27;&lt;div class=&quot;layui-card-header&quot;&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                <span class="string">&#x27;&lt;h3 style=&quot;max-width: 95%;overflow:hidden;white-space:nowrap; text-overflow:ellipsis&quot; title=&quot;&#x27;</span> + title + <span class="string">&#x27;&quot;&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                <span class="string">&#x27;&lt;a target=&quot;_blank&quot; href=&quot;$&#123;pageContext.request.contextPath&#125;/queryNewsById?nid=&#x27;</span> + data.<span class="property">newsId</span> + <span class="string">&#x27;&quot;&gt;&#x27;</span> + title + <span class="string">&#x27;&lt;/a&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                <span class="string">&#x27;&lt;/h3&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                <span class="string">&#x27;&lt;/div&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                <span class="string">&#x27;&lt;div class=&quot;layui-card-body&quot;&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                <span class="string">&#x27;&lt;img src=&quot;$&#123;pageContext.request.contextPath&#125;/Static/img/inreview.png&quot; class=&quot;layui-nav-img&quot;/&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                <span class="string">&#x27;&lt;div align=&quot;right&quot;&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                <span class="string">&#x27;&lt;a href=&quot;javascript:void(0);&quot; onclick=&quot;upNews(&#x27;</span> + data.<span class="property">newsId</span> + <span class="string">&#x27;)&quot;&gt;&lt;span style=&quot;color: blue&quot;&gt;修改&lt;/span&gt;&lt;/a&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                <span class="string">&#x27;&lt;a href=&quot;javascript:void(0);&quot; onclick=&quot;delNews(&#x27;</span> + data.<span class="property">newsId</span> + <span class="string">&#x27;)&quot;&gt;&lt;span style=&quot;color: red&quot;&gt;删除&lt;/span&gt;&lt;/a&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                <span class="string">&#x27;&lt;/div&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                <span class="string">&#x27;&lt;/div&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">if</span> (ops !== <span class="string">&#x27;0&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                                $(<span class="string">&quot;#div_&quot;</span> + nid).<span class="title function_">remove</span>();</span></span><br><span class="line"><span class="language-javascript">                            &#125;</span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#newNews&quot;</span>).<span class="title function_">prepend</span>(s);</span></span><br><span class="line"><span class="language-javascript">                        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="title function_">alert</span>(<span class="string">&quot;发布失败！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;标题或内容不能为空！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#ops&quot;</span>).<span class="title function_">val</span>(<span class="string">&#x27;0&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> select = <span class="string">&#x27;dd[lay-value=&#x27;</span> + <span class="number">1</span> + <span class="string">&#x27;]&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//触发点击事件，实现自动选择</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#categoryId&quot;</span>).<span class="title function_">siblings</span>(<span class="string">&quot;div.layui-form-select&quot;</span>).<span class="title function_">find</span>(<span class="string">&#x27;dl&#x27;</span>).<span class="title function_">find</span>(select).<span class="title function_">click</span>();</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#title&quot;</span>).<span class="title function_">val</span>(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable constant_">CKEDITOR</span>.<span class="property">instances</span>.<span class="property">content</span>.<span class="title function_">setData</span>(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 100%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-row&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 100%&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-col-xs3 layui-bg-gray&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 100%;padding: 5px;overflow-y:auto;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-demo&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #00FFFF; text-align: center;height: 50px&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/User/toLogin&quot;</span> <span class="attr">style</span>=<span class="string">&quot;line-height: 50px&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/Static/img/main.png&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">class</span>=<span class="string">&quot;layui-nav-img&quot;</span>/&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color:bisque; text-align: center;height: 50px&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;add()&quot;</span> <span class="attr">style</span>=<span class="string">&quot;line-height: 50px&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/Static/img/addn.png&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">class</span>=<span class="string">&quot;layui-nav-img&quot;</span>/&gt;</span>新建<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;newNews&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;ownNews&#125;&quot;</span> <span class="attr">var</span>=<span class="string">&quot;news&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-card&quot;</span> <span class="attr">id</span>=<span class="string">&quot;div_$&#123;news.newsId&#125;&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-card-header&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&quot;max-width: 95%;overflow:hidden;white-space:nowrap; text-overflow:ellipsis&quot;</span></span></span><br><span class="line"><span class="tag">                                    <span class="attr">title</span>=<span class="string">&quot;$&#123;news.title&#125;&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span></span></span><br><span class="line"><span class="tag">                                       <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/queryNewsById?nid=$&#123;news.newsId&#125;&quot;</span>&gt;</span>$&#123;news.title&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-card-body&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;news.state==0&#125;&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/Static/img/inreview.png&quot;</span></span></span><br><span class="line"><span class="tag">                                             <span class="attr">class</span>=<span class="string">&quot;layui-nav-img&quot;</span>/&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;news.state==1&#125;&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/Static/img/accept.png&quot;</span></span></span><br><span class="line"><span class="tag">                                             <span class="attr">class</span>=<span class="string">&quot;layui-nav-img&quot;</span>/&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/Static/img/reject.png&quot;</span></span></span><br><span class="line"><span class="tag">                                             <span class="attr">class</span>=<span class="string">&quot;layui-nav-img&quot;</span>/&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;upNews($&#123;news.newsId&#125;)&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">                                            <span class="attr">style</span>=<span class="string">&quot;color: blue&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;delNews($&#123;news.newsId&#125;)&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">                                            <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-col-xs9&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-card&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-card-body&quot;</span> <span class="attr">pad15</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span></span></span><br><span class="line"><span class="tag">                                       <span class="attr">placeholder</span>=<span class="string">&quot;请输入标题&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 400px&quot;</span></span></span><br><span class="line"><span class="tag">                                       <span class="attr">class</span>=<span class="string">&quot;layui-input&quot;</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-mid layui-word-aux&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;</span>选择框<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-block&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;categoryId&quot;</span> <span class="attr">name</span>=<span class="string">&quot;categoryId&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;categorys&#125;&quot;</span> <span class="attr">var</span>=<span class="string">&quot;category&quot;</span>&gt;</span>--%&gt;</span><br><span class="line">                                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;category.category_id&#125;&quot;</span>&gt;</span>$&#123;category.category_name&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-unselect layui-form-select&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-select-title&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">readonly</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">                                               <span class="attr">class</span>=<span class="string">&quot;layui-input layui-unselect&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;layui-edge&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;layui-anim layui-anim-upbit&quot;</span> <span class="attr">style</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;categorys&#125;&quot;</span> <span class="attr">var</span>=<span class="string">&quot;category&quot;</span>&gt;</span>--%&gt;</span><br><span class="line">                                            <span class="tag">&lt;<span class="name">dd</span> <span class="attr">lay-value</span>=<span class="string">&quot;$&#123;category.category_id&#125;&quot;</span>&gt;</span>$&#123;category.category_name&#125;<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item layui-form-text&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-block&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-block&quot;</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-btn-primary&quot;</span>&gt;</span>重新填写<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>发布<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ops&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/Static/js/lib/layUi/layui.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    layui.<span class="title function_">use</span>(<span class="string">&#x27;form&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> form = layui.<span class="property">form</span>; <span class="comment">//只有执行了这一步，部分表单元素才会自动修饰成功</span></span></span><br><span class="line"><span class="language-javascript">        form.<span class="title function_">render</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Controller代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;toEdit&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">toEdit</span><span class="params">(<span class="meta">@RequestParam(&quot;uid&quot;)</span> <span class="type">long</span> uid)</span> &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;front/edit&quot;</span>);</span><br><span class="line">        mv.addObject(<span class="string">&quot;categorys&quot;</span>, frontService.QueryAllCategorys());</span><br><span class="line">        mv.addObject(<span class="string">&quot;ownNews&quot;</span>, frontService.QueryNewsByUId(uid));</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;addNews&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addNews</span><span class="params">(News news)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> frontService.AddNews(news);</span><br><span class="line">        <span class="comment">//添加新闻成功</span></span><br><span class="line">        <span class="keyword">if</span> (result &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//获取新闻ID</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">LastId</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            LastId = Integer.parseInt(news.getNewsId().toString());</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            PicNews picNews;</span><br><span class="line">            <span class="keyword">for</span> (String pic_url : ImageUploadUtils.GetHtmlImageSrcList(news.getContent())) &#123;</span><br><span class="line">                <span class="type">Pics</span> <span class="variable">pic</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pics</span>();</span><br><span class="line">                pic.setNewsId((<span class="type">long</span>) LastId);</span><br><span class="line">                pic.setPicUrl(pic_url);</span><br><span class="line">                <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                    picNews = <span class="keyword">new</span> <span class="title class_">PicNews</span>();</span><br><span class="line">                    picNews.setNewsId((<span class="type">long</span>) LastId);</span><br><span class="line">                    picNews.setCategoryId(news.getCategoryId());</span><br><span class="line">                    picNews.setTitle(news.getTitle());</span><br><span class="line">                    picNews.setPicUrl(pic_url);</span><br><span class="line">                    picNewsMapper.insertSelective(picNews);</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                frontService.AddPic(pic);</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(<span class="string">&quot;result&quot;</span>, <span class="string">&quot;success&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;newsId&quot;</span>, news.getNewsId());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(<span class="string">&quot;result&quot;</span>, <span class="string">&quot;fail&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;新闻增加失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        JSON.DEFFAULT_DATE_FORMAT = <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(map, SerializerFeature.WriteDateUseDateFormat);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;toUpdate&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toUpdate</span><span class="params">(<span class="meta">@RequestParam(&quot;nid&quot;)</span> <span class="type">long</span> nid)</span> &#123;</span><br><span class="line">        <span class="type">News</span> <span class="variable">news</span> <span class="operator">=</span> frontService.QueryNewsById(nid);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (news != <span class="literal">null</span>) &#123;</span><br><span class="line">            map.put(<span class="string">&quot;result&quot;</span>, <span class="string">&quot;success&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;newsId&quot;</span>, nid);</span><br><span class="line">            map.put(<span class="string">&quot;categoryId&quot;</span>, news.getCategoryId());</span><br><span class="line">            map.put(<span class="string">&quot;title&quot;</span>, news.getTitle());</span><br><span class="line">            map.put(<span class="string">&quot;content&quot;</span>, news.getContent());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(<span class="string">&quot;result&quot;</span>, <span class="string">&quot;fail&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;updateNews&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateNews</span><span class="params">(News news)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> frontService.UpdateNews(news);</span><br><span class="line">        <span class="keyword">if</span> (result &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            map.put(<span class="string">&quot;result&quot;</span>, <span class="string">&quot;success&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;newsId&quot;</span>, news.getNewsId());</span><br><span class="line">            System.out.println(<span class="string">&quot;新闻修改成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(<span class="string">&quot;result&quot;</span>, <span class="string">&quot;fail&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;新闻修改失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;deleteNews&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">deleteNews</span><span class="params">(<span class="meta">@RequestParam(&quot;nid&quot;)</span> <span class="type">long</span> nid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> frontService.DeleteNews(nid);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            map.put(<span class="string">&quot;result&quot;</span>, <span class="string">&quot;success&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;新闻删除成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(<span class="string">&quot;result&quot;</span>, <span class="string">&quot;fail&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;新闻删除失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(map);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>我个人觉得这部分还是挺有趣的。</p>
<h2 id="评论">评论</h2>
<p>这部分是最开始遇到的麻烦，正是因为这个才坚定了我要使用AJAX的决心。</p>
<p>需求就是简单的评论。</p>
<figure>
<img data-src="https://img.imgdb.cn/item/600128333ffa7d37b32c6454.jpg"
alt="3" />
<figcaption aria-hidden="true">3</figcaption>
</figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; prefix=&quot;fmt&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>show<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/Static/js/lib/layUi/css/layui.css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;all&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/Static/js/lib/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> css = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">marginLeft</span>: <span class="string">&#x27;auto&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">marginRight</span>: <span class="string">&#x27;auto&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">width</span>: <span class="string">&#x27;70%&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">height</span>: <span class="string">&#x27;auto&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#show&quot;</span>).<span class="title function_">css</span>(css);</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#sendTo&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//获取值</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> uid = <span class="string">&#x27;$&#123;sessionScope.userS.userId&#125;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> uname = <span class="string">&#x27;$&#123;sessionScope.userS.userName&#125;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> nid = <span class="string">&#x27;$&#123;news.newsId&#125;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> content = $(<span class="string">&quot;#content&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> uIcon = <span class="string">&#x27;$&#123;sessionScope.userS.userIcon&#125;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (content !== <span class="string">&quot;&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">url</span>: <span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/addComment&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//注意序列化的值一定要放在最前面,并且不需要头部变量,不然获取的值得格式会有问题</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">data</span>: &#123;<span class="attr">user_id</span>: uid, <span class="attr">news_id</span>: nid, <span class="attr">content</span>: content&#125;,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">if</span> (data.<span class="property">result</span> === <span class="string">&#x27;success&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                                <span class="title function_">alert</span>(<span class="string">&quot;评论成功&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                                <span class="keyword">var</span> iconSrc=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/Static/img/userIcon.png&quot;</span></span></span><br><span class="line"><span class="language-javascript">                                <span class="keyword">if</span>(<span class="string">&quot;&quot;</span> !== uIcon)&#123;</span></span><br><span class="line"><span class="language-javascript">                                    iconSrc=uIcon;</span></span><br><span class="line"><span class="language-javascript">                                &#125;</span></span><br><span class="line"><span class="language-javascript">                                $(<span class="string">&quot;#content&quot;</span>).<span class="title function_">val</span>(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                                <span class="keyword">var</span> s = <span class="string">&#x27;&lt;div class=&quot;layui-card&quot; id=&quot;div_&#x27;</span> + data.<span class="property">cid</span> + <span class="string">&#x27;&quot;&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                    <span class="string">&#x27;&lt;div class=&quot;layui-card-body&quot;&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                    <span class="string">&#x27;&lt;div align=&quot;left&quot;&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                    <span class="string">&#x27;&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/queryUserById?uid=&#x27;</span>+uid+<span class="string">&#x27;&quot;&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                    <span class="string">&#x27;&lt;img class=&quot;layui-nav-img&quot; src=&quot;&#x27;</span> + iconSrc + <span class="string">&#x27;&quot;/&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                    uname + <span class="string">&#x27;&lt;/a&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                    <span class="string">&#x27; &lt;/div&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                    content +</span></span><br><span class="line"><span class="language-javascript">                                    <span class="string">&#x27;&lt;div align=&quot;right&quot;&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                    <span class="string">&#x27;&lt;a href=&quot;javascript:void(0);&quot; onclick=&quot;delComment(&#x27;</span> + data.<span class="property">cid</span> + <span class="string">&#x27;)&quot;&gt;删除&lt;/a&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                    <span class="string">&#x27;&lt;/div&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                    <span class="string">&#x27;&lt;div align=&quot;right&quot;&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                    <span class="title function_">getCurrentDate</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()) +</span></span><br><span class="line"><span class="language-javascript">                                    <span class="string">&#x27;&lt;/div&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                    <span class="string">&#x27;&lt;/div&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                    <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                                $(<span class="string">&quot;#newComment&quot;</span>).<span class="title function_">prepend</span>(s);</span></span><br><span class="line"><span class="language-javascript">                            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                                <span class="title function_">alert</span>(<span class="string">&quot;评论失败&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                            &#125;</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;)</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;评论不能为空！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">delComment</span>(<span class="params">cid</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="title function_">confirm</span>(<span class="string">&quot;确定要删除吗？&quot;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">url</span>: <span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/deleteComment&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//注意序列化的值一定要放在最前面,并且不需要头部变量,不然获取的值得格式会有问题</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">data</span>: &#123;<span class="attr">cid</span>: cid&#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span> (data.<span class="property">result</span> === <span class="string">&#x27;success&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#div_&quot;</span> + cid).<span class="title function_">remove</span>();</span></span><br><span class="line"><span class="language-javascript">                        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="title function_">alert</span>(<span class="string">&quot;评论删除失败&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">getCurrentDate</span>(<span class="params">date</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> y = date.<span class="title function_">getFullYear</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> m = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> d = date.<span class="title function_">getDate</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> h = date.<span class="title function_">getHours</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> min = date.<span class="title function_">getMinutes</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> s = date.<span class="title function_">getSeconds</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> str = y + <span class="string">&#x27;-&#x27;</span> + (m &lt; <span class="number">10</span> ? (<span class="string">&#x27;0&#x27;</span> + m) : m) + <span class="string">&#x27;-&#x27;</span> + (d &lt; <span class="number">10</span> ? (<span class="string">&#x27;0&#x27;</span> + d) : d) + <span class="string">&#x27;-&#x27;</span> + (h &lt; <span class="number">10</span> ? (<span class="string">&#x27;0&#x27;</span> + h) : h) + <span class="string">&#x27;:&#x27;</span> + (min &lt; <span class="number">10</span> ? (<span class="string">&#x27;0&#x27;</span> + min) : min) + <span class="string">&#x27;:&#x27;</span> + (s &lt; <span class="number">10</span> ? (<span class="string">&#x27;0&#x27;</span> + s) : s);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> str;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">more</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/queryCommentByNIdMore&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//注意序列化的值一定要放在最前面,并且不需要头部变量,不然获取的值得格式会有问题</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: &#123;<span class="attr">nid</span>: <span class="string">&#x27;$&#123;nid&#125;&#x27;</span>, <span class="attr">cPage</span>: $(<span class="string">&quot;#cp&quot;</span>).<span class="title function_">val</span>()&#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    $.<span class="title function_">each</span>(data.<span class="property">moreComments</span>, <span class="keyword">function</span> (<span class="params">index, value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span> (value.<span class="property">user_id</span> ===$&#123;sessionScope.<span class="property">userS</span>.<span class="property">userId</span>&#125;) &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">var</span> z = <span class="string">&#x27;&lt;div align=&quot;right&quot;&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                <span class="string">&#x27;&lt;a href=&quot;javascript:void(0);&quot; onclick=&quot;delComment(&#x27;</span> + value.<span class="property">comment_id</span> + <span class="string">&#x27;)&quot;&gt;删除&lt;/a&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                                <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">var</span> z = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> iconSrc=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/Static/img/userIcon.png&quot;</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span>(<span class="string">&quot;user_icon&quot;</span> <span class="keyword">in</span> value)&#123;</span></span><br><span class="line"><span class="language-javascript">                            iconSrc=value.<span class="property">user_icon</span>;</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> s = <span class="string">&#x27;&lt;div class=&quot;layui-card&quot; id=&quot;div_&#x27;</span> + value.<span class="property">comment_id</span> + <span class="string">&#x27;&quot;&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&#x27;&lt;div class=&quot;layui-card-body&quot;&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&#x27;&lt;div align=&quot;left&quot;&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&#x27;&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/queryUserById?uid=&#x27;</span> + value.<span class="property">user_id</span> + <span class="string">&#x27;&quot;&gt; &#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&#x27;&lt;img src=&quot;&#x27;</span>+iconSrc+<span class="string">&#x27;&quot; class=&quot;layui-nav-img&quot;/&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                            value.<span class="property">user_name</span> + <span class="string">&#x27;&lt;/a&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&#x27; &lt;/div&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                            value.<span class="property">content</span> +</span></span><br><span class="line"><span class="language-javascript">                            z +</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&#x27;&lt;div align=&quot;right&quot;&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                            value.<span class="property">createTime</span> +</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&#x27;&lt;/div&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&#x27;&lt;/div&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#comments&quot;</span>).<span class="title function_">append</span>(s);</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (data.<span class="property">cPage</span> + <span class="number">1</span> &lt;$&#123;totalPage&#125;) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> x = <span class="string">&#x27;&lt;a href=&quot;javascript:void(0);&quot; onclick=&quot;more()&quot;&gt;点击查看更多&amp;gt;&amp;gt;&lt;/a&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#more&quot;</span>).<span class="title function_">html</span>(x)</span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> y = <span class="string">&#x27;&lt;p&gt;没有更多内容了&lt;/p&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#more&quot;</span>).<span class="title function_">html</span>(y)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    $(<span class="string">&quot;#cp&quot;</span>).<span class="title function_">val</span>(data.<span class="property">cPage</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">&quot;F2F2F2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 10px;margin-left: 15px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/User/toLogin&quot;</span> <span class="attr">style</span>=<span class="string">&quot;line-height: 50px&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">            <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/Static/img/main.png&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;layui-nav-img&quot;</span>/&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;news==null||news.state!=1&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>该文章审核尚未通过！<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;show&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;newsbody&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 20px&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-card&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-card-header&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>$&#123;requestScope.news.title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/queryNewsByCId?cid=$&#123;news.categoryId&#125;&quot;</span>&gt;</span>其他新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">fmt:formatDate</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;news.createTime&#125;&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-card-body&quot;</span>&gt;</span></span><br><span class="line">                            $&#123;requestScope.news.content&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">br</span>/&gt;</span>作者：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/queryUserById?uid=$&#123;news.userId&#125;&quot;</span>&gt;</span>点这<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                评论区：<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;sessionScope.userS!=null&#125;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-card&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-card-body&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;layui-form&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-block&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入内容&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-textarea&quot;</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-block&quot;</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-btn-primary&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sendTo&quot;</span>&gt;</span>评论<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/User/login&quot;</span>&gt;</span>登陆后可评论<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;newComment&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;comments&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;comments&#125;&quot;</span> <span class="attr">var</span>=<span class="string">&quot;comment&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-card&quot;</span> <span class="attr">id</span>=<span class="string">&quot;div_$&#123;comment.comment_id&#125;&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-card-body&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/queryUserById?uid=$&#123;comment.user_id&#125;&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;comment.user_icon==null&#125;&quot;</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/Static/img/userIcon.png&quot;</span></span></span><br><span class="line"><span class="tag">                                                     <span class="attr">class</span>=<span class="string">&quot;layui-nav-img&quot;</span>/&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;comment.user_icon&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-nav-img&quot;</span>/&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;/<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span><br><span class="line">                                            $&#123;comment.user_name&#125;</span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                    $&#123;comment.content&#125;</span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;sessionScope.userS.userId==comment.user_id&#125;&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;delComment($&#123;comment.comment_id&#125;)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">                                        $&#123;comment.createTime&#125;</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;more&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;cPage+1&lt;totalPage&#125;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;more()&quot;</span>&gt;</span>点击查看更多<span class="symbol">&amp;gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">p</span>&gt;</span>没有更多内容了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;cp&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;cPage&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Contrller代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;queryCommentByNIdMore&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">queryCommentByNIdMore</span><span class="params">(<span class="meta">@RequestParam(&quot;nid&quot;)</span> <span class="type">long</span> nid, <span class="meta">@RequestParam(value = &quot;cPage&quot;, required = false, defaultValue = &quot;0&quot;)</span> <span class="type">int</span> cPage)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        List&lt;Comment&gt; comments = frontService.QueryCommentsByNewsId(nid, (cPage + <span class="number">1</span>) * <span class="number">3</span>);</span><br><span class="line">        map.put(<span class="string">&quot;moreComments&quot;</span>, comments);</span><br><span class="line">        map.put(<span class="string">&quot;cPage&quot;</span>, cPage + <span class="number">1</span>);</span><br><span class="line">        JSON.DEFFAULT_DATE_FORMAT = <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(map, SerializerFeature.WriteDateUseDateFormat);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;addComment&quot;, produces = &quot;text/json;charset=UTF-8&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addComment</span><span class="params">(Comment comment)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> frontService.AddComment(comment);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">LastId</span> <span class="operator">=</span> comment.getComment_id();</span><br><span class="line">            map.put(<span class="string">&quot;result&quot;</span>, <span class="string">&quot;success&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;cid&quot;</span>, LastId);</span><br><span class="line">            System.out.println(<span class="string">&quot;评论成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(<span class="string">&quot;result&quot;</span>, <span class="string">&quot;fail&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;评论失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;deleteComment&quot;, produces = &quot;text/json;charset=UTF-8&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">deleteComment</span><span class="params">(<span class="meta">@RequestParam(&quot;cid&quot;)</span> <span class="type">long</span> cid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> frontService.DeleteComment(cid);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            map.put(<span class="string">&quot;result&quot;</span>, <span class="string">&quot;success&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;评论删除成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(<span class="string">&quot;result&quot;</span>, <span class="string">&quot;fail&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;评论删除失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(map);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>上面主要是三部分的AJAX的使用，其实还有一些，比如：用户信息修改、密码修改、反馈、用户头像上传，如果包括整个项目的话更多了。上面三个已经比较有代表性了。</p>
<h1 id="总结">总结</h1>
<p>AJAX的使用能让用户得到不错的体验，不用动不动就刷新整个界面，搞得人很烦了。JSON只是一种数据格式，简单说就是键值对（key-value）的集合，可嵌套。在使用AJAX时，后端数据通常都是以JSON返回到前端的。这时只需要处理JSON数据即可，即完成了AJAX的使用。</p>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>2020的思考</title>
    <url>/article/2ed16840.html</url>
    <content><![CDATA[<p>2020是个不平凡的一年，疫情爆发、澳洲山火、科比坠机身亡、英国脱欧、特强蝗灾、灯塔国黑人遭暴力执法致死、灯塔国对于中国制裁升级等等。上面提到的大都是消极些的，在2020年当然也有积极的事件，但这篇文章并不是谈论这些大事，而只是想讲一讲我的关于自己关于未来的一些思考。</p>
<span id="more"></span>
<h1 id="疫情期间在家大半年">疫情期间在家大半年</h1>
<p>一些深的思考往往来说是需要时间，恰巧在疫情期间在家呆的时间也够长的，见识到的、想到的东西还真不少。有句话是这样说的，一个人的时候往往才能看到真正的自己，这时候通常是沉静的，可以畅游内心的。</p>
<p>到2020九月就大三了，大学马上就结束了，上研or工作，这个问题
我一直都有思考，甚至在高中，现在终于要面对它了。上研与工作当然是两条路，没有绝对的优劣，但早在大一我一直是倾向于工作的，想早些去工作、挣钱、真正的进入社会。对于我的选择更重要是因为家庭情况和没有对专业深入研究的想法。</p>
<p>在家期间遇见了多年不见的小学同学，听说了一些关于他们的事情，只能说“时间在走，很多事都变了，很多人都变了”。那些早早辍学的可能已经工作结婚了，有的还在外地拼搏努力，有的还在完成学业。。。感受到物是人非，是很难表达的。</p>
<h1 id="一些变化">一些变化</h1>
<p>因为我家在农村，生活的很宁静祥和，这样生活大半年，心态是会有变化，变得不那么浮躁，不那么急功近利，变得与世无争，悠然自得。说实话在家这种状态真的好，早早起床绕着村子晨练，上午有活干活，没有看书玩手机，中午吃顿饱饭，睡个美美的午觉，下午同上午一样，晚饭后与朋友散步饭后消食，吹一吹凉爽的风，望一望头顶的星。</p>
<p>所以，年轻时照我的计划不变，出去看自己能混成什么样，尽自己的努力去拼搏努力，毕竟年轻嘛！等到干不动了老了回来，过着这样悠闲的生活，美呀！</p>
<h1 id="未来的憧憬">未来的憧憬</h1>
<p>时代变化太快了，很多事真的不敢想，一些东西正在兴起，一些正在衰弱，什么都不好说。一个人所能想象的大都是基于见识经历过而随之产生的，换句话说，现在的你只能想象基于现在的未来，也就是说想象是取决于你的环境的。</p>
<h1 id="思考">思考</h1>
<p>这是我第一次将我的一些思考写下来，过去也只是写下几个字或是一句话，思考的很琐碎但一定是有条线将他们连在一起的。</p>
<p>整篇文章很乱，可能看完了也不知道我要表达什么，但是无所谓。I don't
care.</p>
]]></content>
      <tags>
        <tag>思考</tag>
        <tag>自己</tag>
      </tags>
  </entry>
  <entry>
    <title>Github开源项目下载加速</title>
    <url>/article/9df2c6e.html</url>
    <content><![CDATA[<h1 id="提要">提要</h1>
<p>解决克隆GitHub开源项目速度极慢问题</p>
<span id="more"></span>
<h1 id="开始">开始</h1>
<p><a href="https://github.com/">GitHub</a>账号 <a
href="https://gitee.com/">Gitee</a>账号</p>
<p>复制要克隆的GitHub项目URL，在Gitee首页点击“+”从GitHub/GitLab导入仓库（如下图）</p>
<p><img data-src="https://img.imgdb.cn/item/6042427d360785be5428c76e.jpg" /></p>
<p>操作导入仓库</p>
<p><img data-src="https://img.imgdb.cn/item/604243ae360785be54295add.jpg" style="zoom:80%;" /></p>
<p>导入是非常快的，完成后即可利用Gitee完成项目克隆</p>
<h2 id="注意"><strong>注意：</strong></h2>
<ul>
<li>为使项目依旧和GitHub关联，需要修改克隆完成的项目中.git隐藏文件夹中congif文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[remote <span class="string">&quot;origin&quot;</span>]</span><br><span class="line">	url = https://gitee.com/xxx/xxx.git</span><br></pre></td></tr></table></figure>
<p>将远程仓库重新修改为 GitHub地址</p>
]]></content>
      <tags>
        <tag>记录</tag>
        <tag>Git/GitHub/Gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>EasyPoi导出复杂Excel</title>
    <url>/article/755ff4c3.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p>还是关于毕设的，现在有个导出复杂<code>Excel</code>的需求，与前面的文章关系很大，感兴趣的看一下哈🥰🥰🥰</p>
<p>https://wnhyang.github.io/article/854b9337.html</p>
<span id="more"></span>
<h1 id="问题">问题</h1>
<p>前面不是解决了，属性列表展示问题吗？</p>
<p>随之而来，便是导出<code>Excel</code>的问题了🥱🥱🥱</p>
<p>看了前面都知道了，我需要能导出这样的<code>Excel</code></p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.1xvh5323b08w.webp"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>然而<code>ruoyi</code>最原生的基于<code>org.apache.poi</code>实现的一种简单的导出，只支持简单的数据，就是一行一行非常规范的那种，不支持复杂类型的<code>Excel</code>导出</p>
<h1 id="解决">解决</h1>
<p>查了很多资料后，确定了使用<code>EasyPoi</code>，如果确实是想深入学习，下面有链接，不过这里就说一下我的应用</p>
<ul>
<li>https://easypoi.mydoc.io/</li>
<li>https://gitee.com/lemur/easypoi</li>
<li>https://blog.51cto.com/u_9771070/2722382</li>
<li>https://cloud.tencent.com/developer/article/1472607</li>
</ul>
<h2 id="excel"><span class="citation"
data-cites="Excel">@Excel</span></h2>
<p>这个是必须使用的注解,如果需求简单只使用这一个注解也是可以的,涵盖了常用的Excel需求,需要大家熟悉这个功能,主要分为基础,图片处理,时间处理,合并处理几块,name_id是上面讲的id用法,这里就不累言了</p>
<table>
<colgroup>
<col style="width: 14%" />
<col style="width: 8%" />
<col style="width: 16%" />
<col style="width: 61%" />
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>类型</th>
<th>默认值</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>name</td>
<td>String</td>
<td>null</td>
<td>列名,支持name_id</td>
</tr>
<tr class="even">
<td>needMerge</td>
<td>boolean</td>
<td>fasle</td>
<td>是否需要纵向合并单元格(用于含有list中,单个的单元格,合并list创建的多个row)</td>
</tr>
<tr class="odd">
<td>orderNum</td>
<td>String</td>
<td>"0"</td>
<td>列的排序,支持name_id</td>
</tr>
<tr class="even">
<td>replace</td>
<td>String[]</td>
<td>{}</td>
<td>值得替换 导出是{a_id,b_id} 导入反过来</td>
</tr>
<tr class="odd">
<td>type</td>
<td>int</td>
<td>1</td>
<td>导出类型 1 是文本 2 是图片,3 是函数,10 是数字 默认是文本</td>
</tr>
<tr class="even">
<td>width</td>
<td>double</td>
<td>10</td>
<td>列宽</td>
</tr>
<tr class="odd">
<td>exportFormat</td>
<td>String</td>
<td>""</td>
<td>导出的时间格式,以这个是否为空来判断是否需要格式化日期</td>
</tr>
<tr class="even">
<td>importFormat</td>
<td>String</td>
<td>""</td>
<td>导入的时间格式,以这个是否为空来判断是否需要格式化日期</td>
</tr>
<tr class="odd">
<td>format</td>
<td>String</td>
<td>""</td>
<td>时间格式,相当于同时设置了exportFormat 和 importFormat</td>
</tr>
<tr class="even">
<td>databaseFormat</td>
<td>String</td>
<td>"yyyyMMddHHmmss"</td>
<td>导出时间设置,如果字段是Date类型则不需要设置 数据库如果是string
类型,这个需要设置这个数据库格式,用以转换时间格式输出</td>
</tr>
<tr class="odd">
<td>suffix</td>
<td>String</td>
<td>""</td>
<td>文字后缀,如% 90 变成90%</td>
</tr>
<tr class="even">
<td>isWrap</td>
<td>boolean</td>
<td>true</td>
<td>是否换行 即支持</td>
</tr>
</tbody>
</table>
<p>上面的表格已经省略了很多属性了</p>
<p>下面直接看应用吧</p>
<h2 id="导出类标记注解">1、导出类标记注解</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Workload</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工作量id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Excel(name = &quot;类型&quot;, needMerge = true, dict = &quot;workload_type&quot;, width = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExcelCollection(name = &quot;任务&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Task&gt; taskList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工作量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Excel(name = &quot;工作量&quot;, needMerge = true, width = 10)</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal workload;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里注意</p>
<ul>
<li><code>@ExcelCollection(name = "任务")</code>就是用来标记列表属性的，记得标注了这个，那么对应的类也要加上必要的注解</li>
<li><code>needMerge = true</code>表示需要合并</li>
</ul>
<h2 id="列表属性标记">2、列表属性标记</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 人数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Excel(name = &quot;人数&quot;)</span></span><br><span class="line">    <span class="meta">@Excel(name = &quot;人数&quot;, orderNum = &quot;10&quot;, width = 10)</span></span><br><span class="line">    <span class="keyword">private</span> Integer headcount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 人数系数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Excel(name = &quot;人数系数&quot;, orderNum = &quot;11&quot;, width = 10)</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal headcountCoefficient;    </span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 难度系数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Excel(name = &quot;难度系数&quot;, orderNum = &quot;12&quot;, width = 10)</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal degreeCoefficient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单工作量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Excel(name = &quot;单工作量&quot;, orderNum = &quot;13&quot;, width = 10)</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal workload;</span><br><span class="line"> </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>EasyPoi</code>使用非常简单，到这里基本工作已经完成了</p>
<h2 id="导出">3、导出</h2>
<p>关于导出，要做的就是在<code>Controller</code>中用<code>EasyPoi</code>处理一下查到的数据，我这里用的封装的工具类（为了配合<code>ruoyi</code>使用😂😂😂）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 导出工作量列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Log(title = &quot;工作量&quot;, businessType = BusinessType.EXPORT)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/export&quot;)</span></span><br><span class="line"><span class="keyword">public</span> AjaxResult <span class="title function_">export</span><span class="params">(Workload workload)</span> &#123;</span><br><span class="line">    List&lt;Workload&gt; list = workloadService.selectWorkloadList(workload);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ExcelExportUtil.exportExcel(<span class="string">&quot;教师工作量数据&quot;</span>, Workload.class, list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="导出工具类">导出工具类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelExportUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(ExcelExportUtil.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">IExcelDictHandler</span> <span class="variable">EXCEL_DICT_HANDLER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExcelDictHandlerImpl</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ExcelExportUtil</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AjaxResult <span class="title function_">exportExcel</span><span class="params">(String sheetName, Class&lt;?&gt; pojoClass,</span></span><br><span class="line"><span class="params">                                         Collection&lt;?&gt; dataSet)</span> &#123;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Workbook</span> <span class="variable">wb</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> ExcelUtil.encodingFilename(sheetName);</span><br><span class="line">            <span class="type">ExportParams</span> <span class="variable">exportParams</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExportParams</span>(sheetName, sheetName);</span><br><span class="line">            exportParams.setDictHandler(EXCEL_DICT_HANDLER);</span><br><span class="line">            out = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(ExcelUtil.getAbsoluteFile(filename));</span><br><span class="line">            wb = cn.afterturn.easypoi.excel.ExcelExportUtil.exportExcel(exportParams, pojoClass, dataSet);</span><br><span class="line">            wb.write(out);</span><br><span class="line">            <span class="keyword">return</span> AjaxResult.success(filename);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;导出Excel异常&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UtilException</span>(<span class="string">&quot;导出Excel失败，请联系网站管理员！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            IOUtils.closeQuietly(wb);</span><br><span class="line">            IOUtils.closeQuietly(out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不知道我故意遗漏了<code>dict = "workload_type"</code>没说，有注意到没🐶🐶🐶</p>
<p>这是<code>EasyPoi</code>提供的一个关于字典转换的，简单说就是</p>
<p>我们导入输入“小明”，会通过字典查询对应的值，生成对应类属性，（小明）-&gt;（0）</p>
<p>导出也是同样，只要有对应的字典数据，都是可以完成的</p>
<h3 id="字典使用">字典使用</h3>
<p>只需实现<code>IExcelDictHandler</code>接口即可，再</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelDictHandlerImpl</span> <span class="keyword">implements</span> <span class="title class_">IExcelDictHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(ExcelDictHandlerImpl.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从值翻译到名称</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dict  字典Key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj   对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name  属性名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 属性值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toName</span><span class="params">(String dict, Object obj, String name, Object value)</span> &#123;</span><br><span class="line">        log.debug(dict, obj, name, value);</span><br><span class="line">        <span class="keyword">return</span> DictUtils.getDictLabel(dict, String.valueOf(value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从名称翻译到值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dict  字典Key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj   对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name  属性名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 属性值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toValue</span><span class="params">(String dict, Object obj, String name, Object value)</span> &#123;</span><br><span class="line">        log.debug(dict, obj, name, value);</span><br><span class="line">        <span class="keyword">return</span> DictUtils.getDictValue(dict, String.valueOf(value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里用的也是<code>ruoyi</code>已有的字典工具，就不再继续往下深讲</p>
<p>通过上面的步骤就可以完成复杂<code>Excel</code>的导出来😊😊😊，配合<code>ruoyi</code>使用哦</p>
<h1 id="总结">总结</h1>
<p>完成了这个毕设大体上算是完成了，接下来可能依照着老师的意见进行修改吧</p>
]]></content>
      <tags>
        <tag>Spring Boot</tag>
        <tag>ruoyi</tag>
      </tags>
  </entry>
  <entry>
    <title>Dubbo捕获自定义异常问题</title>
    <url>/article/98052ade.html</url>
    <content><![CDATA[<h1 id="起因">起因</h1>
<p>最近在工作时，发现的一个问题——<code>Dubbo</code>无法捕获自定义异常。</p>
<p><a
href="http://www.tianch.xyz/archives/dubbo服务提供者无法捕捉自定义异常的问题解决">dubbo服务提供者无法捕捉自定义异常的问题解决
| 田小晖 (tianch.xyz)</a></p>
<p>https://blog.csdn.net/qq_36827957/article/details/89509749</p>
<p>可直接看参考原文，如上</p>
<span id="more"></span>
<h1 id="正文">正文</h1>
<p>我遇到的问题是这样的：</p>
<p>基于<code>Dubbo</code>的项目结构分为<code>api</code>、<code>privider</code>、<code>openapi</code>，<code>api</code>定义<code>Dubbo</code>的<code>RPC</code>接口，<code>provider</code>和<code>openapi</code>都引用<code>api</code>，<code>provider</code>是<code>api</code>接口的实现方也是服务实际提供者，<code>openapi</code>是服务消费者。在<code>openapi</code>的<code>Controller</code>中调用<code>RPC</code>接口时，未能捕获到真正提供者<code>provider</code>抛出的自定义异常。</p>
<p>遇到这个问题很是疑惑？</p>
<p>也尝试<code>Debug</code>找到问题原由，<code>Debug</code>过程中虽然能捕获到异常，但最后抛出的却是RuntimeException，并非我们的自定义异常</p>
<p>查看<code>Dubbo</code>源码，有这样的异常处理流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ExceptionInvokerFilter</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Functions:</span></span><br><span class="line"><span class="comment"> * &lt;ol&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;unexpected exception will be logged in ERROR level on provider side. Unexpected exception are unchecked</span></span><br><span class="line"><span class="comment"> * exception not declared on the interface&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;Wrap the exception not introduced in API package into RuntimeException. Framework will serialize the outer exception but stringnize its cause in order to avoid of possible serialization problem on client side&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/ol&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Activate(group = Constants.PROVIDER)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExceptionFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(LoggerFactory.getLogger(ExceptionFilter.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExceptionFilter</span><span class="params">(Logger logger)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.logger = logger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">invoke</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> invoker.invoke(invocation);</span><br><span class="line">            <span class="keyword">if</span> (result.hasException() &amp;&amp; GenericService.class != invoker.getInterface()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Throwable</span> <span class="variable">exception</span> <span class="operator">=</span> result.getException();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// directly throw if it&#x27;s checked exception</span></span><br><span class="line">                    <span class="keyword">if</span> (!(exception <span class="keyword">instanceof</span> RuntimeException) &amp;&amp; (exception <span class="keyword">instanceof</span> Exception)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// directly throw if the exception appears in the signature</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> invoker.getInterface().getMethod(invocation.getMethodName(), invocation.getParameterTypes());</span><br><span class="line">                        Class&lt;?&gt;[] exceptionClassses = method.getExceptionTypes();</span><br><span class="line">                        <span class="keyword">for</span> (Class&lt;?&gt; exceptionClass : exceptionClassses) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (exception.getClass().equals(exceptionClass)) &#123;</span><br><span class="line">                                <span class="keyword">return</span> result;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// for the exception not found in method&#x27;s signature, print ERROR message in server&#x27;s log.</span></span><br><span class="line">                    logger.error(<span class="string">&quot;Got unchecked and undeclared exception which called by &quot;</span> + RpcContext.getContext().getRemoteHost()</span><br><span class="line">                            + <span class="string">&quot;. service: &quot;</span> + invoker.getInterface().getName() + <span class="string">&quot;, method: &quot;</span> + invocation.getMethodName()</span><br><span class="line">                            + <span class="string">&quot;, exception: &quot;</span> + exception.getClass().getName() + <span class="string">&quot;: &quot;</span> + exception.getMessage(), exception);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// directly throw if exception class and interface class are in the same jar file.</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">serviceFile</span> <span class="operator">=</span> ReflectUtils.getCodeBase(invoker.getInterface());</span><br><span class="line">                    <span class="type">String</span> <span class="variable">exceptionFile</span> <span class="operator">=</span> ReflectUtils.getCodeBase(exception.getClass());</span><br><span class="line">                    <span class="keyword">if</span> (serviceFile == <span class="literal">null</span> || exceptionFile == <span class="literal">null</span> || serviceFile.equals(exceptionFile)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// directly throw if it&#x27;s JDK exception</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> exception.getClass().getName();</span><br><span class="line">                    <span class="keyword">if</span> (className.startsWith(<span class="string">&quot;java.&quot;</span>) || className.startsWith(<span class="string">&quot;javax.&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// directly throw if it&#x27;s dubbo exception</span></span><br><span class="line">                    <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> RpcException) &#123;</span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// otherwise, wrap with RuntimeException and throw back to the client</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RpcResult</span>(<span class="keyword">new</span> <span class="title class_">RuntimeException</span>(StringUtils.toString(exception)));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                    logger.warn(<span class="string">&quot;Fail to ExceptionFilter when called by &quot;</span> + RpcContext.getContext().getRemoteHost()</span><br><span class="line">                            + <span class="string">&quot;. service: &quot;</span> + invoker.getInterface().getName() + <span class="string">&quot;, method: &quot;</span> + invocation.getMethodName()</span><br><span class="line">                            + <span class="string">&quot;, exception: &quot;</span> + e.getClass().getName() + <span class="string">&quot;: &quot;</span> + e.getMessage(), e);</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;Got unchecked and undeclared exception which called by &quot;</span> + RpcContext.getContext().getRemoteHost()</span><br><span class="line">                    + <span class="string">&quot;. service: &quot;</span> + invoker.getInterface().getName() + <span class="string">&quot;, method: &quot;</span> + invocation.getMethodName()</span><br><span class="line">                    + <span class="string">&quot;, exception: &quot;</span> + e.getClass().getName() + <span class="string">&quot;: &quot;</span> + e.getMessage(), e);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>流程描述如下</p>
<blockquote>
<p>1、如果是checked异常，直接抛出。</p>
<p>2、在方法签名上有声明，直接抛出。</p>
<p>3、异常类和接口类在同一jar包里，直接抛出。</p>
<p>4、是JDK自带的异常，直接抛出。</p>
<p>5、是Dubbo本身的异常(RpcException)，直接抛出。</p>
<p>6、否则，包装成RuntimeException抛给客户端。因为以上5点均不满足,所以该异常会被包装成RuntimeException异常抛出(重要)</p>
</blockquote>
<h1 id="解决方案">解决方案</h1>
<p>1、在方法上声明自定义异常 也就是throws 自定义异常</p>
<p>2、将异常和接口放到同一个包下</p>
<p>3、重写一个ExceptionFilter替代dubbo的ExceptionFilter</p>
<p>针对以上三种方案，对于自己的项目自然有合适的解法</p>
<p>方案一</p>
<blockquote>
<p>最为简单，只需要在声明接口方法时抛出一场即可</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HelloService</span> &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> ServiceException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方案二</p>
<blockquote>
<p>对于小规模的微服务这个也是比较容易做到的，只要有公共的common模块，在使用时做到统一即可</p>
</blockquote>
<p>方案三</p>
<blockquote>
<p>没有深究过，但要替代Dubbo？非常不建议</p>
</blockquote>
]]></content>
      <tags>
        <tag>Dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC并发编程(一)</title>
    <url>/article/fba0a19b.html</url>
    <content><![CDATA[<p>因为内容太多了，所以将其拆分为以下内容</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/fba0a19b.html">JUC并发编程(一)（当前）</a></li>
<li><a
href="https://wnhyang.github.io/article/54913af9.html">JUC并发编程(二)</a></li>
<li><a
href="https://wnhyang.github.io/article/2a621ad2.html">JUC并发编程(三)</a></li>
<li><a
href="https://wnhyang.github.io/article/d021f5dd.html">JUC并发编程(四)</a></li>
<li><a
href="https://wnhyang.github.io/article/d68aa2a0.html">JUC并发编程(五)</a></li>
</ul>
<h1 id="参考">参考</h1>
<p><a
href="https://www.bilibili.com/video/BV1B7411L7tE">https://www.bilibili.com/video/BV1B7411L7tE</a></p>
<span id="more"></span>
<h1 id="多线程进阶juc并发编程">多线程进阶=&gt;JUC并发编程</h1>
<p>JDK下的</p>
<ul>
<li>java.util.concurrent</li>
<li>java.util.concurrent.atomic</li>
<li>java.util.concurrent.locks</li>
<li>java.util.fuction</li>
</ul>
<h2 id="回顾多线程">回顾多线程</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获得CPU核数</span></span><br><span class="line">        System.out.println(Runtime.getRuntime().availableProcessors());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="线程状态">线程状态</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a thread which has not yet started.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    NEW,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a runnable thread.  A thread in the runnable</span></span><br><span class="line"><span class="comment">     * state is executing in the Java virtual machine but it may</span></span><br><span class="line"><span class="comment">     * be waiting for other resources from the operating system</span></span><br><span class="line"><span class="comment">     * such as processor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RUNNABLE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a thread blocked waiting for a monitor lock.</span></span><br><span class="line"><span class="comment">     * A thread in the blocked state is waiting for a monitor lock</span></span><br><span class="line"><span class="comment">     * to enter a synchronized block/method or</span></span><br><span class="line"><span class="comment">     * reenter a synchronized block/method after calling</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Object#wait() Object.wait&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BLOCKED,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a waiting thread.</span></span><br><span class="line"><span class="comment">     * A thread is in the waiting state due to calling one of the</span></span><br><span class="line"><span class="comment">     * following methods:</span></span><br><span class="line"><span class="comment">     * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> Object#wait() Object.wait&#125; with no timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> #join() Thread.join&#125; with no timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> LockSupport#park() LockSupport.park&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;A thread in the waiting state is waiting for another thread to</span></span><br><span class="line"><span class="comment">     * perform a particular action.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * For example, a thread that has called &lt;tt&gt;Object.wait()&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     * on an object is waiting for another thread to call</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;Object.notify()&lt;/tt&gt; or &lt;tt&gt;Object.notifyAll()&lt;/tt&gt; on</span></span><br><span class="line"><span class="comment">     * that object. A thread that has called &lt;tt&gt;Thread.join()&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     * is waiting for a specified thread to terminate.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    WAITING,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a waiting thread with a specified waiting time.</span></span><br><span class="line"><span class="comment">     * A thread is in the timed waiting state due to calling one of</span></span><br><span class="line"><span class="comment">     * the following methods with a specified positive waiting time:</span></span><br><span class="line"><span class="comment">     * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> #sleep Thread.sleep&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> Object#wait(long) Object.wait&#125; with timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> #join(long) Thread.join&#125; with timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> LockSupport#parkNanos LockSupport.parkNanos&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> LockSupport#parkUntil LockSupport.parkUntil&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TIMED_WAITING,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a terminated thread.</span></span><br><span class="line"><span class="comment">     * The thread has completed execution.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TERMINATED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>中文对应</p>
<table>
<thead>
<tr class="header">
<th>Enum Constant and Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>BLOCKED</code> 一个线程的线程状态阻塞等待监视器锁定。</td>
</tr>
<tr class="even">
<td><code>NEW</code> 线程尚未启动的线程状态。</td>
</tr>
<tr class="odd">
<td><code>RUNNABLE</code> 可运行线程的线程状态。</td>
</tr>
<tr class="even">
<td><code>TERMINATED</code> 终止线程的线程状态。</td>
</tr>
<tr class="odd">
<td><code>TIMED_WAITING</code>
具有指定等待时间的等待线程的线程状态。</td>
</tr>
<tr class="even">
<td><code>WAITING</code> 等待线程的线程状态</td>
</tr>
</tbody>
</table>
<h2 id="lock锁">Lock锁</h2>
<blockquote>
<p>传统的synchronized</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Ticket ticket=<span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> number=<span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(number&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            number--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;当前票数&quot;</span>+number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Lock接口</p>
</blockquote>
<ul>
<li><p>随着这种增加的灵活性，额外的责任。
没有块结构化锁定会删除使用<code>synchronized</code>方法和语句发生的锁的自动释放。
在大多数情况下，应使用以下惯用语：</p>
<p>Lock l = ...; l.lock(); try { // access the resource protected by
this lock } finally { l.unlock(); }</p>
<p>当在不同范围内发生锁定和解锁时，必须注意确保在锁定时执行的所有代码由try-finally或try-catch保护，以确保在必要时释放锁定。</p></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Ticket2 ticket2=<span class="keyword">new</span> <span class="title class_">Ticket2</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) ticket2.sale();&#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) ticket2.sale();&#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) ticket2.sale();&#125;, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">    <span class="comment">//1.new ReentrantLock();</span></span><br><span class="line">    <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//2.lock();</span></span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                number--;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;当前票数&quot;</span> + number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//3.unlock();</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>synchronized 与 lock 区别</p>
</blockquote>
<ol type="1">
<li>Synchronized 内置的Jva关键字， Lock 是一个Java类</li>
<li>Synchronized 无法判断获取锁的状态，Lock可以判断是否获取到了锁</li>
<li>Synchronized
会自动释放锁，lock必须要手动释放锁!如果不释放锁，死锁</li>
<li>Synchronized 线程1(获得锁,阳塞).线程2 (等待,使使的等)
；Lock锁就不一定会等待下去；</li>
<li>Synchronized可重入锁
，不可以中断的，非公平；Lock，可重入锁,可以判断锁,非公平(可以自己设置)
；</li>
<li>Synchronied 适合锁少量的代码同步问题
，Lock适合锁大量的同步代码！</li>
</ol>
<blockquote>
<p>锁是什么，如何判断锁的是谁？</p>
</blockquote>
<p>因为内容太多了，所以将其拆分为以下内容</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/fba0a19b.html">JUC并发编程(一)（当前）</a></li>
<li><a
href="https://wnhyang.github.io/article/54913af9.html">JUC并发编程(二)</a></li>
<li><a
href="https://wnhyang.github.io/article/2a621ad2.html">JUC并发编程(三)</a></li>
<li><a
href="https://wnhyang.github.io/article/d021f5dd.html">JUC并发编程(四)</a></li>
<li><a
href="https://wnhyang.github.io/article/d68aa2a0.html">JUC并发编程(五)</a></li>
</ul>
]]></content>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>Element.Table处理属性列表问题</title>
    <url>/article/854b9337.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p>在使用<code>ruoyi</code>中，遇到一个问题，没有一个较为完美的解决方案，最终只能妥协一下完成，这里记录一下。</p>
<span id="more"></span>
<h1 id="问题">问题</h1>
<p>后端返回了这样的数据，如下图</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/e0807962ee06441d9c57f88a86ae4d9.43bkzf98m380.webp"
alt="e0807962ee06441d9c57f88a86ae4d9" />
<figcaption
aria-hidden="true">e0807962ee06441d9c57f88a86ae4d9</figcaption>
</figure>
<p>这就是我说的属性列表，就是说返回的每一行数据都是包含一个是列表的属性。</p>
<p>如上，就是<code>rows</code>总数据中的一行中的<code>taskList</code>，我希望数据能像下面这样展示出来。</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.1xvh5323b08w.webp"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>找遍了<code>Element</code>实在是找不到一个满意的方案。</p>
<p>https://element.eleme.cn/#/zh-CN/component/table#he-bing-xing-huo-lie</p>
<p><code>Element</code>确实有一个很像的解决方案，就是上面的，<code>Table</code>合并行或列的方式</p>
<p>但是，细看了一下，它实现的是将多行返回数据经过函数处理过后，满足条件的行或列进行合并，和我要的不是一回事</p>
<p>我想要的是属性的展示，不是数据的整理。</p>
<h1 id="解决">解决</h1>
<p>网上也找了很多方案，也没有满意的，但确实能提供一些不同的思路。</p>
<p>最终考虑两种方案</p>
<blockquote>
<p>方案一：表格嵌套，就是既然是一个属性列表那么在那一个表格展示就好</p>
</blockquote>
<blockquote>
<p>方案二：弹出展示，就是需要查看时点击一个按钮，弹出展示列表数据</p>
</blockquote>
<p>两个方案各有好处，但我最终采用的是方案一，原因有下</p>
<ul>
<li><code>rows</code>数据中的<code>workload</code>属性强相关于这个属性列表，直接展示更能看出其中关系</li>
<li>第二点与第一点有点相似，都是关于展示的“直观”，我修改变化时希望能直接看到父属性变化</li>
</ul>
<p>基于上面就有了一种方案了</p>
<p>下面看具体实现，需要对<code>ruoyi</code>分离版的前端有点了解，还有代码并不完整，只说一下关键部分</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag">          <span class="attr">border</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-loading</span>=<span class="string">&quot;loading&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:data</span>=<span class="string">&quot;workloadList&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">selection-change</span>=<span class="string">&quot;handleSelectionChange&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;selection&quot;</span> <span class="attr">width</span>=<span class="string">&quot;55&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> /&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;类型&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;type&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;任务&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1500&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;scope.row.taskList&quot;</span> <span class="attr">:stripe</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;编号&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;人数&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;headcount&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">label</span>=<span class="string">&quot;人数系数&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">align</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">prop</span>=<span class="string">&quot;headcountCoefficient&quot;</span></span></span><br><span class="line"><span class="tag">                                 &gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span></span></span><br><span class="line"><span class="tag">                                            &gt;</span>&#123;&#123; parseFloat(scope.row.headcountCoefficient).toFixed(3) &#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">template</span>&gt;</span>&lt;/el-table-column</span><br><span class="line">                    &gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">label</span>=<span class="string">&quot;难度系数&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">align</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">prop</span>=<span class="string">&quot;degreeCoefficient&quot;</span></span></span><br><span class="line"><span class="tag">                                 &gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">v-model</span>=<span class="string">&quot;scope.row.degreeCoefficient&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">placeholder</span>=<span class="string">&quot;请输入难度系数&quot;</span></span></span><br><span class="line"><span class="tag">                              /&gt;</span> &lt;/template</span><br><span class="line">                    &gt;<span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;单工作量&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;workload&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">                        &#123;&#123; getTaskWorkload(scope.row) &#125;&#125;&lt;/template</span><br><span class="line">                        &gt;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">align</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">class-name</span>=<span class="string">&quot;small-padding fixed-width&quot;</span></span></span><br><span class="line"><span class="tag">                                 &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">                                   <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">                                   <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">                                   <span class="attr">icon</span>=<span class="string">&quot;el-icon-check&quot;</span></span></span><br><span class="line"><span class="tag">                                   @<span class="attr">click</span>=<span class="string">&quot;handleTaskUpdate(scope.row)&quot;</span></span></span><br><span class="line"><span class="tag">                                   <span class="attr">v-hasPermi</span>=<span class="string">&quot;[&#x27;teacher:task:edit&#x27;]&quot;</span></span></span><br><span class="line"><span class="tag">                                   &gt;</span>更新&lt;/el-button</span><br><span class="line">                            &gt;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;工作量&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;workload&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span> &#123;&#123; getWorkload(scope.row) &#125;&#125; <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">align</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">class-name</span>=<span class="string">&quot;small-padding fixed-width&quot;</span></span></span><br><span class="line"><span class="tag">                     &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">v-show</span>=<span class="string">&quot;scope.row.type &gt; 0&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">icon</span>=<span class="string">&quot;el-icon-edit&quot;</span></span></span><br><span class="line"><span class="tag">                       @<span class="attr">click</span>=<span class="string">&quot;handleUpdate(scope.row)&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">v-hasPermi</span>=<span class="string">&quot;[&#x27;teacher:workload:edit&#x27;]&quot;</span></span></span><br><span class="line"><span class="tag">                       &gt;</span>修改&lt;/el-button</span><br><span class="line">                &gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">icon</span>=<span class="string">&quot;el-icon-delete&quot;</span></span></span><br><span class="line"><span class="tag">                       @<span class="attr">click</span>=<span class="string">&quot;handleDelete(scope.row)&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">v-hasPermi</span>=<span class="string">&quot;[&#x27;teacher:workload:remove&#x27;]&quot;</span></span></span><br><span class="line"><span class="tag">                       &gt;</span>删除&lt;/el-button</span><br><span class="line">                &gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>关键部分在</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;scope.row.taskList&quot;</span> <span class="attr">:stripe</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">                ...</span><br></pre></td></tr></table></figure>
<p>就是通过这个<code>Element.Table</code>中这个<code>scope</code>来确定范围，再通过<code>scope.row</code>取得需要的数据即可</p>
<p>可以看一下下面的效果图</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.3ploqxdepee0.webp"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>其实还是有点不满意的地方的，就是每个属性列都要展示一份独立的<code>Table</code>表头</p>
<p>我目前也没找到好的方法把他提取出来，🤔🤔🤔</p>
<p>至此关于主要的分享已经结束了</p>
<h1 id="补充">补充</h1>
<p>可能有人会注意到我上面的属性列表的输入框，那其实我做的一个类似于<code>Excel</code>公式计算的东西</p>
<p>下面也分享一下，其实也很简单，可能我这还是笨方法呢😂😂😂</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;单工作量&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;workload&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; getTaskWorkload(scope.row) &#125;&#125;&lt;/template</span><br><span class="line">        &gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其实本质还是<code>scope</code>定义好范围，计算就是了</p>
<p>把需要的方法写在<code>methods</code>里即可，唯一我觉得需要注意的地方是，如果函数调用参数是另一个函数计算的，那么可能需要在最后的函数中再调用一次，如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 计算总工作量 */</span></span><br><span class="line"><span class="title function_">getWorkload</span>(<span class="params">row</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="built_in">parseFloat</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> row.<span class="property">taskList</span>) &#123;</span><br><span class="line">        y += <span class="built_in">parseFloat</span>(<span class="variable language_">this</span>.<span class="title function_">getTaskWorkload</span>(row.<span class="property">taskList</span>[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> y.<span class="title function_">toFixed</span>(<span class="number">3</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h1 id="总结">总结</h1>
<p>做毕设期间学到了不少，这种能获得的时候其实就是很幸福的</p>
<p>还有如果有错误的话，非常欢迎指正😁😁😁</p>
]]></content>
      <tags>
        <tag>ruoyi</tag>
        <tag>Vue</tag>
        <tag>Element</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA与Eclipse的简单设置（转载）</title>
    <url>/article/d315096d.html</url>
    <content><![CDATA[<h1 id="前言">前言</h1>
<p>正所谓工欲善其事必先利其器，对于Java的学习，IDEA与Eclipese应该是必不可少的，好的IDE可以大大加快我们的开发速度，最关键的是界面优化使得我们在编程时不再感到那么枯燥，反而因为IDE的UI而爱上编程。本篇仅仅是转载！</p>
<h1 id="参考">参考</h1>
<p><a href="https://zhuanlan.zhihu.com/p/413305008">IntelliJ
IDEA详细配置</a></p>
]]></content>
      <tags>
        <tag>记录</tag>
        <tag>软件/工具</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC并发编程(三)</title>
    <url>/article/2a621ad2.html</url>
    <content><![CDATA[<p>因为内容太多了，所以将其拆分为以下内容</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/fba0a19b.html">JUC并发编程(一)</a></li>
<li><a
href="https://wnhyang.github.io/article/54913af9.html">JUC并发编程(二)</a></li>
<li><a
href="https://wnhyang.github.io/article/2a621ad2.html">JUC并发编程(三)（当前）</a></li>
<li><a
href="https://wnhyang.github.io/article/d021f5dd.html">JUC并发编程(四)</a></li>
<li><a
href="https://wnhyang.github.io/article/d68aa2a0.html">JUC并发编程(五)</a></li>
</ul>
<h1 id="参考">参考</h1>
<p><a
href="https://www.bilibili.com/video/BV1B7411L7tE">https://www.bilibili.com/video/BV1B7411L7tE</a></p>
<span id="more"></span>
<h2 id="常用辅助类必会">常用辅助类（必会）</h2>
<h3 id="countdownlatch">CountDownLatch</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计数器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCountDownLatch</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 总数6</span></span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot; Go out&quot;</span>);</span><br><span class="line">                countDownLatch.countDown();<span class="comment">// 数量-1</span></span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();<span class="comment">// 等待计数器归零，再向下执行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Close the Door&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>原理：</strong></p>
<p>countDownLatch.countDown();// 数量-1</p>
<p>countDownLatch.await();// 等待计数器归零，再向下执行</p>
<p>每次有线程调用countDown()数量-1.假设计数器变为0，countDownLatch.await()就会被唤醒，继续执行！</p>
<h3 id="cyclicbarrier">CyclicBarrier</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加法计数器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCyclicBarrier</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        CyclicBarrier cyclicBarrier=<span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">7</span>,()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;召唤神龙！&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> temp=i;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;收集了&quot;</span>+temp+<span class="string">&quot;个龙珠&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    cyclicBarrier.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="semaphore">Semaphore</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSemaphore</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();<span class="comment">// 获得</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;抢到车位&quot;</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;离开车位&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    semaphore.release();<span class="comment">// 释放</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>原理：</strong></p>
<p>semaphore.acquire();//
获得，加入已经满了，等待，等待到被释放为止！</p>
<p>semaphore.release();//
释放，会将当前信号量+1，然后唤醒等待的线程！</p>
<p>作用：多个共享资源互斥的使用！并发限流，控制最大的线程数！</p>
<h2 id="读写锁">读写锁</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestReadWriteLock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 独占锁（写锁）</span></span><br><span class="line"><span class="comment">         * 共享锁（读锁）</span></span><br><span class="line"><span class="comment">         * ReadWriteLock</span></span><br><span class="line"><span class="comment">         * 读-读：可以共存</span></span><br><span class="line"><span class="comment">         * 读-写：不可共存</span></span><br><span class="line"><span class="comment">         * 写+写：不可共存</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// MyCache myCache = new MyCache();</span></span><br><span class="line">        MyCacheLock myCache=<span class="keyword">new</span> <span class="title class_">MyCacheLock</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                myCache.put(temp + <span class="string">&quot;&quot;</span>, temp + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//读出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                myCache.get(temp + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义缓存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCache</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;写入&quot;</span> + key);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;写入OK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;读出&quot;</span> + key);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;读出OK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义缓存</span></span><br><span class="line"><span class="comment"> * 加锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCacheLock</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReadWriteLock</span> <span class="variable">readWriteLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        readWriteLock.writeLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;写入&quot;</span> + key);</span><br><span class="line">            map.put(key, value);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;写入OK&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            readWriteLock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        readWriteLock.readLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;读出&quot;</span> + key);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;读出OK&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            readWriteLock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="阻塞队列blockingqueue">阻塞队列（BlockingQueue）</h2>
<p>什么情况下需要使用<strong>阻塞队列</strong>，多线程并发处理，线程池！</p>
<p><strong>学会使用队列</strong></p>
<p>添加、移除</p>
<p><strong>四组API</strong></p>
<table>
<thead>
<tr class="header">
<th>方式</th>
<th>抛出异常</th>
<th>有返回值</th>
<th>阻塞等待</th>
<th>超时等待</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>添加</td>
<td>add()</td>
<td>offer()</td>
<td>put()</td>
<td>offer(,,)</td>
</tr>
<tr class="even">
<td>移除</td>
<td>remove()</td>
<td>poll()</td>
<td>take()</td>
<td>poll(,)</td>
</tr>
<tr class="odd">
<td>检测队首元素</td>
<td>element()</td>
<td>peek()</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<blockquote>
<p>抛出异常</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抛出异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 队列大小</span></span><br><span class="line">    <span class="type">ArrayBlockingQueue</span> <span class="variable">arrayBlockingQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">    System.out.println(arrayBlockingQueue.add(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">    System.out.println(arrayBlockingQueue.add(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">    System.out.println(arrayBlockingQueue.add(<span class="string">&quot;c&quot;</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;=====&quot;</span>);</span><br><span class="line">    <span class="comment">// 查看队首</span></span><br><span class="line">    System.out.println(arrayBlockingQueue.element());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// java.lang.IllegalStateException: Queue full 抛出异常，队列已满</span></span><br><span class="line">    <span class="comment">// System.out.println(arrayBlockingQueue.add(&quot;d&quot;));</span></span><br><span class="line"></span><br><span class="line">    System.out.println(arrayBlockingQueue.remove());</span><br><span class="line">    System.out.println(arrayBlockingQueue.remove());</span><br><span class="line">    System.out.println(arrayBlockingQueue.remove());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// java.util.NoSuchElementException 抛出异常，队列已满</span></span><br><span class="line">    <span class="comment">//System.out.println(arrayBlockingQueue.remove());</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>有返回值</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 有返回值没有异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">    ArrayBlockingQueue arrayBlockingQueue=<span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">    System.out.println(arrayBlockingQueue.offer(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">    System.out.println(arrayBlockingQueue.offer(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">    System.out.println(arrayBlockingQueue.offer(<span class="string">&quot;c&quot;</span>));</span><br><span class="line">    <span class="comment">// false</span></span><br><span class="line">    System.out.println(arrayBlockingQueue.offer(<span class="string">&quot;d&quot;</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(arrayBlockingQueue.poll());</span><br><span class="line">    System.out.println(arrayBlockingQueue.poll());</span><br><span class="line">    System.out.println(arrayBlockingQueue.poll());</span><br><span class="line">    <span class="comment">// null</span></span><br><span class="line">    System.out.println(arrayBlockingQueue.poll());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>阻塞等待</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 等待，阻塞（一直阻塞）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    ArrayBlockingQueue arrayBlockingQueue=<span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    arrayBlockingQueue.put(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    arrayBlockingQueue.put(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">    arrayBlockingQueue.put(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;=====&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待，一直阻塞</span></span><br><span class="line">    <span class="comment">//arrayBlockingQueue.put(&quot;d&quot;);</span></span><br><span class="line"></span><br><span class="line">    System.out.println(arrayBlockingQueue.take());</span><br><span class="line">    System.out.println(arrayBlockingQueue.take());</span><br><span class="line">    System.out.println(arrayBlockingQueue.take());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待，一直阻塞</span></span><br><span class="line">    System.out.println(arrayBlockingQueue.take());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>超时等待</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 超时等待</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    ArrayBlockingQueue arrayBlockingQueue=<span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">    System.out.println(arrayBlockingQueue.offer(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">    System.out.println(arrayBlockingQueue.offer(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">    System.out.println(arrayBlockingQueue.offer(<span class="string">&quot;c&quot;</span>));</span><br><span class="line">    <span class="comment">// false,等待2秒退出</span></span><br><span class="line">    System.out.println(arrayBlockingQueue.offer(<span class="string">&quot;d&quot;</span>,<span class="number">2</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;=====&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(arrayBlockingQueue.poll());</span><br><span class="line">    System.out.println(arrayBlockingQueue.poll());</span><br><span class="line">    System.out.println(arrayBlockingQueue.poll());</span><br><span class="line">    <span class="comment">// null</span></span><br><span class="line">    System.out.println(arrayBlockingQueue.poll(<span class="number">2</span>,TimeUnit.SECONDS));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>SynchronousQueue 同步队列</p>
</blockquote>
<p>没有容量，进去一个元素，必须等待取出后，才能再存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronousQueueDemo</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步队列</span></span><br><span class="line"><span class="comment">     * put()元素，必须取出take()，才能再次put()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot; put 1&quot;</span>);</span><br><span class="line">                blockingQueue.put(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot; put 2&quot;</span>);</span><br><span class="line">                blockingQueue.put(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot; put 3&quot;</span>);</span><br><span class="line">                blockingQueue.put(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,<span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;=&gt;&quot;</span>+blockingQueue.take());</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;=&gt;&quot;</span>+blockingQueue.take());</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;=&gt;&quot;</span>+blockingQueue.take());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;T2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="线程池重点">线程池（重点）</h2>
<blockquote>
<p>池化技术</p>
</blockquote>
<p>程序运行的本质：占用系统资源！优化资源的使用 =&gt; 池化技术</p>
<p><strong>好处：</strong></p>
<ol type="1">
<li>降低资源消耗</li>
<li>提高响应速度</li>
<li>方便管理</li>
</ol>
<p><strong>线程复用，可以控制最大并发数，管理线程</strong></p>
<blockquote>
<p>线程池三大方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// ExecutorService threadPool = Executors.newSingleThreadExecutor();// 单个线程</span></span><br><span class="line">        <span class="comment">// ExecutorService threadPool = Executors.newFixedThreadPool(5);// 固定</span></span><br><span class="line">         <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newCachedThreadPool();<span class="comment">// 可变的</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                threadPool.execute(() -&gt; &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; ok&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;java</span><br><span class="line">            threadPool.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>七大参数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newSingleThreadExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FinalizableDelegatedExecutorService</span></span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;()));java</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newCachedThreadPool</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 本质newCachedThreadPool()</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,	// 核心线程池大小</span></span><br><span class="line"><span class="params">                              <span class="type">int</span> maximumPoolSize, // 最大核心线程池大小</span></span><br><span class="line"><span class="params">                              <span class="type">long</span> keepAliveTime, // 超时了没有人调用就会释放</span></span><br><span class="line"><span class="params">                              TimeUnit unit, // 超时单位</span></span><br><span class="line"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue, //	阻塞队列</span></span><br><span class="line"><span class="params">                              ThreadFactory threadFactory, // 线程工厂，创建线程的，一般不动</span></span><br><span class="line"><span class="params">                              RejectedExecutionHandler handler)</span> <span class="comment">// 拒绝策略 &#123;</span></span><br><span class="line">        <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">            keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">        <span class="keyword">if</span> (workQueue == <span class="literal">null</span> || threadFactory == <span class="literal">null</span> || handler == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="built_in">this</span>.acc = System.getSecurityManager() == <span class="literal">null</span> ?</span><br><span class="line">                <span class="literal">null</span> :</span><br><span class="line">                AccessController.getContext();</span><br><span class="line">        <span class="built_in">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">        <span class="built_in">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">        <span class="built_in">this</span>.workQueue = workQueue;</span><br><span class="line">        <span class="built_in">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">        <span class="built_in">this</span>.threadFactory = threadFactory;</span><br><span class="line">        <span class="built_in">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>手动创建线程池 + 四种拒绝策略</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 四种拒绝策略</span></span><br><span class="line"><span class="comment">         * new ThreadPoolExecutor.AbortPolicy()：银行满了，还有人来，不处理，抛出异常</span></span><br><span class="line"><span class="comment">         * new ThreadPoolExecutor.CallerRunsPolicy()：哪来的去哪里</span></span><br><span class="line"><span class="comment">         * new ThreadPoolExecutor.DiscardPolicy()：队列满了，丢到任务，不会抛出异常</span></span><br><span class="line"><span class="comment">         * new ThreadPoolExecutor.DiscardOldestPolicy()：队列满了，丢弃最旧的，重试，也不会抛出异常</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">                <span class="number">2</span>,</span><br><span class="line">                <span class="number">5</span>,</span><br><span class="line">                <span class="number">3</span>,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">                Executors.defaultThreadFactory(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardOldestPolicy());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 最大承载 = 最大线程数 + 队列大小</span></span><br><span class="line">            <span class="comment">// 超出 java.util.concurrent.RejectedExecutionException</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">                threadPool.execute(() -&gt; &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; ok&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            threadPool.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>小结</p>
</blockquote>
<p>了解 CPU密集型，IO密集型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 最大线程到底该如何定义</span></span><br><span class="line"><span class="comment">         * 1.CPU 密集型 几核，就是几，可以保持CPU的效率最高！</span></span><br><span class="line"><span class="comment">         * 2.IO 密集型 &gt;判断程序中十分耗IO的线程</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        System.out.println(Runtime.getRuntime().availableProcessors());</span><br><span class="line"></span><br><span class="line">   	&#125;</span><br></pre></td></tr></table></figure>
<p>因为内容太多了，所以将其拆分为以下内容</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/fba0a19b.html">JUC并发编程(一)</a></li>
<li><a
href="https://wnhyang.github.io/article/54913af9.html">JUC并发编程(二)</a></li>
<li><a
href="https://wnhyang.github.io/article/2a621ad2.html">JUC并发编程(三)（当前）</a></li>
<li><a
href="https://wnhyang.github.io/article/d021f5dd.html">JUC并发编程(四)</a></li>
<li><a
href="https://wnhyang.github.io/article/d68aa2a0.html">JUC并发编程(五)</a></li>
</ul>
]]></content>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC并发编程(二)</title>
    <url>/article/54913af9.html</url>
    <content><![CDATA[<p>因为内容太多了，所以将其拆分为以下内容</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/fba0a19b.html">JUC并发编程(一)</a></li>
<li><a
href="https://wnhyang.github.io/article/54913af9.html">JUC并发编程(二)（当前）</a></li>
<li><a
href="https://wnhyang.github.io/article/2a621ad2.html">JUC并发编程(三)</a></li>
<li><a
href="https://wnhyang.github.io/article/d021f5dd.html">JUC并发编程(四)</a></li>
<li><a
href="https://wnhyang.github.io/article/d68aa2a0.html">JUC并发编程(五)</a></li>
</ul>
<h1 id="参考">参考</h1>
<p><a
href="https://www.bilibili.com/video/BV1B7411L7tE">https://www.bilibili.com/video/BV1B7411L7tE</a></p>
<span id="more"></span>
<h2 id="生产者消费者问题">生产者消费者问题</h2>
<p>面试：单例模式，排序算法，生产者消费者问题，死锁</p>
<blockquote>
<p>生产者消费者问题 Synchronized</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Data data=<span class="keyword">new</span> <span class="title class_">Data</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.increment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.decrement();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> number=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (number!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        number++;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;=&gt;&quot;</span>+number);</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span>(number==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        number--;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;=&gt;&quot;</span>+number);</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>问题存在，A，B，C，D，4个线程！虚假唤醒</p>
</blockquote>
<p><strong>if改为while</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Data data=<span class="keyword">new</span> <span class="title class_">Data</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.increment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.decrement();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.increment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.decrement();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;D&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> number=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (number!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        number++;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;=&gt;&quot;</span>+number);</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (number==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        number--;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;=&gt;&quot;</span>+number);</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>JUC版的生产者消费者问题</p>
</blockquote>
<p>通过Lock找到Condition</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Data2</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Data2</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.increment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.decrement();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.increment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.decrement();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;D&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">Condition</span> <span class="variable">condition</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="comment">// condition.await();</span></span><br><span class="line">    <span class="comment">// condition.signalAll();</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">0</span>) &#123;</span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + number);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number == <span class="number">0</span>) &#123;</span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + number);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Condition 精准的通知和唤醒线程</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Data3</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Data3</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                data.printfA();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                data.printfB();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                data.printfC();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data3</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="type">Condition</span> <span class="variable">condition1</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="type">Condition</span> <span class="variable">condition2</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="type">Condition</span> <span class="variable">condition3</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printfA</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">1</span>) &#123;</span><br><span class="line">                condition1.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number=<span class="number">2</span>;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;AAAAA&quot;</span>);</span><br><span class="line">            condition2.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printfB</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">2</span>) &#123;</span><br><span class="line">                condition2.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number=<span class="number">3</span>;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;BBBBB&quot;</span>);</span><br><span class="line">            condition3.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printfC</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">3</span>) &#123;</span><br><span class="line">                condition3.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number=<span class="number">1</span>;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;CCCCC&quot;</span>);</span><br><span class="line">            condition1.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="并发下集合不安全">并发下集合不安全</h2>
<p>java.util.ConcurrentModificationException 并发修改异常</p>
<blockquote>
<p>List 不安全</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestList</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list= <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 并发下ArrayList不安全，synchronized</span></span><br><span class="line"><span class="comment">         * 1.Vector&lt;&gt;()</span></span><br><span class="line"><span class="comment">         * 2.Collections.synchronizedList(new ArrayList&lt;&gt;())</span></span><br><span class="line"><span class="comment">         * 3.new CopyOnWriteArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                list.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Set 不安全</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Set&lt;String&gt; set =<span class="keyword">new</span> <span class="title class_">CopyOnWriteArraySet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1.Collections.synchronizedSet(new HashSet&lt;&gt;());</span></span><br><span class="line"><span class="comment">         * 2.new CopyOnWriteArraySet&lt;&gt;();</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                set.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line">                System.out.println(set);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Hashset底层HashMap</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Map 不安全</p>
</blockquote>
<p>回顾Map基本操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The default initial capacity - MUST be a power of two.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The maximum capacity, used if a higher value is implicitly specified</span></span><br><span class="line"><span class="comment"> * by either of the constructors with arguments.</span></span><br><span class="line"><span class="comment"> * MUST be a power of two &lt;= 1&lt;&lt;30.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The load factor used when none specified in constructor.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMap</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * map这样用的吗？ 不是，工作中不用 HashMap</span></span><br><span class="line"><span class="comment">         * 默认等价于什么？ new HashMap&lt;&gt;(16,0.75);</span></span><br><span class="line"><span class="comment">         * 加载因子，初始容量</span></span><br><span class="line"><span class="comment">         * 1.Collections.synchronizedMap(new HashMap&lt;&gt;());</span></span><br><span class="line"><span class="comment">         * 2.new ConcurrentHashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map= <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                map.put(Thread.currentThread().getName(), UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line">                System.out.println(map);</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="callable">Callable</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCallable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * new Thread(new Runable()).start();</span></span><br><span class="line"><span class="comment">         * new Thread(new FutureTask&lt;V&gt;()).start();</span></span><br><span class="line"><span class="comment">         * new Thread(new FutureTask&lt;V&gt;(Callable )).start();</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        MyThread myThread=<span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        FutureTask futureTask=<span class="keyword">new</span> <span class="title class_">FutureTask</span>(myThread);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">o</span> <span class="operator">=</span> (Integer) futureTask.get();<span class="comment">//可能产生阻塞</span></span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Call&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1024</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>细节：</strong></p>
<ol type="1">
<li>有缓存</li>
<li>结果可能需要等待，会阻塞！</li>
</ol>
<h2 id="section"></h2>
<p>因为内容太多了，所以将其拆分为以下内容</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/fba0a19b.html">JUC并发编程(一)</a></li>
<li><a
href="https://wnhyang.github.io/article/54913af9.html">JUC并发编程(二)（当前）</a></li>
<li><a
href="https://wnhyang.github.io/article/2a621ad2.html">JUC并发编程(三)</a></li>
<li><a
href="https://wnhyang.github.io/article/d021f5dd.html">JUC并发编程(四)</a></li>
<li><a
href="https://wnhyang.github.io/article/d68aa2a0.html">JUC并发编程(五)</a></li>
</ul>
]]></content>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC并发编程(五)</title>
    <url>/article/d68aa2a0.html</url>
    <content><![CDATA[<p>因为内容太多了，所以将其拆分为以下内容</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/fba0a19b.html">JUC并发编程(一)</a></li>
<li><a
href="https://wnhyang.github.io/article/54913af9.html">JUC并发编程(二)</a></li>
<li><a
href="https://wnhyang.github.io/article/2a621ad2.html">JUC并发编程(三)</a></li>
<li><a
href="https://wnhyang.github.io/article/d021f5dd.html">JUC并发编程(四)</a></li>
<li><a
href="https://wnhyang.github.io/article/d68aa2a0.html">JUC并发编程(五)（当前）</a></li>
</ul>
<h1 id="参考">参考</h1>
<p><a
href="https://www.bilibili.com/video/BV1B7411L7tE">https://www.bilibili.com/video/BV1B7411L7tE</a></p>
<span id="more"></span>
<h2 id="彻底玩转单例模式">彻底玩转单例模式</h2>
<blockquote>
<p>饿汉式</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉式单例模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hungry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 浪费空间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] data1=<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] data2=<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] data3=<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] data4=<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Hungry</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Hungry HUNGRY=<span class="keyword">new</span> <span class="title class_">Hungry</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Hungry <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HUNGRY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>DCL懒汉式</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式单例模式</span></span><br><span class="line"><span class="comment"> * 道高一尺魔高一丈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMan</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazyMan</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (LazyMan.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="literal">false</span>) &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;不要试图利用反射破坏异常&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazyMan lazyMan;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 双重检测锁模式的 懒汉式单例 DCL懒汉式</span></span><br><span class="line">        <span class="keyword">if</span> (lazyMan == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (lazyMan == <span class="literal">null</span>) &#123;</span><br><span class="line">                    lazyMan = <span class="keyword">new</span> <span class="title class_">LazyMan</span>();</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     *  不是原子性操作</span></span><br><span class="line"><span class="comment">                     *  1、分配内存空间</span></span><br><span class="line"><span class="comment">                     *  2、执行构造方法，初始化对象</span></span><br><span class="line"><span class="comment">                     *  3、把这个对象指向这个空间</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> lazyMan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        <span class="comment">// 多线程并发</span></span><br><span class="line">        <span class="comment">// for (int i = 0; i &lt; 10; i++) &#123;</span></span><br><span class="line">        <span class="comment">//     new Thread(() -&gt; &#123;</span></span><br><span class="line">        <span class="comment">//         LazyMan.getInstance();</span></span><br><span class="line">        <span class="comment">//     &#125;).start();</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射</span></span><br><span class="line">        <span class="comment">// LazyMan instance1=LazyMan.getInstance();</span></span><br><span class="line">        Constructor&lt;LazyMan&gt; declaredConstructor = LazyMan.class.getDeclaredConstructor(<span class="literal">null</span>);</span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">LazyMan</span> <span class="variable">instance2</span> <span class="operator">=</span> declaredConstructor.newInstance();</span><br><span class="line">        <span class="type">LazyMan</span> <span class="variable">instance3</span> <span class="operator">=</span> declaredConstructor.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// System.out.println(instance1);</span></span><br><span class="line">        System.out.println(instance2);</span><br><span class="line">        System.out.println(instance3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>静态内部类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态内部类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Holder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Holder</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Holder <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClass.HOLDER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Holder</span> <span class="variable">HOLDER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Holder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>单例不安全，反射</p>
</blockquote>
<blockquote>
<p>枚举</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EnumSingle</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> EnumSingle <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        <span class="type">EnumSingle</span> <span class="variable">instance1</span> <span class="operator">=</span> EnumSingle.INSTANCE;</span><br><span class="line">        Constructor&lt;EnumSingle&gt; declaredConstructor = EnumSingle.class.getDeclaredConstructor(<span class="literal">null</span>);</span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        EnumSingle instance2=declaredConstructor.newInstance();</span><br><span class="line">        System.out.println(instance1);</span><br><span class="line">        System.out.println(instance2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>枚举的最终反编译，源码有的是有参构造</p>
<h2 id="深入理解cas">深入理解CAS</h2>
<blockquote>
<p>什么是 CAS</p>
</blockquote>
<p>大厂必须要研究底层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CASDemo</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// CAS compareAndSet : 比较并交换</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        AtomicInteger atomicInteger=<span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">2020</span>);</span><br><span class="line">        <span class="comment">// 期望、更新</span></span><br><span class="line">        <span class="comment">// public final boolean compareAndSet(int expect, int update)</span></span><br><span class="line">        <span class="comment">// 如果期望值达到了，就更新，否则不更新 ，CAS 是 CPU 并发的原语！</span></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2020</span>, <span class="number">2021</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line"></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2020</span>, <span class="number">2021</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Unsafe 类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomicInteger</span> <span class="keyword">extends</span> <span class="title class_">Number</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">6214790243416807050L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setup to use Unsafe.compareAndSwapInt for updates</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> valueOffset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            valueOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AtomicInteger.class.getDeclaredField(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// Java无法操作内存</span></span><br><span class="line"><span class="comment">// Java可以调用C++ native</span></span><br><span class="line"><span class="comment">// C++可以操作内存</span></span><br><span class="line"><span class="comment">// Java的后门。可以通过这个类操</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> value;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">compareAndSwapInt</span><span class="params">(Object var1, <span class="type">long</span> var2, <span class="type">int</span> var4, <span class="type">int</span> var5)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndAddInt</span><span class="params">(Object var1, <span class="type">long</span> var2, <span class="type">int</span> var4)</span> &#123;</span><br><span class="line">    <span class="type">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        var5 = <span class="built_in">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">    &#125; <span class="keyword">while</span>(!<span class="built_in">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CAS
比较并交换，比较当前工作内存中的值和主内存中的值，如果这个值是期望的，那么则执行操作！如果不是就一直循环！</p>
<p><strong>缺点：</strong></p>
<ol type="1">
<li><p>循环会耗时</p></li>
<li><p>一次性只能保证一个共享交量的原子性</p></li>
<li><p>ABA问题</p></li>
</ol>
<blockquote>
<p>CAS : ABA 问题（狸猫换太子）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CASDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CAS compareAndSet : 比较并交换</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">2020</span>);</span><br><span class="line">        <span class="comment">// 期望、更新</span></span><br><span class="line">        <span class="comment">// public final boolean compareAndSet(int expect, int update)</span></span><br><span class="line">        <span class="comment">// 如果期望值达到了，就更新，否则不更新 ，CAS 是 CPU 并发的原语！</span></span><br><span class="line">        <span class="comment">// ===== 捣乱的线程 ======</span></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2020</span>, <span class="number">2021</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2021</span>, <span class="number">2020</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ===== 期望的线程 ======</span></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2020</span>, <span class="number">2021</span>));</span><br><span class="line">        System.out.println(atomicjavaInteger.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="原子引用">原子引用</h2>
<blockquote>
<p>解决 ABA 问题，引入原子引用！对应思想：乐观锁！</p>
</blockquote>
<p>带版本号的 原子操作！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CASDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CAS compareAndSet : 比较并交换</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// AtomicInteger atomicInteger = new AtomicInteger(1);</span></span><br><span class="line"></span><br><span class="line">        AtomicStampedReference&lt;Integer&gt; atomicInteger = <span class="keyword">new</span> <span class="title class_">AtomicStampedReference</span>&lt;&gt;(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> atomicInteger.getStamp(); <span class="comment">// 获得版本号</span></span><br><span class="line">            System.out.println(<span class="string">&quot;A1=&gt; &quot;</span>+stamp);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(atomicInteger.compareAndSet(<span class="number">1</span>, <span class="number">2</span>, atomicInteger.getStamp(), atomicInteger.getStamp() + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;A2=&gt; &quot;</span>+atomicInteger.getStamp());</span><br><span class="line"></span><br><span class="line">            System.out.println(atomicInteger.compareAndSet(<span class="number">2</span>, <span class="number">1</span>, atomicInteger.getStamp(), atomicInteger.getStamp() + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;A3=&gt; &quot;</span>+atomicInteger.getStamp());</span><br><span class="line"></span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> atomicInteger.getStamp(); <span class="comment">// 获得版本号</span></span><br><span class="line">            System.out.println(<span class="string">&quot;B1=&gt; &quot;</span>+stamp);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(atomicInteger.compareAndSet(<span class="number">1</span>, <span class="number">6</span>, stamp, stamp + <span class="number">1</span>));</span><br><span class="line">java</span><br><span class="line">            System.out.println(<span class="string">&quot;B2=&gt; &quot;</span>+atomicInteger.getStamp());</span><br><span class="line"></span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<p>【强制】所有的相同类型的包装类对象之间值的比较，全部使用 equals
方法比较。 说明：对于 Integer var = ? 在-128 至 127
范围内的赋值，Integer 对象是在 阿里巴巴 Java 开发手册
——禁止用于商业用途，违者必究—— 7 /35 IntegerCache.cache
产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行
判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，
推荐使用 equals 方法进行判断。 ---《阿里巴巴Java开发手册》</p>
<h2 id="各种锁的理解">各种锁的理解</h2>
<h3 id="公平锁非公平锁">公平锁、非公平锁</h3>
<p>公平锁：非常公平，不能够插队，必须先来后到！
非公平锁：非常不公平，可以插队（默认都是非公平）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ReentrantLock</span><span class="params">()</span> &#123;</span><br><span class="line">    sync = <span class="keyword">new</span> <span class="title class_">NonfairSync</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ReentrantLock</span><span class="params">(<span class="type">boolean</span> fair)</span> &#123;</span><br><span class="line">    sync = fair ? <span class="keyword">new</span> <span class="title class_">FairSync</span>() : <span class="keyword">new</span> <span class="title class_">NonfairSync</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="可重用锁">可重用锁</h3>
<p>可重用锁（递归锁）</p>
<blockquote>
<p>Synchronized</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone1</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone1</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            phone.sms();</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            phone.sms();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sms</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; sms&quot;</span>);</span><br><span class="line">        call();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; call&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Lock</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone2</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone2</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            phone.sms();</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            phone.sms();</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sms</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; sms&quot;</span>);</span><br><span class="line">            call();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; call&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自旋锁">自旋锁</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自旋锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpinLockDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    AtomicReference&lt;Thread&gt; atomicReference=<span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myLock</span><span class="params">()</span>&#123;</span><br><span class="line">        Thread thread=Thread.currentThread();</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;==&gt; mylock&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (!atomicReference.compareAndSet(<span class="literal">null</span>,thread))&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myUnLock</span><span class="params">()</span>&#123;</span><br><span class="line">        Thread thread=Thread.currentThread();</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;==&gt; myUnlock&quot;</span>);</span><br><span class="line"></span><br><span class="line">        atomicReference.compareAndSet(thread,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSpinLock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SpinLockDemo</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpinLockDemo</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.myLock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.myUnLock();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.myLock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.myUnLock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;T2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="死锁">死锁</h3>
<blockquote>
<p>死锁是什么</p>
</blockquote>
<p>死锁测试，怎么排除死锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLockDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String lockA=<span class="string">&quot;lockA&quot;</span>;</span><br><span class="line">        String lockB=<span class="string">&quot;lockB&quot;</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyThread</span>(lockA,lockB),<span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyThread</span>(lockB,lockA),<span class="string">&quot;T2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lockA;</span><br><span class="line">    <span class="keyword">private</span> String lockB;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(String lockA,String lockB)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.lockA=lockA;</span><br><span class="line">        <span class="built_in">this</span>.lockB=lockB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lockA)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;lock:&quot;</span>+lockA+<span class="string">&quot;=&gt;get&quot;</span>+lockB);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (lockB)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;lock:&quot;</span>+lockB+<span class="string">&quot;=&gt;get&quot;</span>+lockA);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>解决问题</p>
</blockquote>
<p>1、使用 <code>jps</code> 定位进程号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\18339\Desktop\ideaprojects\juc&gt;jps -l</span><br><span class="line">15792 com.lock.DeadLockDemo</span><br><span class="line">9504 org.jetbrains.jps.cmdline.Launcher</span><br><span class="line">14868 sun.tools.jps.Jps</span><br><span class="line">9512</span><br><span class="line"></span><br><span class="line">C:\Users\18339\Desktop\ideaprojects\juc&gt;</span><br></pre></td></tr></table></figure>
<p>2、使用 <code>jstack  进程号</code> 找到死锁问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Found one Java-level deadlock:</span><br><span class="line"></span><br><span class="line">&quot;T2&quot;:</span><br><span class="line">  waiting to lock monitor 0x000002e34e2a0a68 (object 0x00000000d6105220, a java.lang.String),</span><br><span class="line">  which is held by &quot;T1&quot;</span><br><span class="line">&quot;T1&quot;:</span><br><span class="line">  waiting to lock monitor 0x000002e34e2a3248 (object 0x00000000d6105258, a java.lang.String),</span><br><span class="line">  which is held by &quot;T2&quot;</span><br><span class="line"></span><br><span class="line">Java stack information for the threads listed above:</span><br><span class="line"></span><br><span class="line">&quot;T2&quot;:</span><br><span class="line">        at com.lock.MyThread.run(DeadLockDemo.java:38)</span><br><span class="line">        - waiting to lock &lt;0x00000000d6105220&gt; (a java.lang.String)</span><br><span class="line">        - locked &lt;0x00000000d6105258&gt; (a java.lang.String)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">&quot;T1&quot;:</span><br><span class="line">        at com.lock.MyThread.run(DeadLockDemo.java:38)</span><br><span class="line">        - waiting to lock &lt;0x00000000d6105258&gt; (a java.lang.String)</span><br><span class="line">        - locked &lt;0x00000000d6105220&gt; (a java.lang.String)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line">Found 1 deadlock.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Users\18339\Desktop\ideaprojects\juc&gt;</span><br></pre></td></tr></table></figure>
<p>面试，工作！排查问题</p>
<p>1、日志</p>
<p>2、堆栈</p>
<p>因为内容太多了，所以将其拆分为以下内容</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/fba0a19b.html">JUC并发编程(一)</a></li>
<li><a
href="https://wnhyang.github.io/article/54913af9.html">JUC并发编程(二)</a></li>
<li><a
href="https://wnhyang.github.io/article/2a621ad2.html">JUC并发编程(三)</a></li>
<li><a
href="https://wnhyang.github.io/article/d021f5dd.html">JUC并发编程(四)</a></li>
<li><a
href="https://wnhyang.github.io/article/d68aa2a0.html">JUC并发编程(五)（当前）</a></li>
</ul>
]]></content>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Web 大作业（在线新闻发布系统）数据库设计</title>
    <url>/article/48213f39.html</url>
    <content><![CDATA[<h1 id="提要">提要</h1>
<p>如标题所示，要完成的是在线新闻发布系统的数据库设计，最开始这方面一直没有进展，直到搜到一些有帮助的文章后，并解决了新闻文章的存储问题（富文本编辑并直接存入方式），终于可以开展工作了！</p>
<p>声明：</p>
<p>虽然这里的数据库设计只是大部分数据库的设计，因为这个项目是合作开发的，我只会介绍我设计或说是我最熟悉的那部分数据库。</p>
<span id="more"></span>
<h1 id="主要数据库设计">主要数据库设计</h1>
<p>这里的设计还不是很成熟，必然存在些许问题，但总要经历这一步的嘛。</p>
<h2 id="数据库webnews">数据库webnews</h2>
<p>简单说一说吧，存在太多问题了，文章结尾会再提到。</p>
<p>users数据表</p>
<table>
<thead>
<tr class="header">
<th>名</th>
<th>类型</th>
<th>长度</th>
<th>不是null</th>
<th>键</th>
<th>字段说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>user_id</td>
<td>bigint</td>
<td>20</td>
<td>*</td>
<td>主键</td>
<td>用户id，自动创建，递增</td>
</tr>
<tr class="even">
<td>user_name</td>
<td>varchar</td>
<td>255</td>
<td>*</td>
<td></td>
<td>用户名</td>
</tr>
<tr class="odd">
<td>user_password</td>
<td>varchar</td>
<td>255</td>
<td>*</td>
<td></td>
<td>密码</td>
</tr>
<tr class="even">
<td>user_phone</td>
<td>varchar</td>
<td>20</td>
<td></td>
<td></td>
<td>手机号</td>
</tr>
<tr class="odd">
<td>user_address</td>
<td>varchar</td>
<td>255</td>
<td></td>
<td></td>
<td>地址</td>
</tr>
<tr class="even">
<td>user_detail</td>
<td>varchar</td>
<td>255</td>
<td></td>
<td></td>
<td>详细信息</td>
</tr>
<tr class="odd">
<td>user_email</td>
<td>varchar</td>
<td>40</td>
<td>*</td>
<td></td>
<td>邮箱，对照着用户id，登录使用</td>
</tr>
<tr class="even">
<td>user_icon</td>
<td>varchar</td>
<td>255</td>
<td></td>
<td></td>
<td>用户头像</td>
</tr>
</tbody>
</table>
<p>category数据表</p>
<table>
<thead>
<tr class="header">
<th>名</th>
<th>类型</th>
<th>长度</th>
<th>不是null</th>
<th>键</th>
<th>字段说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>category_id</td>
<td>bigint</td>
<td>20</td>
<td>*</td>
<td>主键</td>
<td>新闻类型id，固定几个类型</td>
</tr>
<tr class="even">
<td>category_name</td>
<td>varchar</td>
<td>255</td>
<td>*</td>
<td></td>
<td>新闻类型名称</td>
</tr>
</tbody>
</table>
<p>news数据表</p>
<table>
<thead>
<tr class="header">
<th>名</th>
<th>类型</th>
<th>长度</th>
<th>不是null</th>
<th>键</th>
<th>字段说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>news_id</td>
<td>bigint</td>
<td>20</td>
<td>*</td>
<td>主键</td>
<td>新闻id，自动创建，递增</td>
</tr>
<tr class="even">
<td>category_id</td>
<td>bigint</td>
<td>20</td>
<td>*</td>
<td></td>
<td>新闻类型id</td>
</tr>
<tr class="odd">
<td>user_id</td>
<td>bigint</td>
<td>20</td>
<td>*</td>
<td></td>
<td>用户id</td>
</tr>
<tr class="even">
<td>title</td>
<td>varchar</td>
<td>255</td>
<td>*</td>
<td></td>
<td>新闻标题</td>
</tr>
<tr class="odd">
<td>content</td>
<td>longtext</td>
<td></td>
<td>*</td>
<td></td>
<td>新闻内容</td>
</tr>
<tr class="even">
<td>state</td>
<td>int</td>
<td>1</td>
<td>*</td>
<td></td>
<td>新闻状态（0：审核中，1：通过，2：不通过）</td>
</tr>
<tr class="odd">
<td>createTime</td>
<td>datetime</td>
<td></td>
<td>*</td>
<td></td>
<td>新闻创建时间</td>
</tr>
</tbody>
</table>
<p>comments数据表</p>
<table>
<thead>
<tr class="header">
<th>名</th>
<th>类型</th>
<th>长度</th>
<th>不是null</th>
<th>键</th>
<th>字段说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>comment_id</td>
<td>bigint</td>
<td>20</td>
<td>*</td>
<td>主键</td>
<td>评论id，自动创建，递增</td>
</tr>
<tr class="even">
<td>user_id</td>
<td>bigint</td>
<td>20</td>
<td>*</td>
<td></td>
<td>用户id</td>
</tr>
<tr class="odd">
<td>news_id</td>
<td>bigint</td>
<td>20</td>
<td>*</td>
<td></td>
<td>新闻id</td>
</tr>
<tr class="even">
<td>content</td>
<td>varchar</td>
<td>255</td>
<td>*</td>
<td></td>
<td>评论内容</td>
</tr>
<tr class="odd">
<td>createTime</td>
<td>datetime</td>
<td></td>
<td>*</td>
<td></td>
<td>评论时间</td>
</tr>
</tbody>
</table>
<p>feedbacks数据表</p>
<table>
<thead>
<tr class="header">
<th>名</th>
<th>类型</th>
<th>长度</th>
<th>不是null</th>
<th>键</th>
<th>字段说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>feedback_id</td>
<td>bigint</td>
<td>20</td>
<td>*</td>
<td>主键</td>
<td>反馈id，自动创建，递增</td>
</tr>
<tr class="even">
<td>user_id</td>
<td>bigint</td>
<td>20</td>
<td>*</td>
<td></td>
<td>用户id</td>
</tr>
<tr class="odd">
<td>type</td>
<td>varchar</td>
<td>255</td>
<td>*</td>
<td></td>
<td>类型，固定几种</td>
</tr>
<tr class="even">
<td>content</td>
<td>varchar</td>
<td>255</td>
<td>*</td>
<td></td>
<td>反馈内容</td>
</tr>
<tr class="odd">
<td>createTime</td>
<td>datetime</td>
<td></td>
<td>*</td>
<td></td>
<td>反馈时间</td>
</tr>
</tbody>
</table>
<h1 id="总结">总结</h1>
<p>设计存在许多不当的地方，在设计之前应该清楚的了解需求，对每个数据表命名、数据字段名、数据类型、长度、是否为null、键信息，严格把关，如数据表名应该规范，方便构造java类、sql的编写，数据类型应严格对照mybatis对应类型设计，长度大小要做到在存的下的前提下，尽量减少浪费。这次设计是挺烂的，也就因此在之后合作开发过程中遇到不少麻烦。数据库设计可太重要了！</p>
<p><a href="https://wnhyang.github.io/article/54805cfd.html">Java Web
大作业（在线新闻发布系统）总结</a></p>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
        <tag>MySQL</tag>
        <tag>Spring Framework</tag>
        <tag>Mybatis/Mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC并发编程(四)</title>
    <url>/article/d021f5dd.html</url>
    <content><![CDATA[<p>因为内容太多了，所以将其拆分为以下内容</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/fba0a19b.html">JUC并发编程(一)</a></li>
<li><a
href="https://wnhyang.github.io/article/54913af9.html">JUC并发编程(二)</a></li>
<li><a
href="https://wnhyang.github.io/article/2a621ad2.html">JUC并发编程(三)</a></li>
<li><a
href="https://wnhyang.github.io/article/d021f5dd.html">JUC并发编程(四)（当前）</a></li>
<li><a
href="https://wnhyang.github.io/article/d68aa2a0.html">JUC并发编程(五)</a></li>
</ul>
<h1 id="参考">参考</h1>
<p><a
href="https://www.bilibili.com/video/BV1B7411L7tE">https://www.bilibili.com/video/BV1B7411L7tE</a></p>
<span id="more"></span>
<h2 id="四大函数式接口必须掌握">四大函数式接口（必须掌握）</h2>
<p>现代程序员：Lambda表达式，链式编程，函数式接口，Stream流式计算</p>
<blockquote>
<p>函数式接口：只有一个方法的接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 超级多FunctionalInterface</span></span><br><span class="line"><span class="comment">// 简化编程模型，在新版本的框架层大量应用</span></span><br><span class="line"><span class="comment">// forEach(消费者类型的函数式接口)</span></span><br></pre></td></tr></table></figure>
<p><strong>代码测试</strong></p>
<blockquote>
<p>Function 函数式接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数型接口：有一个输入参数，有一个输出</span></span><br><span class="line"><span class="comment"> * 只要是函数式接口，可以用 lambda表达式 简化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Function&lt;String,String&gt; function = new Function&lt;String,String&gt;()&#123;</span></span><br><span class="line">        <span class="comment">//     @Override</span></span><br><span class="line">        <span class="comment">//     public String apply(String str) &#123;</span></span><br><span class="line">        <span class="comment">//         return str;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line">        Function&lt;String,String&gt; function=(str)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(function.apply(<span class="string">&quot;abc&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Predicate 断言型接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 断言型接口：有一个输入参数，返回值只能是 布尔值！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// Predicate&lt;String&gt; predicate = new Predicate&lt;String&gt;()&#123;</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//     @Override</span></span><br><span class="line">        <span class="comment">//     public boolean test(String str) &#123;</span></span><br><span class="line">        <span class="comment">//         return str.isEmpty();</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line">        Predicate&lt;String&gt; predicate=(str)-&gt;&#123;</span><br><span class="line">          <span class="keyword">return</span> str.isEmpty();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(predicate.test(<span class="string">&quot;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Consumer 消费型接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费性接口：只有输入，没有返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// Consumer&lt;String&gt; consumer = new Consumer&lt;String&gt;()&#123;</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//     @Override</span></span><br><span class="line">        <span class="comment">//     public void accept(String str) &#123;</span></span><br><span class="line">        <span class="comment">//         System.out.println(str);</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line">            Consumer&lt;String&gt; consumer=(str)-&gt;&#123;</span><br><span class="line">                System.out.println(str);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        consumer.accept(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Supplier 供给型接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 供给型接口：没有参数，有返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// Supplier&lt;String&gt; supplier = new Supplier&lt;String&gt;()&#123;</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//     @Override</span></span><br><span class="line">        <span class="comment">//     public String get() &#123;</span></span><br><span class="line">        <span class="comment">//         System.out.println(&quot;get()&quot;);</span></span><br><span class="line">        <span class="comment">//         return &quot;1024&quot;;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line">        Supplier&lt;String&gt; supplier = () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;get()&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1024&quot;</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(supplier.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="stream流式计算">Stream流式计算</h2>
<blockquote>
<p>什么是Stream流式计算</p>
</blockquote>
<p>大数据：存储 + 计算</p>
<p>集合、MySQL 本质就是存储</p>
<p>计算都应该交给流来操作！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 题目要求：</span></span><br><span class="line"><span class="comment"> * 现有5个用户！筛选：</span></span><br><span class="line"><span class="comment"> * 1、ID 必须是偶数</span></span><br><span class="line"><span class="comment"> * 2、年龄必须大于23岁</span></span><br><span class="line"><span class="comment"> * 3、用户名转为大写字母</span></span><br><span class="line"><span class="comment"> * 4、用户名字母倒序排列</span></span><br><span class="line"><span class="comment"> * 5、只输出一个用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;a&quot;</span>, <span class="number">21</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>, <span class="string">&quot;b&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>, <span class="string">&quot;c&quot;</span>, <span class="number">23</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4</span>, <span class="string">&quot;d&quot;</span>, <span class="number">24</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">6</span>, <span class="string">&quot;e&quot;</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 集合负责存储</span></span><br><span class="line">        List&lt;User&gt; list = Arrays.asList(u1, u2, u3, u4, u5);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算交给Stream</span></span><br><span class="line">        list.stream()</span><br><span class="line">                .filter(u -&gt; &#123;</span><br><span class="line">                    <span class="keyword">return</span> u.getId() % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">                &#125;)</span><br><span class="line">                .filter(u -&gt; &#123;</span><br><span class="line">                    <span class="keyword">return</span> u.getAge() &gt; <span class="number">23</span>;</span><br><span class="line">                &#125;)</span><br><span class="line">                .map(u -&gt; &#123;</span><br><span class="line">                    <span class="keyword">return</span> u.getName().toUpperCase();</span><br><span class="line">                &#125;)</span><br><span class="line">                .sorted((A, B) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">return</span> B.compareTo(A);</span><br><span class="line">                &#125;)</span><br><span class="line">                .limit(<span class="number">1</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="forkjoin">ForkJoin</h2>
<blockquote>
<p>什么是ForkJoin</p>
</blockquote>
<p>JDK1.7，并行执行任务！提高效率，大数据量！</p>
<p>大数据：Map Reduce（把大任务拆分为小任务）</p>
<blockquote>
<p>ForkJoin 特点：工作窃取</p>
</blockquote>
<p>这里维护的的是双向队列</p>
<blockquote>
<p>ForkJoin</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        test1();</span><br><span class="line">        test2();</span><br><span class="line">        test3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1L</span>; i &lt;= <span class="number">1000_0000L</span>; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;test1结果：&quot;</span> + sum + <span class="string">&quot;耗时：&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="type">ForkJoinPool</span> <span class="variable">forkJoinPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>();</span><br><span class="line">        ForkJoinTask&lt;Long&gt; task = <span class="keyword">new</span> <span class="title class_">ForkJoinDemo</span>(<span class="number">1L</span>, <span class="number">1000_0000L</span>);</span><br><span class="line">        ForkJoinTask&lt;Long&gt; submit = forkJoinPool.submit(task);<span class="comment">// 提交任务</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">sum</span> <span class="operator">=</span> submit.get();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;test2结果：&quot;</span> + sum + <span class="string">&quot;耗时：&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> LongStream.rangeClosed(<span class="number">0L</span>, <span class="number">1000_0000L</span>).parallel().reduce(<span class="number">0</span>, Long::sum);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;test3结果：&quot;</span> + sum + <span class="string">&quot;耗时：&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Demo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用 ForkJoin</span></span><br><span class="line"><span class="comment"> * 1、ForkJoinPool 通过它来执行</span></span><br><span class="line"><span class="comment"> * 2、计算任务 ForkJoinPool.execute(ForkJoinTask&lt;?&gt; task)</span></span><br><span class="line"><span class="comment"> * 3、计算类继承</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForkJoinDemo</span> <span class="keyword">extends</span> <span class="title class_">RecursiveTask</span>&lt;Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long start;</span><br><span class="line">    <span class="keyword">private</span> Long end;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Long</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">10000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ForkJoinDemo</span><span class="params">(Long start, Long end)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.start = start;</span><br><span class="line">        <span class="built_in">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Long <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (end - start &lt; temp) &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">Long</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++) &#123;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">middle</span> <span class="operator">=</span> (start + end) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">ForkJoinDemo</span> <span class="variable">task1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinDemo</span>(start, middle);</span><br><span class="line">            task1.fork();   <span class="comment">//拆分任务，把任务压入线程队列</span></span><br><span class="line">            <span class="type">ForkJoinDemo</span> <span class="variable">task2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinDemo</span>(middle + <span class="number">1</span>, end);</span><br><span class="line">            task2.fork();</span><br><span class="line">            <span class="keyword">return</span> task1.join() + task2.join();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="异步回调">异步回调</h2>
<blockquote>
<p>Future 设计初衷，对将来某个事件</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异步调用：CompletableFuture</span></span><br><span class="line"><span class="comment"> * 异步执行</span></span><br><span class="line"><span class="comment"> * 成功回调</span></span><br><span class="line"><span class="comment"> * 失败回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 没有返回值的 runAsync 异步回调</span></span><br><span class="line">        <span class="comment">// CompletableFuture&lt;Void&gt; completableFuture = CompletableFuture.runAsync(() -&gt; &#123;</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//     try &#123;</span></span><br><span class="line">        <span class="comment">//         TimeUnit.SECONDS.sleep(2);</span></span><br><span class="line">        <span class="comment">//     &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line">        <span class="comment">//         e.printStackTrace();</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">//     System.out.println(Thread.currentThread().getName() + &quot; runAsync=&gt;Void&quot;);</span></span><br><span class="line">        <span class="comment">// &#125;);</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System.out.println(&quot;abc&quot;);</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// completableFuture.get();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 有返回值的supplyAsync 异步回调</span></span><br><span class="line">        CompletableFuture&lt;Integer&gt; completableFuture1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; supplyAsync=&gt;Integer&quot;</span>);</span><br><span class="line">            <span class="type">int</span> i=<span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1024</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(completableFuture1.whenComplete((t, u) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;t=&gt;&quot;</span> + t);<span class="comment">// 正常的返回值</span></span><br><span class="line">            System.out.println(<span class="string">&quot;u=&gt;&quot;</span> + u);<span class="comment">// 错误的信息：java.util.concurrent.CompletionException: java.lang.ArithmeticException: / by zero</span></span><br><span class="line">        &#125;).exceptionally((e) -&gt; &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">233</span>;</span><br><span class="line">        &#125;).get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="jmm">JMM</h2>
<blockquote>
<p>请你谈谈对 Volatile 的理解</p>
</blockquote>
<p>Volatile 是 java 虚拟机提供的<strong>轻量级同步机制</strong></p>
<ol type="1">
<li>保证可见性</li>
<li>不保证原子性</li>
<li>禁止指令重排</li>
</ol>
<blockquote>
<p>什么是JMM</p>
</blockquote>
<p>JMM：java内存模型，不存在的东西，概念！约定！</p>
<p><strong>关于JMM的一些同步约定：</strong></p>
<ol type="1">
<li>线程解锁前，必须把共享变量<strong>立即</strong>刷回主存。</li>
<li>线程加锁前，必须读取主存中的最新值到工作内存中！</li>
<li>加锁和解锁是统一把锁</li>
</ol>
<p>线程：<strong>工作内存</strong>，<strong>主存</strong></p>
<p>内存交互操作有8种，虚拟机实现必须保证每一个操作都是原子的，不可在分的（对于double和long类型的变量来说，load、store、read和write操作在某些平台上允许例外）</p>
<ul>
<li><ul>
<li>lock （锁定）：作用于主内存的变量，把一个变量标识为线程独占状态</li>
<li>unlock
（解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定</li>
<li>read
（读取）：作用于主内存变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用</li>
<li>load
（载入）：作用于工作内存的变量，它把read操作从主存中变量放入工作内存中</li>
<li>use
（使用）：作用于工作内存中的变量，它把工作内存中的变量传输给执行引擎，每当虚拟机遇到一个需要使用到变量的值，就会使用到这个指令</li>
<li>assign
（赋值）：作用于工作内存中的变量，它把一个从执行引擎中接受到的值放入工作内存的变量副本中</li>
<li>store
（存储）：作用于主内存中的变量，它把一个从工作内存中一个变量的值传送到主内存中，以便后续的write使用</li>
<li>write
　（写入）：作用于主内存中的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中</li>
</ul></li>
</ul>
<p>JMM对这八种指令的使用，制定了如下规则：</p>
<ul>
<li><ul>
<li>不允许read和load、store和write操作之一单独出现。即使用了read必须load，使用了store必须write</li>
<li>不允许线程丢弃他最近的assign操作，即工作变量的数据改变了之后，必须告知主存</li>
<li>不允许一个线程将没有assign的数据从工作内存同步回主内存</li>
<li>一个新的变量必须在主内存中诞生，不允许工作内存直接使用一个未被初始化的变量。就是怼变量实施use、store操作之前，必须经过assign和load操作</li>
<li>一个变量同一时间只有一个线程能对其进行lock。多次lock后，必须执行相同次数的unlock才能解锁</li>
<li>如果对一个变量进行lock操作，会清空所有工作内存中此变量的值，在执行引擎使用这个变量前，必须重新load或assign操作初始化变量的值</li>
<li>如果一个变量没有被lock，就不能对其进行unlock操作。也不能unlock一个被其他线程锁住的变量</li>
<li>对一个变量进行unlock操作之前，必须把此变量同步回主内存</li>
</ul></li>
</ul>
<p>　　JMM对这八种操作规则和对<a
href="https://www.cnblogs.com/null-qige/p/8569131.html">volatile的一些特殊规则</a>就能确定哪里操作是线程安全，哪些操作是线程不安全的了。但是这些规则实在复杂，很难在实践中直接分析。所以一般我们也不会通过上述规则进行分析。更多的时候，使用java的happen-before规则来进行分析。</p>
<h2 id="volatile">Volatile</h2>
<blockquote>
<p>1、保证可见性</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JMMDemo</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不加 volatile 程序进入死循环</span></span><br><span class="line"><span class="comment">     * 加 volatile 可以保证可见性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        num = <span class="number">1</span>;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2、不保证原子性</p>
</blockquote>
<p>原子性：不可分割</p>
<p>线程在执行时，不能被打扰，要么成功，要么失败。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JMMDemo2</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * volatile 不保证原子性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 理论结果为 20000</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;</span><br><span class="line">                    add();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (Thread.activeCount()&gt;<span class="number">2</span>)&#123;</span><br><span class="line">            Thread.<span class="keyword">yield</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot; &quot;</span>+num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>不加 Lock 和 synchronized ，怎样保证原子性</strong></p>
<p>使用原子类，解决原子性问题</p>
<blockquote>
<p>原子类</p>
</blockquote>
<p>java.util.concurrent.atomic</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JMMDemo2</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * volatile 不保证原子性</span></span><br><span class="line"><span class="comment">     * AtomicInteger 原子类的 Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> AtomicInteger num=<span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// num++; // 不是原子性操作</span></span><br><span class="line">        num.getAndIncrement(); <span class="comment">// AtomicInteger + 1 方法 CAS</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 理论结果为 20000</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;</span><br><span class="line">                    add();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (Thread.activeCount()&gt;<span class="number">2</span>)&#123;</span><br><span class="line">            Thread.<span class="keyword">yield</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot; &quot;</span>+num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这些类的底层都直接与操作系统挂钩！在内存中修改！Unsafe类是一个很特殊的存在</p>
<blockquote>
<p>3、指令重排</p>
</blockquote>
<p>什么是
指令重排：<strong>计算机并不是按你写的那样去执行的</strong></p>
<p>源代码 ---&gt; 编译器优化重排 ---&gt; 指令并行也可能重排 ---&gt;
内存系统也会重排 ---&gt; 执行</p>
<p>处理机在进行指令重排时，考虑：数据之间的依赖性！</p>
<p><strong>Volatile可以避免指令重排：</strong></p>
<p>内存屏障，CPU指令，作用：</p>
<p>1、保证特定操作的执行顺序！</p>
<p>2、可以保证某些变量内存可见性！（利用这些特性 Volatile
实现了可见性）</p>
<p>因为内容太多了，所以将其拆分为以下内容</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/fba0a19b.html">JUC并发编程(一)</a></li>
<li><a
href="https://wnhyang.github.io/article/54913af9.html">JUC并发编程(二)</a></li>
<li><a
href="https://wnhyang.github.io/article/2a621ad2.html">JUC并发编程(三)</a></li>
<li><a
href="https://wnhyang.github.io/article/d021f5dd.html">JUC并发编程(四)（当前）</a></li>
<li><a
href="https://wnhyang.github.io/article/d68aa2a0.html">JUC并发编程(五)</a></li>
</ul>
]]></content>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Web 大作业（在线新闻发布系统）总结</title>
    <url>/article/54805cfd.html</url>
    <content><![CDATA[<p>终于有机会写这篇文章了，写博客这东西还真不能拖啊，当时很有激情，很清楚自己要写一些什么，重点强调些什么，拖到现在，都不知道该怎么写了。</p>
<h1 id="项目介绍">项目介绍</h1>
<p>首先这个项目是作为这学期的Java
Web大作业的，我们小组共三个人，我主要负责前台功能及界面，我们的选题是“在线新闻发布系统”。前台需要实现，新闻浏览，新闻筛选（按类型或关键字），登录后用户可以新闻增删改，新闻评论，问题反馈，信息密码修改等；后台实现新闻、用户、评论、反馈的增删改，还有新闻审核功能，我们有个特色是控制首页推送的新闻，也就是说首页并不是展示最近添加的新闻，而是我们所控制的，就像一些大网站是靠某些数据计算判断这些内容是否推送到首页一样，控制首页的轮播图，很有趣！当然我也只是介绍我的这部分，至于其他部分由我们小组其他成员完成，我不会去介绍这部分。</p>
<span id="more"></span>
<h1 id="展示">展示</h1>
<p>展示的主要有某一类的新闻，具体内容，评论区，个人主页，个人资料，反馈页。。。</p>
<figure>
<img data-src="https://img.imgdb.cn/item/600254c33ffa7d37b3b653b6.gif"
alt="展示" />
<figcaption aria-hidden="true">展示</figcaption>
</figure>
<h1 id="环境工具">环境/工具</h1>
<ul>
<li>构建工具：Maven3.6.3</li>
<li>数据库：MySQL5.5</li>
<li>基础环境：SSM，Spring5.0.6、Mybatis3.5.3</li>
<li>前台设计：<a href="https://www.layui.com/">layui</a></li>
<li>富文本编辑器：<a href="https://ckeditor.com/">CKEditor</a></li>
<li>图标来源：<a
href="https://www.iconfont.cn/">阿里巴巴矢量图标库</a></li>
<li>工具：IDEA、Tomcat9.0、Navicat Premium15、Chrome、Edge</li>
</ul>
<h1 id="项目结构">项目结构</h1>
<figure>
<img data-src="https://img.imgdb.cn/item/600258593ffa7d37b3b913f8.jpg"
alt="项目结构" />
<figcaption aria-hidden="true">项目结构</figcaption>
</figure>
<p>从图中已经可以看出整个项目是怎样的了，还是比较清晰的。</p>
<h1 id="关键部分">关键部分</h1>
<p>因为项目之前我也见拆成许多部分了（链接会放在文末），所以我只会提一些关键的或是很有趣的部分。</p>
<ul>
<li>JSTL与EL的使用</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br></pre></td></tr></table></figure>
<p>本项目很多数据展示都是靠JSTL与EL实现的，c标签下的if、forEach、choose、when等也是经常使用，个人感受还是挺方便的，虽然并不符合一些开发标准。</p>
<ul>
<li>首页div跳转</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/Static/js/lib/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> cPage = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> uid = <span class="string">&#x27;$&#123;sessionScope.userS.userId&#125;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#index&quot;</span>).<span class="title function_">trigger</span>(<span class="string">&quot;click&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#search&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> key = $(<span class="string">&quot;#key&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">main</span>(<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/queryNewsByKey?key=&quot;</span> + key + <span class="string">&quot;&amp;cPage=&quot;</span> + cPage);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#key&#x27;</span>).<span class="title function_">bind</span>(<span class="string">&#x27;keypress&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (event.<span class="property">keyCode</span> === <span class="number">13</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&quot;#search&quot;</span>).<span class="title function_">click</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">byCid</span>(<span class="params">cid</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">main</span>(<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/queryNewsByCId?cid=&quot;</span> + cid + <span class="string">&quot;&amp;cPage=&quot;</span> + cPage);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">toEdit</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> myForm = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;form&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        myForm.<span class="property">method</span> = <span class="string">&quot;post&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        myForm.<span class="property">target</span> = <span class="string">&quot;_blank&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        myForm.<span class="property">action</span> = <span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/toEdit&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> myInput = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;input&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        myInput.<span class="title function_">setAttribute</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;uid&quot;</span>); <span class="comment">// 为input对象设置name</span></span></span><br><span class="line"><span class="language-javascript">        myInput.<span class="title function_">setAttribute</span>(<span class="string">&quot;value&quot;</span>, uid); <span class="comment">// 为input对象设置value</span></span></span><br><span class="line"><span class="language-javascript">        myForm.<span class="title function_">appendChild</span>(myInput);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(myForm);</span></span><br><span class="line"><span class="language-javascript">        myForm.<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(myForm); <span class="comment">// 提交后移除创建的form</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params">href</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#main&quot;</span>).<span class="title function_">html</span>(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#main&quot;</span>).<span class="title function_">load</span>(href);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里用的还是挺有意思的，将需要的内容放入名为“main”的div中，实现头部尾部不变，只有中间部分变化。还有那个toEdit()方法写文章按钮，将a标签get变为form的post实现，增强了安全性，同时可以将对应的Controller方法改为只接受post请求，这样就保障了未登录用户的写文章和登录用户编辑他人文章。</p>
<ul>
<li>处理JSON数据</li>
</ul>
<p>除了正常拼接成html元素外，往往需要增加到页面或从页面删除</p>
<p>比如下面的评论删除实现，cid是comment_id是评论的唯一标识符，将评论的id设置为“div_cid”，因为每条评论cid不同，所以存在不同id的div，这时我们删除评论，关键代码就是<code>$("#div_" + cid).remove();</code>，这样的操作方便且简单。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">delComment</span>(<span class="params">cid</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="title function_">confirm</span>(<span class="string">&quot;确定要删除吗？&quot;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">url</span>: <span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/deleteComment&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//注意序列化的值一定要放在最前面,并且不需要头部变量,不然获取的值得格式会有问题</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">data</span>: &#123;<span class="attr">cid</span>: cid&#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span> (data.<span class="property">result</span> === <span class="string">&#x27;success&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#div_&quot;</span> + cid).<span class="title function_">remove</span>();</span></span><br><span class="line"><span class="language-javascript">                        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="title function_">alert</span>(<span class="string">&quot;评论删除失败&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>评论删除也类同，JSON数据处理成html能识别的s，然后<code>$("#newComment").prepend(s);</code>，这要注意是使用.prepend在元素前，还是append在元素后。</p>
<ul>
<li>后端代码</li>
</ul>
<h2 id="dao层">DAO层</h2>
<p>后端并没有用到什么特牛逼的技术，让我用我也不会啊。所以后端很朴素简单，主要过程是，写Mapper中的sql语句，这些都是原子操作，无非就是些增删改，下面是分页查询某类新闻</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from news where category_id=#&#123;cid&#125; and state=1 and news_id&lt;=(select news_id from news where category_id=#&#123;cid&#125; and state=1 order by news_id desc limit $&#123;cPage&#125;,1)order by news_id desc limit 10&quot;)</span></span><br><span class="line"><span class="meta">@ResultMap(&quot;News&quot;)</span></span><br><span class="line">List&lt;News&gt; <span class="title function_">QueryNewsByCId</span><span class="params">(<span class="meta">@Param(&quot;cid&quot;)</span> <span class="type">long</span> cid, <span class="meta">@Param(&quot;cPage&quot;)</span> <span class="type">int</span> cPage)</span>;</span><br></pre></td></tr></table></figure>
<h2 id="service层">Service层</h2>
<p>前面说了DAO是原子操作，Service层则是将DAO层的操作组合形成我们真正需要的操作。举个例子：DAO已经实现了，查询用户是否存在和用户创建操作，现在我需要创建一个新用户，这时我需要的是先查询这个用户是否存在，若存在则提示已存在，若不存在则创建。就是这样的道理，Service是DAO的组合，形成有逻辑的操作。下面是删除某条新闻，连带着删除这条新闻的评论和图片。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">DeleteNews</span><span class="params">(<span class="type">long</span> nid)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.frontMapper.DeleteNews(nid) + <span class="built_in">this</span>.frontMapper.DeleteCommentN(nid) + <span class="built_in">this</span>.frontMapper.DeletePic(nid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="controller层">Controller层</h2>
<p>简单的说就是Servlet，只不过有了框架的加持使我们编程更加容易且方便，Controller就是除了ModelAndView离用户最近的了，这时要处理用户的Request，并Response，调用关系就是，通过前端交互交由Controller处理，Controller调用Service，Service调用Dao，Dao完成数据库操作。下面是利用layui上传用户头像示例，图片命名方式是用户id_icon.xxx，这样可保证用户头像唯一性，同时设置了上传限制为1M。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    layui.<span class="title function_">use</span>(<span class="string">&#x27;upload&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> $ = layui.<span class="property">jquery</span></span></span><br><span class="line"><span class="language-javascript">            , upload = layui.<span class="property">upload</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//普通图片上传</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> uploadInst = upload.<span class="title function_">render</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">elem</span>: <span class="string">&#x27;#test1&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            , <span class="attr">url</span>: <span class="string">&#x27;/NEWS_war_exploded/uploadUserIcon/&#x27;</span> <span class="comment">//改成您自己的上传接口</span></span></span><br><span class="line"><span class="language-javascript">            ,<span class="attr">accept</span>:<span class="string">&#x27;images&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            ,<span class="attr">size</span>:<span class="number">1024</span></span></span><br><span class="line"><span class="language-javascript">            , <span class="attr">before</span>: <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//预读本地文件示例，不支持ie8</span></span></span><br><span class="line"><span class="language-javascript">                obj.<span class="title function_">preview</span>(<span class="keyword">function</span> (<span class="params">index, file, result</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    $(<span class="string">&#x27;#demo1&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, result); <span class="comment">//图片链接（base64）</span></span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            , <span class="attr">done</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//如果上传失败</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (res.<span class="property">code</span> &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> layer.<span class="title function_">msg</span>(<span class="string">&#x27;上传失败&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//上传成功</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> demoText = $(<span class="string">&#x27;#demoText&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                demoText.<span class="title function_">html</span>(<span class="string">&#x27;&lt;span style=&quot;color: #4cae4c;&quot;&gt;上传成功&lt;/span&gt;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> fileupload = $(<span class="string">&quot;.image&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                fileupload.<span class="title function_">attr</span>(<span class="string">&quot;value&quot;</span>,res.<span class="property">data</span>.<span class="property">src</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(fileupload.<span class="title function_">attr</span>(<span class="string">&quot;value&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&quot;#userIcon&quot;</span>).<span class="title function_">val</span>(res.<span class="property">data</span>.<span class="property">src</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            , <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//演示失败状态，并实现重传</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> demoText = $(<span class="string">&#x27;#demoText&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                demoText.<span class="title function_">html</span>(<span class="string">&#x27;&lt;span style=&quot;color: #FF5722;&quot;&gt;上传失败&lt;/span&gt; &lt;a class=&quot;layui-btn layui-btn-xs demo-reload&quot;&gt;重试&lt;/a&gt;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                demoText.<span class="title function_">find</span>(<span class="string">&#x27;.demo-reload&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    uploadInst.<span class="title function_">upload</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;uploadUserIcon&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Map <span class="title function_">upload</span><span class="params">(MultipartFile file, HttpSession session)</span>&#123;</span><br><span class="line"></span><br><span class="line">    Users users= (Users) session.getAttribute(<span class="string">&quot;userS&quot;</span>);</span><br><span class="line">    String prefix=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    String myFileName=users.getUserId()+<span class="string">&quot;_icon&quot;</span>;</span><br><span class="line">    <span class="comment">//保存上传</span></span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    InputStream fileInput=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(file!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">originalName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">            prefix=originalName.substring(originalName.lastIndexOf(<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">filepath</span> <span class="operator">=</span> session.getServletContext().getRealPath(<span class="string">&quot;/Static/img&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> filepath +<span class="string">&quot;\\&quot;</span>+myFileName+<span class="string">&quot;.&quot;</span> + prefix;</span><br><span class="line"></span><br><span class="line">            File files=<span class="keyword">new</span> <span class="title class_">File</span>(fileName);</span><br><span class="line">            <span class="comment">//打印查看上传路径</span></span><br><span class="line">            System.out.println(filepath);</span><br><span class="line">            <span class="keyword">if</span>(!files.getParentFile().exists())&#123;</span><br><span class="line">                files.getParentFile().mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line">            file.transferTo(files);</span><br><span class="line">            Map&lt;String,Object&gt; map2=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            Map&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;code&quot;</span>,<span class="number">0</span>);</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;data&quot;</span>,map2);</span><br><span class="line">            map2.put(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;/Static/img/&quot;</span>+myFileName+<span class="string">&quot;.&quot;</span> + prefix);</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(out!=<span class="literal">null</span>)&#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fileInput!=<span class="literal">null</span>)&#123;</span><br><span class="line">                fileInput.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;code&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结">总结</h1>
<p>说实话开发过程遇到很多问题，小组内还出现过矛盾，不过一切都过去了，结局还是很不错的，所有失败和教训都是最宝贵的财富，它会帮助我走好接下的每一步。</p>
<h2 id="问题与展望">问题与展望</h2>
<p>项目到最终提交的时候还不是我满意的样子，我知道的就存在一些问题，比如：权限安全方面并没有做好，应该设置一个拦截器，拦截未登录用户所有增删改操作，在我们这个系统中是支持游客访问的，不过只能查看新闻，其他什么也不能操作，不过最终这个也是没有完全实现，是个遗憾；还有就是对于数据库方面有很大的遗憾，因为对于Mybatis和MySQL理解并不到位，导致数据库设计的很糟糕，对之后的造成了很大影响；还有前端设计实在是搞不来，基本上都是东拼西凑，最后导致一些js矛盾，或是极其复杂，可读性极差。这些都是已经存在的问题。</p>
<p>说一说展望吧，前台功能太少了，记得当时我们提交的选题报告中的功能还有新闻收藏、点赞、转发，用户等级系统，用户关注等。最后都没有实现，当时可能没有什么想法，不知道怎么做，但到现在，怎么做我已经有那个框架了，如果有机会真的可以打这些功能加上去。</p>
<h2 id="合作开发重要性">合作开发重要性</h2>
<p>这学期还有一门课“软件工程”，虽然这门课有些水，但还是有些收获的。</p>
<p>合作开发，需求分析太重要了，一定要统一的开发环境，什么MySQL版本统一了，JDK统一，Spring统一等等太重要了，不然的话就会遇到许许多多的问题。</p>
<p>代码规范也是非常重要的，命名、类、接口等这是系统能不能走的远的评判标准。如果设计得当那么接下来的开发会很顺利，包括之后的维护升级等；如果设计不当那么接下来就像从头开始一样麻烦。</p>
<h2 id="结束">结束</h2>
<p>这篇文章干货不多，将整个项目介绍完也不太现实，源码全摆上去也没太大意义。所以这里主要说的是这次项目的感受与总结。</p>
<h1 id="相关链接">相关链接</h1>
<p><a
href="https://wnhyang.github.io/article/f5984dab.html">maven与npm使用镜像</a></p>
<p><a href="https://wnhyang.github.io/article/48213f39.html">Java Web
大作业（在线新闻发布系统）数据库设计</a></p>
<p><a
href="https://wnhyang.github.io/article/254393f0.html">SSM整合</a></p>
<p><a
href="https://wnhyang.github.io/article/f2ba51cc.html">富文本编辑器CKEditor配置与使用</a></p>
<p><a
href="https://wnhyang.github.io/article/933adcc2.html">AJAX与JSON初次使用</a></p>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
        <tag>MySQL</tag>
        <tag>Spring Framework</tag>
        <tag>Mybatis/Mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaI/O</title>
    <url>/article/c0837e9c.html</url>
    <content><![CDATA[<p>说不上技术分享，只能算是学习记录</p>
<span id="more"></span>
<h1 id="io">I/O</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.io.*</span><br></pre></td></tr></table></figure>
<h2 id="file">File</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//file:文件\目录\不存在的文件或目录</span></span><br><span class="line"><span class="comment">//        File file = new File(&quot;d:/abc.txt&quot;);</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;相对路径：&quot;</span>+file.getPath() );</span><br><span class="line">        System.out.println(<span class="string">&quot;绝对路径：&quot;</span>+file.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件名称：&quot;</span>+file.getName() );</span><br><span class="line">        System.out.println(<span class="string">&quot;文件大小：&quot;</span>+file.length() );<span class="comment">//单位字节</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(      file.isFile()==<span class="literal">true</span>? <span class="string">&quot;文件&quot;</span>:<span class="string">&quot;非文件&quot;</span> );</span><br><span class="line">        System.out.println(      file.isDirectory()==<span class="literal">true</span>? <span class="string">&quot;目录&quot;</span>:<span class="string">&quot;非目录&quot;</span> );</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> file.exists();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(flag) &#123;</span><br><span class="line"><span class="comment">//                file.delete();</span></span><br><span class="line">                <span class="comment">//彻底删除（不过回收站）</span></span><br><span class="line">                System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                file.createNewFile();</span><br><span class="line">                System.out.println(<span class="string">&quot;创建成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>相对路径/绝对路径：</p>
<pre><code>- 如果FIle（&quot;绝对路径&quot;）：getPath() 和getAbsolutePath()的结果一致，打印的都是绝对路径
- 如果FIle（&quot;相对路径&quot;）：getPath() 打印相对路径;getAbsolutePath（）打印绝对路径</code></pre>
<h2 id="流">流</h2>
<p>流：是一种FIFO的数据结构</p>
<blockquote>
<p>说明：1.字节流就是 将内容转为了字节形式进行传输， 1 字节 -&gt;8二进制
，二进制可以传输任何类型的数据，因此字节流也可以传输任何类型的数据。</p>
<p>2.字节流是8位通用字节流( 1 字节 -&gt;8二进制 )
（字节流可以处理任何类型，处理文本文件以外的其他文件）
;字符流是16位的unicode字符流 （只用于处理字符，处理文本文件）</p>
<p>3.在while循环中 分批次传输时，字节流使用的缓冲区是
byte[],字符流使用的缓冲区是 char[]</p>
</blockquote>
<figure>
<img data-src="https://www.runoob.com/wp-content/uploads/2013/12/iostream2xx.png"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<h3 id="输入">输入</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputStreamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in =   <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/abc.txt&quot;</span>));</span><br><span class="line"><span class="comment">//            InputStream in = new FileInputStream(&quot;d://abc.txt&quot;);</span></span><br><span class="line">            System.out.println(in.available());<span class="comment">//file.length()</span></span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[in.available()] ;</span><br><span class="line">            in.read(buf);<span class="comment">//将文件abc.txt内容读取到buf中</span></span><br><span class="line">            <span class="comment">//buf :byte[] -&gt;String</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buf));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                in.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="输出">输出</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutputStreamDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             out = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;d:/xyz.txt&quot;</span>) ;</span><br><span class="line">             out.write(<span class="string">&quot;helloworld123&quot;</span>.getBytes()); <span class="comment">//内存-&gt;xyz.txt</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="文件复制">文件复制</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileCopy</span> &#123;</span><br><span class="line">    <span class="comment">//abc.txt-&gt;内存-&gt;xyz.txt</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//abc.txt-&gt;内存</span></span><br><span class="line">             in = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d:/abc.txt&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">             out = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;d:/xyz.txt&quot;</span>) ;</span><br><span class="line">            <span class="comment">//开辟10字节的内存</span></span><br><span class="line">            <span class="type">byte</span> []buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>] ;</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> -<span class="number">1</span> ;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>((len= in.read(buf)) != -<span class="number">1</span>)&#123;<span class="comment">//in -&gt;buf</span></span><br><span class="line">            	out.write(buf,<span class="number">0</span>,len);<span class="comment">//buf-&gt;out</span></span><br><span class="line">        	&#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(out !=<span class="literal">null</span>)out.close();</span><br><span class="line">                <span class="keyword">if</span>(in !=<span class="literal">null</span>) in.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用字符流进行文件的复制">使用字符流进行文件的复制</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileCopyCharactor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//文件-&gt;内存（Reader）</span></span><br><span class="line">        <span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="type">Writer</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;d:/个人介绍.txt&quot;</span>);</span><br><span class="line">             writer = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;d:/个人完整介绍.txt&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">            <span class="type">char</span>[] buf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">4</span>];</span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>() ;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> -<span class="number">1</span> ;</span><br><span class="line">            <span class="keyword">while</span>((len =reader.read(  buf)) != -<span class="number">1</span> )&#123;</span><br><span class="line">                <span class="comment">// str += buf ;</span></span><br><span class="line">                sb.append(buf,<span class="number">0</span>,len) ;<span class="comment">//将每次读取到的 4个字符 拼接起来</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(sb);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//在内存中 替换占位符</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> sb.toString() ;</span><br><span class="line">            content= content.replace(<span class="string">&quot;&#123;name&#125;&quot;</span>,<span class="string">&quot;颜群&quot;</span>)</span><br><span class="line">                    .replace(<span class="string">&quot;&#123;enterprise&#125;&quot;</span>,<span class="string">&quot;蓝桥学院&quot;</span>)</span><br><span class="line">                    .replace(<span class="string">&quot;&#123;weixin&#125;&quot;</span>,<span class="string">&quot;157468995&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将替换后的内容 输出到文件   ，内存 -&gt;文件（Writer）</span></span><br><span class="line">            writer.write(content);</span><br><span class="line">            System.out.println(<span class="string">&quot;成功...&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            writer.flush(); 将管道中的数据 刷出到 文件中</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span>(writer!=<span class="literal">null</span>) writer.close();</span><br><span class="line">                <span class="keyword">if</span>(reader!=<span class="literal">null</span>) reader.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自带缓冲区的字符流">自带缓冲区的字符流</h3>
<p>缓冲区大小，一行</p>
<p>BufferedReader /BufferedWriter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileCopyCharactorBuffered</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//文件-&gt;内存（Reader）</span></span><br><span class="line">        <span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="type">Writer</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;d:/个人介绍.txt&quot;</span>);</span><br><span class="line">             writer = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;d:/个人完整介绍2.txt&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">             br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>( reader) ;</span><br><span class="line">             bw = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>( writer);</span><br><span class="line"></span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>() ;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>( (line= br.readLine()) != <span class="literal">null</span>   )&#123;</span><br><span class="line">                sb.append(line) ;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(sb);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//在内存中 替换占位符</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> sb.toString() ;</span><br><span class="line">            content= content.replace(<span class="string">&quot;&#123;name&#125;&quot;</span>,<span class="string">&quot;颜群&quot;</span>)</span><br><span class="line">                    .replace(<span class="string">&quot;&#123;enterprise&#125;&quot;</span>,<span class="string">&quot;蓝桥学院&quot;</span>)</span><br><span class="line">                    .replace(<span class="string">&quot;&#123;weixin&#125;&quot;</span>,<span class="string">&quot;157468995&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将替换后的内容 输出到文件   ，内存 -&gt;文件（Writer）</span></span><br><span class="line"></span><br><span class="line">            bw.write(content);</span><br><span class="line">            System.out.println(<span class="string">&quot;成功...&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            writer.flush(); 将管道中的数据 刷出到 文件中</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            *    1先关出，再关入</span></span><br><span class="line"><span class="comment">            *    2从外往内关  br外 = new BufferedReader( reader内) ;</span></span><br><span class="line"><span class="comment">            * */</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span>(bw != <span class="literal">null</span>) bw.close();</span><br><span class="line">              <span class="keyword">if</span>(br!=<span class="literal">null</span> )  br.close();</span><br><span class="line">               <span class="keyword">if</span>(writer!=<span class="literal">null</span>) writer.close();</span><br><span class="line">                <span class="keyword">if</span>(reader!=<span class="literal">null</span>) reader.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>带缓冲区的字符流 对象 = new 带缓冲区的字符流(字符流) ；</p>
<h3 id="二进制流">二进制流</h3>
<p>DataInputStream/DataOutputStream</p>
<p>二进制流 对象 = new 二进制流(字节流) ；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">//二进制流</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileCopyData</span> &#123;</span><br><span class="line">    <span class="comment">//abc.txt-&gt;内存-&gt;xyz.txt</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">dataInput</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">dataOutput</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//abc.txt-&gt;内存</span></span><br><span class="line">             in = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d:/IMG_6285.JPG&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">              dataInput = <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(in) ;<span class="comment">//字节流-&gt;二进制流</span></span><br><span class="line"></span><br><span class="line">             out = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;e:/颜群微信3.jpg&quot;</span>) ;</span><br><span class="line">              dataOutput = <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(out );<span class="comment">//字节流-&gt;二进制流</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//开辟10字节的内存</span></span><br><span class="line">            <span class="type">byte</span> []buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>] ;</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> -<span class="number">1</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(   (len= dataInput.read(buf)) != -<span class="number">1</span>)&#123;<span class="comment">//in -&gt;buf</span></span><br><span class="line">            dataOutput.write(buf,<span class="number">0</span>,len);<span class="comment">//buf-&gt;out</span></span><br><span class="line">        &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(dataOutput !=<span class="literal">null</span>) dataOutput.close();</span><br><span class="line">                <span class="keyword">if</span>(dataInput !=<span class="literal">null</span>) dataInput.close();</span><br><span class="line">                <span class="keyword">if</span>(out !=<span class="literal">null</span>)out.close();</span><br><span class="line">                <span class="keyword">if</span>(in !=<span class="literal">null</span>) in.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="装饰模式io设计的核心思想">装饰模式：IO设计的核心思想</h2>
<p>在不影响原有对象的前提下，无侵入的给一个对象增一些额外的功能。</p>
<p>new InputStreamReader( new FileInputStream(new File("d:/abc.txt")) )
;</p>
<h2 id="参考">参考</h2>
<p><a
href="https://www.bilibili.com/video/BV114411W7id?p=56">https://www.bilibili.com/video/BV114411W7id?p=56</a></p>
<h1 id="总结">总结</h1>
<p>I/O基础还是很重要的。</p>
]]></content>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaGUI编程</title>
    <url>/article/93011f6b.html</url>
    <content><![CDATA[<p>虽说java在做pc应用并不是很有市场，我那时学的也是VS下用WPF做的，有了WPF那些基础，之后的Android也更容易入手，还是有些帮助的。</p>
<span id="more"></span>
<h1 id="gui编程">GUI编程</h1>
<h2 id="组件和容器">组件和容器</h2>
<h3 id="frame">Frame</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFrame2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyFrame</span> <span class="variable">myFrame1</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">MyFrame</span>(<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>,Color.blue);</span><br><span class="line">        <span class="type">MyFrame</span> <span class="variable">myFrame2</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">MyFrame</span>(<span class="number">200</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>,Color.yellow);</span><br><span class="line">        <span class="type">MyFrame</span> <span class="variable">myFrame3</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">MyFrame</span>(<span class="number">300</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>,Color.red);</span><br><span class="line">        <span class="type">MyFrame</span> <span class="variable">myFrame4</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">MyFrame</span>(<span class="number">400</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>,Color.gray);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span> <span class="keyword">extends</span> <span class="title class_">Frame</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyFrame</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> w, <span class="type">int</span> h, Color color)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;MyFrame&quot;</span>+(++id));</span><br><span class="line">        setBackground(color);</span><br><span class="line">        setBounds(x,y,w,h);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="panel">Panel</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPanel</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>();</span><br><span class="line">        Panel panel=<span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line"></span><br><span class="line">        frame.setLayout(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        frame.setBounds(<span class="number">300</span>,<span class="number">300</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        frame.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">40</span>,<span class="number">160</span>,<span class="number">50</span>));</span><br><span class="line"></span><br><span class="line">        panel.setBounds(<span class="number">50</span>,<span class="number">50</span>,<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line">        panel.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">90</span>,<span class="number">20</span>,<span class="number">150</span>));</span><br><span class="line"></span><br><span class="line">        frame.add(panel);</span><br><span class="line"></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="布局管理器">布局管理器</h2>
<h3 id="流式布局">流式布局</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFlowLayout</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Button</span> <span class="variable">button1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button1&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button2&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>(FlowLayout.LEFT));</span><br><span class="line"></span><br><span class="line">        frame.setSize(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        frame.add(button1);java</span><br><span class="line">        frame.add(button2);</span><br><span class="line">        frame.add(button3);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="边界布局">边界布局</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBorderLayout</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Button</span> <span class="variable">east</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;East&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">west</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;West&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">south</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;South&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">north</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;North&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">center</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;Center&quot;</span>);</span><br><span class="line"></span><br><span class="line">        frame.add(east,BorderLayout.EAST);</span><br><span class="line">        frame.add(west,BorderLayout.WEST);</span><br><span class="line">        frame.add(south,BorderLayout.SOUTH);</span><br><span class="line">        frame.add(north,BorderLayout.NORTH);</span><br><span class="line">        frame.add(center,BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line">        frame.setSize(<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="网格布局">网格布局</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestGridLayout</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;GridLayout&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;btn2&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;btn3&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;btn4&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;btn5&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;btn6&quot;</span>);</span><br><span class="line"></span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">3</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        frame.add(btn1);</span><br><span class="line">        frame.add(btn2);</span><br><span class="line">        frame.add(btn3);</span><br><span class="line">        frame.add(btn4);</span><br><span class="line">        frame.add(btn5);</span><br><span class="line">        frame.add(btn6);</span><br><span class="line"></span><br><span class="line">        frame.pack();</span><br><span class="line"></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="事件监听">事件监听</h2>
<h3 id="单个按钮">单个按钮</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestActionEvent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>();</span><br><span class="line">        Button button=<span class="keyword">new</span> <span class="title class_">Button</span>();</span><br><span class="line">        MyActionListener myActionListener=<span class="keyword">new</span> <span class="title class_">MyActionListener</span>();</span><br><span class="line">        button.addActionListener(myActionListener);</span><br><span class="line"></span><br><span class="line">        frame.add(button,BorderLayout.CENTER);</span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        windowClosing(frame);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(Frame frame)</span>&#123;</span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyActionListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多个按钮">多个按钮</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAction2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;开始-停止&quot;</span>);</span><br><span class="line">        Button start=<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        Button stop=<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;stop&quot;</span>);</span><br><span class="line">        start.setActionCommand(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        stop.setActionCommand(<span class="string">&quot;stop&quot;</span>);</span><br><span class="line">        MyMonitor myMonitor=<span class="keyword">new</span> <span class="title class_">MyMonitor</span>();</span><br><span class="line">        start.addActionListener(myMonitor);</span><br><span class="line">        stop.addActionListener(myMonitor);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        frame.add(start,BorderLayout.NORTH);</span><br><span class="line">        frame.add(stop,BorderLayout.SOUTH);</span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyMonitor</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;点击，msg=&gt;&quot;</span>+e.getActionCommand());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="文本框">文本框</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestText0</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MyFrame2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame2</span> <span class="keyword">extends</span> <span class="title class_">Frame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyFrame2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">TextField</span> <span class="variable">textField</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>();</span><br><span class="line">        add(textField);</span><br><span class="line"></span><br><span class="line">        <span class="type">MyActionListener2</span> <span class="variable">myActionListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyActionListener2</span>();</span><br><span class="line">        textField.addActionListener(myActionListener);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置替换编码</span></span><br><span class="line">        textField.setEchoChar(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        pack();</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyActionListener2</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        <span class="type">TextField</span> <span class="variable">textField</span> <span class="operator">=</span> (TextField) e.getSource();</span><br><span class="line">        System.out.println(textField.getText());</span><br><span class="line">        textField.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="简易计算器">简易计算器</h3>
<p><strong>组合</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCalc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Calculator</span>().loadFrame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span> <span class="keyword">extends</span> <span class="title class_">Frame</span> &#123;</span><br><span class="line">    TextField num1,num2,num3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadFrame</span><span class="params">()</span>&#123;</span><br><span class="line">        num1 = <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;10&quot;</span>);</span><br><span class="line">        num2 = <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;10&quot;</span>);</span><br><span class="line">        num3 = <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;20&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">        <span class="type">Label</span> <span class="variable">label</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>(<span class="string">&quot;+&quot;</span>);</span><br><span class="line"></span><br><span class="line">        btn.addActionListener(<span class="keyword">new</span> <span class="title class_">MyCalcActionListener</span>(<span class="built_in">this</span>));</span><br><span class="line"></span><br><span class="line">        setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line">        add(num1);</span><br><span class="line">        add(label);</span><br><span class="line">        add(num2);</span><br><span class="line">        add(btn);</span><br><span class="line">        add(num3);</span><br><span class="line">        pack();</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCalcActionListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line">    Calculator calculator=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyCalcActionListener</span><span class="params">(Calculator calculator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.calculator=calculator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">       <span class="type">int</span> n1= Integer.parseInt(calculator.num1.getText());</span><br><span class="line">       <span class="type">int</span> n2= Integer.parseInt(calculator.num2.getText());</span><br><span class="line"></span><br><span class="line">       calculator.num3.setText(<span class="string">&quot;&quot;</span>+(n1+n2));</span><br><span class="line"></span><br><span class="line">       calculator.num1.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">       calculator.num2.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>内部类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCalc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Calculator</span>().loadFrame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span> <span class="keyword">extends</span> <span class="title class_">Frame</span> &#123;</span><br><span class="line">    TextField num1,num2,num3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadFrame</span><span class="params">()</span>&#123;</span><br><span class="line">        num1 = <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;10&quot;</span>);</span><br><span class="line">        num2 = <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;10&quot;</span>);</span><br><span class="line">        num3 = <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;20&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">        <span class="type">Label</span> <span class="variable">label</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>(<span class="string">&quot;+&quot;</span>);</span><br><span class="line"></span><br><span class="line">        btn.addActionListener(<span class="keyword">new</span> <span class="title class_">MyCalcActionListener</span>());</span><br><span class="line"></span><br><span class="line">        setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line">        add(num1);</span><br><span class="line">        add(label);</span><br><span class="line">        add(num2);</span><br><span class="line">        add(btn);</span><br><span class="line">        add(num3);</span><br><span class="line">        pack();</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCalcActionListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">            <span class="type">int</span> n1= Integer.parseInt(num1.getText());</span><br><span class="line">            <span class="type">int</span> n2= Integer.parseInt(num2.getText());</span><br><span class="line"></span><br><span class="line">            num3.setText(<span class="string">&quot;&quot;</span>+(n1+n2));</span><br><span class="line"></span><br><span class="line">            num1.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            num2.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="画笔paint">画笔Paint</h3>
<h3 id="鼠标监听">鼠标监听</h3>
<h3 id="窗口监听">窗口监听</h3>
<h3 id="键盘监听">键盘监听</h3>
<h2 id="swing">Swing</h2>
<h2 id="参考">参考</h2>
<p><a
href="https://www.bilibili.com/video/BV1DJ411B75F">https://www.bilibili.com/video/BV1DJ411B75F</a></p>
<h1 id="总结">总结</h1>
<p>前面很多都没去总结，我是觉得这方面了解就好，不想深入钻研。</p>
]]></content>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>Java比较器</title>
    <url>/article/4f8e0775.html</url>
    <content><![CDATA[<p>寒假计划第一步已经完成，现在开始第二步。有时候我们计划达成某个大目标是很难而且很容易放弃的，一个好的方法就是制定一个个小目标，每个尽量明确且容易达到，这样我们每完成一项都会有成就感并驱使我们继续下去，就这样不知不觉，我们就完成了所有目标。</p>
<p>最近就在开始整理java基础知识，一边搜资料看视频，一边记录整理，还是挺不错的。</p>
<p>就在整理集合框架这部分时，想写一篇博客，所以就简单说一下比较器！</p>
<span id="more"></span>
<h2 id="提要">提要</h2>
<p>在使用集合工具类进行排序时，通常都已经默认了排序方式（简单类型的排序），如果要进行对象集合的排序，就需要用到比较器。下面介绍了两种方法。</p>
<h2 id="内部比较器comparable">内部比较器（Comparable）</h2>
<p>实现Comparable接口的compareTo方法，重点是返回值-1，0，1</p>
<p><strong>实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span> &#123;</span><br><span class="line">    <span class="type">int</span> sno;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        People p=(People) o;</span><br><span class="line">        <span class="type">int</span> result=<span class="built_in">this</span>.sno&gt;p.sno? <span class="number">1</span>:(<span class="built_in">this</span>.sno==p.sno?<span class="number">0</span>:-<span class="number">1</span>);<span class="comment">//优化后Integer.compare(this.sno, p.sno);</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在用IDEA编辑<code>int result=this.sno&gt;p.sno? 1:(this.sno==p.sno?0:-1);</code>时，这片代码显示黄色，表示可以优化，优化后为<code>int result= Integer.compare(this.sno, p.sno);</code>，好奇地点开<code>Integer.compare()</code>方法，看到下面的源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (x &lt; y) ? -<span class="number">1</span> : ((x == y) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然前面还有源码注解。因为默认排列及是升序，所以如果想要升序排列就采用上面的编写方法，相反，降序位置调换一下即可。</p>
<p><strong>使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;People&gt; peopleList=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        peopleList.add(<span class="keyword">new</span> <span class="title class_">People</span>(<span class="number">1</span>,<span class="string">&quot;zy&quot;</span>,<span class="number">95</span>));</span><br><span class="line">        peopleList.add(<span class="keyword">new</span> <span class="title class_">People</span>(<span class="number">6</span>,<span class="string">&quot;ls&quot;</span>,<span class="number">86</span>));</span><br><span class="line">        peopleList.add(<span class="keyword">new</span> <span class="title class_">People</span>(<span class="number">16</span>,<span class="string">&quot;ww&quot;</span>,<span class="number">75</span>));</span><br><span class="line">        peopleList.add(<span class="keyword">new</span> <span class="title class_">People</span>(<span class="number">25</span>,<span class="string">&quot;zl&quot;</span>,<span class="number">63</span>));</span><br><span class="line">        peopleList.add(<span class="keyword">new</span> <span class="title class_">People</span>(<span class="number">3</span>,<span class="string">&quot;ao&quot;</span>,<span class="number">55</span>));</span><br><span class="line">        peopleList.add(<span class="keyword">new</span> <span class="title class_">People</span>(<span class="number">9</span>,<span class="string">&quot;xp&quot;</span>,<span class="number">13</span>));</span><br><span class="line">        </span><br><span class="line">        Collections.sort(peopleList);<span class="comment">//排序</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(peopleList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>输出</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[People&#123;sno=1, name=&#x27;zy&#x27;, score=95&#125;, People&#123;sno=3, name=&#x27;ao&#x27;, score=55&#125;, People&#123;sno=6, name=&#x27;ls&#x27;, score=86&#125;, People&#123;sno=9, name=&#x27;xp&#x27;, score=13&#125;, People&#123;sno=16, name=&#x27;ww&#x27;, score=75&#125;, People&#123;sno=25, name=&#x27;zl&#x27;, score=63&#125;]</span><br></pre></td></tr></table></figure>
<h2 id="外部比较器comparator">外部比较器（Comparator）</h2>
<p>定义外部比较器，实现Comparator接口的compare方法</p>
<p><strong>实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">        People p1= (People) o1;</span><br><span class="line">        People p2= (People) o2;</span><br><span class="line">        <span class="keyword">return</span> p1.sno-p2.sno;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>没啥可说的，升序就按上面来，当然也可按上面的来，返回-1，0，1</p>
<p><strong>使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;People&gt; peopleList=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        peopleList.add(<span class="keyword">new</span> <span class="title class_">People</span>(<span class="number">1</span>,<span class="string">&quot;zy&quot;</span>,<span class="number">95</span>));</span><br><span class="line">        peopleList.add(<span class="keyword">new</span> <span class="title class_">People</span>(<span class="number">6</span>,<span class="string">&quot;ls&quot;</span>,<span class="number">86</span>));</span><br><span class="line">        peopleList.add(<span class="keyword">new</span> <span class="title class_">People</span>(<span class="number">16</span>,<span class="string">&quot;ww&quot;</span>,<span class="number">75</span>));</span><br><span class="line">        peopleList.add(<span class="keyword">new</span> <span class="title class_">People</span>(<span class="number">25</span>,<span class="string">&quot;zl&quot;</span>,<span class="number">63</span>));</span><br><span class="line">        peopleList.add(<span class="keyword">new</span> <span class="title class_">People</span>(<span class="number">3</span>,<span class="string">&quot;ao&quot;</span>,<span class="number">55</span>));</span><br><span class="line">        peopleList.add(<span class="keyword">new</span> <span class="title class_">People</span>(<span class="number">9</span>,<span class="string">&quot;xp&quot;</span>,<span class="number">13</span>));</span><br><span class="line">        </span><br><span class="line">        Collections.sort(peopleList,<span class="keyword">new</span> <span class="title class_">MyComparator</span>());<span class="comment">//排序</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(peopleList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>输出</strong>(同上)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[People&#123;sno=1, name=&#x27;zy&#x27;, score=95&#125;, People&#123;sno=3, name=&#x27;ao&#x27;, score=55&#125;, People&#123;sno=6, name=&#x27;ls&#x27;, score=86&#125;, People&#123;sno=9, name=&#x27;xp&#x27;, score=13&#125;, People&#123;sno=16, name=&#x27;ww&#x27;, score=75&#125;, People&#123;sno=25, name=&#x27;zl&#x27;, score=63&#125;]</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p><a
href="https://www.bilibili.com/video/BV114411W7id?p=47">https://www.bilibili.com/video/BV114411W7id?p=47</a></p>
<h2 id="比较">比较</h2>
<ul>
<li>使用方法不同，目的相同（排序嘛）</li>
<li>Comparable在类的内部，与类粘连在一块，也比较容易实现</li>
<li>Comparator在类的外部，自己额外定义，实现数据与算法分离</li>
<li>我个人认为无所谓用哪个，顺手就行</li>
</ul>
]]></content>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程</title>
    <url>/article/a2c3ad19.html</url>
    <content><![CDATA[<p>说不上技术分享，只能算是学习记录</p>
<span id="more"></span>
<h2 id="创建一个线程">创建一个线程</h2>
<p>Java 提供了三种创建线程的方法：</p>
<ul>
<li>通过实现 Runnable 接口；</li>
<li>通过继承 Thread 类本身；</li>
<li>通过 Callable 和 Future 创建线程。</li>
</ul>
<h2 id="通过实现-runnable-接口来创建线程">通过实现 Runnable
接口来创建线程</h2>
<p>实现Runnable接口，重写run方法，调用start方法</p>
<p><strong>实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;t&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Thread2 t2=<span class="keyword">new</span> <span class="title class_">Thread2</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(t2).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;now&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="通过继承thread来创建线程">通过继承Thread来创建线程</h2>
<p>继承Thread类，重写run方法，调用start方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;t&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Thread1 t1=<span class="keyword">new</span> <span class="title class_">Thread1</span>();</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;now&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="通过-callable-和-future-创建线程">通过 Callable 和 Future
创建线程</h2>
<ul>
<li><ol type="1">
<li>创建 Callable 接口的实现类，并实现 call() 方法，该 call()
方法将作为线程执行体，并且有返回值。</li>
</ol></li>
<li><ol start="2" type="1">
<li>创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable
对象，该 FutureTask 对象封装了该 Callable 对象的 call()
方法的返回值。</li>
</ol></li>
<li><ol start="3" type="1">
<li>使用 FutureTask 对象作为 Thread 对象的 target
创建并启动新线程。</li>
</ol></li>
<li><ol start="4" type="1">
<li>调用 FutureTask 对象的 get()
方法来获得子线程执行结束后的返回值。</li>
</ol></li>
</ul>
<h2 id="创建线程的三种方式的对比">创建线程的三种方式的对比</h2>
<ul>
<li><ol type="1">
<li>采用实现 Runnable、Callable 接口的方式创建多线程时，线程类只是实现了
Runnable 接口或 Callable 接口，还可以继承其他类。</li>
</ol></li>
<li><ol start="2" type="1">
<li>使用继承 Thread
类的方式创建多线程时，编写简单，如果需要访问当前线程，则无需使用
Thread.currentThread() 方法，直接使用 this 即可获得当前线程。</li>
</ol></li>
</ul>
<h2 id="线程的几个主要概念">线程的几个主要概念</h2>
<p>在多线程编程时，你需要了解以下几个概念：</p>
<ul>
<li>线程同步</li>
<li>线程间通信</li>
<li>线程死锁</li>
<li>线程控制：挂起、停止和恢复</li>
</ul>
<h2 id="sleep">Sleep</h2>
<p>休眠，单位：毫秒</p>
<h2 id="yield">Yield</h2>
<p>礼让，但不一定成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestYield</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        MyYield myYield=<span class="keyword">new</span> <span class="title class_">MyYield</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(myYield,<span class="string">&quot;a&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(myYield,<span class="string">&quot;b&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyYield</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;线程开始执行&quot;</span>);</span><br><span class="line">        Thread.<span class="keyword">yield</span>();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;线程停止执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="join">Join</h2>
<p>强制执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJoin</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        TestJoin testJoin=<span class="keyword">new</span> <span class="title class_">TestJoin</span>();</span><br><span class="line">        Thread thread=<span class="keyword">new</span> <span class="title class_">Thread</span>(testJoin);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">200</span>) &#123;</span><br><span class="line">                thread.join();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;main&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;插队&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="同步">同步</h2>
<h3 id="synchronized关键字">synchronized关键字</h3>
<h3 id="lock">Lock</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TestLock2 testLock2=<span class="keyword">new</span> <span class="title class_">TestLock2</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(testLock2).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(testLock2).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(testLock2).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestLock2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ticketNum</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义Lock锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();<span class="comment">//加锁</span></span><br><span class="line">                <span class="keyword">if</span> (ticketNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(ticketNum--);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();<span class="comment">//解锁</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="线程池">线程池</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPool</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建服务，创建线程池</span></span><br><span class="line">        <span class="comment">//newFixedThreadPool 参数：线程池大小</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p><a
href="https://www.bilibili.com/video/BV1V4411p7EF">https://www.bilibili.com/video/BV1V4411p7EF</a></p>
]]></content>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>Java注解与反射</title>
    <url>/article/20d0a84c.html</url>
    <content><![CDATA[<p>说不上技术分享，只能算是学习记录</p>
<span id="more"></span>
<h1 id="注解annotation">注解（Annotation）</h1>
<h2 id="内置注解">内置注解</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span> ：可以确保 重写的方法  的确存在于父类/接口中，可以有效的避免 单词拼错等情况。</span><br><span class="line"><span class="meta">@Deprecated</span>：给用于提示，该方法由于安全、性能问题等 已经不推荐使用了。此外，在版本升级时，如果要计划删除一些方法，也通常会在前一个版本中 将该方法加上<span class="meta">@Deprecated</span>，然后再在后续版本中删除。</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(value=&quot;unchecked&quot;)</span><span class="comment">//压制警告 （虽然可以使用SuppressWarnings压制警告，但不建议使用。）//忽略对泛型等的检查操作。value值：unchecked ,deprecation(忽略一些过期的API) ，unused (是否未被使用)  ，fallthrough（swtich 是否一致往下执行，而没有break）;path(忽略 对类路径不存在的检查)  ，serialVersionUID（忽略 一个类可以序列化、但却没有序列化的 警告），all</span></span><br></pre></td></tr></table></figure>
<h2 id="自定义注解">自定义注解</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="元注解">元注解</h2>
<p>元数据：修饰数据的数据</p>
<p>元注解：修饰注解的注解， <span class="citation"
data-cites="Target">@Target</span>、<span class="citation"
data-cites="Retention">@Retention</span>、<span class="citation"
data-cites="Document">@Document</span>、<span class="citation"
data-cites="Inherited">@Inherited</span></p>
<h3 id="target限制注解-可以使用的位置"><span class="citation"
data-cites="Target">@Target</span>：限制注解 可以使用的位置</h3>
<p>限制注解
能够使用哪些元素上（属性、方法、类）；如果一个注解没有@Target描述，则该注解
可以修饰任何类型的元素； 如果有@Target修饰，该注解就只能用于
被@Target修饰的地方</p>
<p>哪些位置？ ElementType.枚举</p>
<p>自定义一个注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修饰该注解 只能在 属性、方法上使用</span></span><br><span class="line"><span class="meta">@Target(value= &#123;ElementType.FIELD   ,ElementType.METHOD&#125; )</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        用定义方法的形式，定义一个属性 value</span></span><br><span class="line"><span class="comment">        方法的名字，就是属性的名字；方法的返回值，就是属性的类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>  <span class="keyword">default</span> <span class="string">&quot;张三&quot;</span>;<span class="comment">//String value = &quot;张三&quot; ；</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">age</span><span class="params">()</span> <span class="keyword">default</span>  <span class="number">22</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMyAnnotation</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotation(value=&quot;李四&quot;,age=33)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="retention限制注解的生命周期"><span class="citation"
data-cites="Retention:限制注解的生命周期">@Retention:限制注解的生命周期</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">RetentionPolicy</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be discarded by the compiler.</span></span><br><span class="line"><span class="comment">       jvm直接将该注解丢弃 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SOURCE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be recorded in the class file by the compiler</span></span><br><span class="line"><span class="comment">     * but need not be retained by the VM at run time.  This is the default</span></span><br><span class="line"><span class="comment">     * behavior.</span></span><br><span class="line"><span class="comment">       .java -&gt; .class</span></span><br><span class="line"><span class="comment">       程序在编译时 会使用注解，在运行时不会使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CLASS,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be recorded in the class file by the compiler and</span></span><br><span class="line"><span class="comment">     * retained by the VM at run time, so they may be read reflectively.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> java.lang.reflect.AnnotatedElement</span></span><br><span class="line"><span class="comment">       程序在编译以及运行时，都会使用注解</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RUNTIME</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自定义注解如何使用？ 结合反射使用。</p>
<p>注解+反射 什么时候会真正使用？ 开发框架</p>
<p>使用注解案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> annotaion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMyAnnotation</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotation(value=&quot;李四&quot;,age=33)</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line"></span><br><span class="line">        Annotation[] annotations = Class.forName(<span class="string">&quot;annotaion.TestMyAnnotation&quot;</span>).getMethod(<span class="string">&quot;test&quot;</span>).getAnnotations();</span><br><span class="line">        <span class="keyword">for</span>(Annotation a :annotations)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a  <span class="keyword">instanceof</span>  MyAnnotation )&#123;<span class="comment">//@MyAnnotation</span></span><br><span class="line">                System.out.println(    ((MyAnnotation)a)  .value()     );</span><br><span class="line">                System.out.println(    ((MyAnnotation)a)  .age()     );</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//@Deprecated</span></span><br><span class="line">                System.out.println(        <span class="string">&quot;@Deprecated&quot;</span>     );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line">        test() ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">李四</span><br><span class="line">33</span><br><span class="line">@Deprecated</span><br></pre></td></tr></table></figure>
<p><span class="citation" data-cites="Document">@Document</span>：</p>
<p>​ javadoc：java帮助文档。 ABC.java -&gt; 帮助文档</p>
<p>​ 默认情况下，javadoc不包含 注解的解释；如果现在javadoc文档中
也包含对注解的说明，则需要使用 <span class="citation"
data-cites="Document标注">@Document标注</span></p>
<p>例如，一下MyAnnotation注解，会在生成javadoc时，被显示在文档中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span class="citation"
data-cites="Inherited">@Inherited</span>：继承</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotation</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">A</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;&#125;<span class="comment">//默认情况下，B不会继承A中的注解；如果要想继承，则需要加@Inherited</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="更多"><a
href="https://www.runoob.com/w3cnote/java-annotation.html">更多</a></h2>
<h1 id="反射reflection">反射（Reflection）</h1>
<h2 id="反射获得对象">反射获得对象</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    Person person=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;这个人是：&quot;</span>+person.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式一：对象获得</span></span><br><span class="line">        Class c1=person.getClass();</span><br><span class="line">        System.out.println(c1.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：forname获得</span></span><br><span class="line">        Class c2=Class.forName(<span class="string">&quot;com.refection.Student&quot;</span>);</span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式三：通过类名.class获得</span></span><br><span class="line">        Class c3=Student.class;</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得父类</span></span><br><span class="line">        Class c5=c1.getSuperclass();</span><br><span class="line">        System.out.println(c5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="built_in">this</span>.name=<span class="string">&quot;学生&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=<span class="string">&quot;老师&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="所有类型的class对象">所有类型的Class对象</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Class c1=Object.class;<span class="comment">//类</span></span><br><span class="line">        Class c2=Comparable.class;<span class="comment">//接口</span></span><br><span class="line">        Class c3=String[].class;<span class="comment">//一维数组</span></span><br><span class="line">        Class c4=<span class="type">int</span>[][].class;<span class="comment">//二维数组</span></span><br><span class="line">        Class c5=Override.class;<span class="comment">//注解</span></span><br><span class="line">        Class c6= ElementType.class;<span class="comment">//枚举</span></span><br><span class="line">        Class c7=Integer.class;<span class="comment">//基本数据类型</span></span><br><span class="line">        Class c8=<span class="keyword">void</span>.class;<span class="comment">//void</span></span><br><span class="line">        Class c9=Class.class;<span class="comment">//Class</span></span><br><span class="line"></span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        System.out.println(c3);</span><br><span class="line">        System.out.println(c4);</span><br><span class="line">        System.out.println(c5);</span><br><span class="line">        System.out.println(c6);</span><br><span class="line">        System.out.println(c7);</span><br><span class="line">        System.out.println(c8);</span><br><span class="line">        System.out.println(c9);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] a=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="type">int</span>[] b=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">        System.out.println(a.getClass().hashCode());</span><br><span class="line">        System.out.println(b.getClass().hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="取得类的信息">取得类的信息</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class c1=Class.forName(<span class="string">&quot;com.refection.User&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(c1.getName());</span><br><span class="line">        System.out.println(c1.getSimpleName());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line">        <span class="comment">//获得属性</span></span><br><span class="line">        Field[] fields=c1.getFields();<span class="comment">//只能找到public属性</span></span><br><span class="line">        fields=c1.getDeclaredFields();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得指定属性</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line">        <span class="comment">//获得方法</span></span><br><span class="line">        Method[] methods =c1.getMethods();<span class="comment">//本类和及父类public方法</span></span><br><span class="line">        methods=c1.getDeclaredMethods();<span class="comment">//本类所有方法</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得指定方法</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line">        <span class="comment">//获得构造器</span></span><br><span class="line">        Constructor[] constructors=c1.getConstructors();</span><br><span class="line">        constructors=c1.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得指定构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="创建对象">创建对象</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="comment">//获得Class对象</span></span><br><span class="line">        Class c1=Class.forName(<span class="string">&quot;com.refection.User&quot;</span>);</span><br><span class="line">        <span class="comment">//构造一个对象</span></span><br><span class="line">        User user= (User) c1.newInstance();<span class="comment">//本质调用无参构造器</span></span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过构造器创建对象</span></span><br><span class="line">        Constructor constructor=c1.getConstructor(<span class="type">int</span>.class,String.class,<span class="type">int</span>.class);</span><br><span class="line">        User user1= (User) constructor.newInstance(<span class="number">1</span>,<span class="string">&quot;wnhyang&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        System.out.println(user1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射调用方法</span></span><br><span class="line">        User user2= (User) c1.newInstance();</span><br><span class="line">        <span class="comment">//反射获取方法</span></span><br><span class="line">        Method method=c1.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">//invoke调用</span></span><br><span class="line">        method.invoke(user2,<span class="string">&quot;wnhyang&quot;</span>);</span><br><span class="line">        System.out.println(user2.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射操作属性</span></span><br><span class="line">        User user3= (User) c1.newInstance();</span><br><span class="line">        <span class="comment">//通过反射获得属性</span></span><br><span class="line">        Field field=c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">//不能直接操作私有属性，需要关闭安全检测，及下面的setAccessible(true);</span></span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(user3,<span class="string">&quot;wnhyang&quot;</span>);</span><br><span class="line">        System.out.println(user3.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p><a
href="https://www.bilibili.com/video/BV1p4411P7V3">https://www.bilibili.com/video/BV1p4411P7V3</a></p>
<h1 id="总结">总结</h1>
<p>在学Spring框架时，都会了解到Spring最重要的<strong>IOC</strong>与<strong>AOP</strong>，就会听到<strong>注解与反射</strong>，直到去真正了解这些知识，才会发现其中的联系，不过现在我的理解还不到位，说不了太多东西，相信随着学习的深入，慢慢就会发现其中的奥秘。</p>
]]></content>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>Java网络编程</title>
    <url>/article/81e7b834.html</url>
    <content><![CDATA[<p>说不上技术分享，只能算是学习记录</p>
<span id="more"></span>
<h1 id="网络编程">网络编程</h1>
<p>java.net 包中提供了两种常见的网络协议的支持：</p>
<ul>
<li><strong>TCP</strong>：TCP（英语：Transmission Control
Protocol，传输控制协议）
是一种面向连接的、可靠的、基于字节流的传输层通信协议，TCP 层是位于 IP
层之上，应用层之下的中间层。TCP
保障了两个应用程序之间的可靠通信。通常用于互联网协议，被称 TCP /
IP。</li>
<li><strong>UDP</strong>：UDP （英语：User Datagram
Protocol，用户数据报协议），位于 OSI
模型的传输层。一个无连接的协议。提供了应用程序之间要发送数据的数据报。由于UDP缺乏可靠性且属于无连接协议，所以应用程序通常必须容许一些丢失、错误或重复的数据包。</li>
</ul>
<p>本教程主要讲解以下两个主题。</p>
<ul>
<li><strong>Socket
编程</strong>：这是使用最广泛的网络概念，它已被解释地非常详细。</li>
<li><strong>URL
处理</strong>：这部分会在另外的篇幅里讲，点击这里更详细地了解在 <a
href="https://www.runoob.com/java/java-url-processing.html">Java
语言中的 URL 处理</a>。</li>
</ul>
<p>案例：</p>
<h2 id="模板">模板</h2>
<p>1.客户端建立连接 ；服务端准备服务（ip[默认本机]:端口）</p>
<p>2.通过socket生成inputstream/outputstream（准备发送数据）</p>
<p>3.使用inputstream/outputstream进行发送、接受数据</p>
<p>4.关闭inputstream/outputstream、socket</p>
<h3 id="服务端serversocket">服务端（ServerSocket）</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.准备服务.ip:默认本机127.0.0.1,端口8888</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            serverSocket = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;服务端启动&quot;</span>);</span><br><span class="line">            <span class="comment">//准备完毕，可以监听客户端请求</span></span><br><span class="line">            socket = serverSocket.accept();<span class="comment">//一直阻塞，直到有客户端连接</span></span><br><span class="line">            System.out.println(<span class="string">&quot;服务端检测到客户端链接成功！&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.通过socket生成inputstream/outputstream（准备发送数据）</span></span><br><span class="line">            <span class="comment">//3.使用inputstream/outputstream进行发送、接受数据</span></span><br><span class="line">            in = socket.getInputStream();</span><br><span class="line">            <span class="comment">//带缓冲区的字符流（字节流-转换流-字符流）</span></span><br><span class="line">            reader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in));</span><br><span class="line">            <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((info = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;I am server,接受到客户端信息是：&quot;</span> + info);</span><br><span class="line">            &#125;</span><br><span class="line">            socket.shutdownInput();</span><br><span class="line">            <span class="comment">//服务端做出反馈</span></span><br><span class="line">            out = socket.getOutputStream();</span><br><span class="line">            out.write(<span class="string">&quot;welcome  client....&quot;</span>.getBytes());</span><br><span class="line">            socket.shutdownOutput();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 4.关闭inputstream/outputstream、socket</span></span><br><span class="line">                <span class="keyword">if</span> (reader != <span class="literal">null</span>) reader.close();</span><br><span class="line">                <span class="keyword">if</span> (out != <span class="literal">null</span>) out.close();</span><br><span class="line">                <span class="keyword">if</span> (in != <span class="literal">null</span>) in.close();</span><br><span class="line">                <span class="keyword">if</span> (socket != <span class="literal">null</span>) socket.close();</span><br><span class="line">                <span class="keyword">if</span> (serverSocket != <span class="literal">null</span>) serverSocket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="客户端socket">客户端（Socket）</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket=<span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8888</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端链接成功！&quot;</span>);</span><br><span class="line">            out = socket.getOutputStream();</span><br><span class="line">            out.write( <span class="string">&quot;hello server&quot;</span>.getBytes()  );</span><br><span class="line">            socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//接收服务端的反馈</span></span><br><span class="line">            in = socket.getInputStream();</span><br><span class="line">            reader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in));</span><br><span class="line">            <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span>(   (info=reader.readLine()) != <span class="literal">null</span> )&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;I am client,接收到的服务端消息：&quot;</span>+info);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            socket.shutdownInput();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(out!=<span class="literal">null</span>) out.close();</span><br><span class="line">                <span class="keyword">if</span>(in!=<span class="literal">null</span>) in.close();</span><br><span class="line">                <span class="keyword">if</span>(socket!=<span class="literal">null</span>) socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="对象流">对象流</h2>
<p>网络传递一个对象： 1.将要传递的对象序列化
2.使用对象流（ObjectInputStream/ObjectOutputStream）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;<span class="comment">//将要传递的对象序列化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sid ;</span><br><span class="line">    <span class="keyword">private</span> String sname ;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> sid, String sname, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sid = sid;</span><br><span class="line">        <span class="built_in">this</span>.sname = sname;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSid</span><span class="params">(<span class="type">int</span> sid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sid = sid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSname</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSname</span><span class="params">(String sname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sname = sname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;sid=&quot;</span> + sid +</span><br><span class="line">                <span class="string">&quot;, sname=&#x27;&quot;</span> + sname + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>服务端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverScoket</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             serverScoket = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>( <span class="number">8888</span>) ;</span><br><span class="line">             socket = serverScoket.accept();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//接受客户端发来的对象</span></span><br><span class="line">             in = socket.getInputStream();</span><br><span class="line">            <span class="comment">//对象流</span></span><br><span class="line">             ois = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student)ois.readObject();<span class="comment">//读取对象</span></span><br><span class="line">                System.out.println(student);</span><br><span class="line">                socket.shutdownInput();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span>(ois!=<span class="literal">null</span>) ois.close();</span><br><span class="line">                <span class="keyword">if</span>(in!=<span class="literal">null</span>)   in.close();</span><br><span class="line">                <span class="keyword">if</span>(socket!=<span class="literal">null</span>)  socket.close();</span><br><span class="line">                <span class="keyword">if</span>(serverScoket!=<span class="literal">null</span>)  serverScoket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>客户端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;localhost&quot;</span>,<span class="number">8888</span>) ;</span><br><span class="line"></span><br><span class="line">            <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1001</span>,<span class="string">&quot;zs&quot;</span>,<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">            out = socket.getOutputStream();</span><br><span class="line">            <span class="comment">//将OutputStream转为对象流</span></span><br><span class="line">            oos = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out) ;</span><br><span class="line">            oos.writeObject( student );<span class="comment">//发送对象</span></span><br><span class="line">            socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(oos!=<span class="literal">null</span>) oos.close();</span><br><span class="line">                <span class="keyword">if</span>(out!=<span class="literal">null</span>)   out.close();</span><br><span class="line">                <span class="keyword">if</span>(socket!=<span class="literal">null</span>)  socket.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="多客户端问题">多客户端问题</h2>
<p>思路：客户端代码不变；服务端：每当有一个客户端，就开启一个新线程去处理（每个线程专门处理一个客户端对象）。</p>
<h3 id="服务端线程">服务端线程</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    Socket socket;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServerThread</span><span class="params">(Socket socket)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span><span class="literal">null</span> ;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span>  <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//接受客户端数据（客户端—&gt;服务端）</span></span><br><span class="line">            in = socket.getInputStream();</span><br><span class="line">            ois  = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in) ;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span>  (Student)ois.readObject() ;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">            socket.shutdownInput();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//给客户端反馈(服务端-&gt;客户端)</span></span><br><span class="line">            out = socket.getOutputStream();</span><br><span class="line">            out.write(<span class="string">&quot;已收到....&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                out.close();</span><br><span class="line">                ois.close();</span><br><span class="line">                in.close();</span><br><span class="line">                socket.close(); ;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="服务端">服务端</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>) ;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();<span class="comment">//阻塞，接受客户端请求</span></span><br><span class="line">                <span class="type">ServerThread</span> <span class="variable">serverThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerThread</span>(socket) ;</span><br><span class="line">                serverThread.start();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="客户端">客户端</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;localhost&quot;</span>,<span class="number">8888</span>) ;</span><br><span class="line"></span><br><span class="line">            <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1001</span>,<span class="string">&quot;zs&quot;</span>,<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">             out = socket.getOutputStream();</span><br><span class="line">            <span class="comment">//将OutputStream转为对象流</span></span><br><span class="line">             oos = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out) ;</span><br><span class="line">            oos.writeObject( student );<span class="comment">//发送对象</span></span><br><span class="line">            socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//接受服务端的反馈</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">100</span>] ;</span><br><span class="line">            in.read(buf) ;</span><br><span class="line">            System.out.println(<span class="string">&quot;接收到的服务端反馈:&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(buf)      );</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(oos!=<span class="literal">null</span>) oos.close();</span><br><span class="line">                <span class="keyword">if</span>(out!=<span class="literal">null</span>)   out.close();</span><br><span class="line">                <span class="keyword">if</span>(socket!=<span class="literal">null</span>)  socket.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="udp的实现">UDP的实现</h2>
<p>DatagramPacket（数据）：封装了数据报的数据、数据长度、目标地址和目标端口</p>
<p>DatagramScoket（收发器）：接收和发送DatagramPacket中封装好的数据</p>
<p>接收方</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Receive</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">64</span>] ;</span><br><span class="line">        <span class="comment">//准备接收数据的对象</span></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data , data.length) ;</span><br><span class="line">        <span class="comment">//接收数据</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ds = <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9999</span>);</span><br><span class="line">            ds.receive( dp );</span><br><span class="line"></span><br><span class="line">            <span class="comment">//显示接收到的数据</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">receiveData</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(dp.getData(), <span class="number">0</span>, data.length);</span><br><span class="line">            System.out.println(<span class="string">&quot;接收到的数据：&quot;</span>+receiveData);</span><br><span class="line">            System.out.println(<span class="string">&quot;显示发送方的信息：&quot;</span> +  dp.getAddress().getHostAddress() );</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ds.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>发送方</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Send</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="comment">//创建一个InetAddress对象</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">ip</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ip = InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;helloserver..&quot;</span> ;</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(msg.getBytes(),msg.length(),ip,<span class="number">9999</span>) ;</span><br><span class="line">            ds = <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>() ;</span><br><span class="line">            ds.send(  dp );</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            ds.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>总结：发送数据使用的工具</p>
<p>TCP：字节流</p>
<p>UDP：DatagramScoket</p>
<h2 id="网络编程中一些工具类">网络编程中一些工具类</h2>
<p>InetAddress</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="type">InetAddress</span> <span class="variable">host</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//本机</span></span><br><span class="line">         host = InetAddress.getLocalHost();</span><br><span class="line">         System.out.println(host);</span><br><span class="line">         <span class="comment">//网络中任意一台</span></span><br><span class="line">         <span class="type">InetAddress</span> <span class="variable">host163</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;www.163.com&quot;</span>);</span><br><span class="line">         System.out.println(host163);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p><strong>URL/URLConnection</strong></p>
<p>以下示例，注意点：输入流 url-内存； 输出流：内存-本地</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="type">URLConnection</span> <span class="variable">urlConnection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://www.163.com/&quot;</span>) ;</span><br><span class="line">            urlConnection = url.openConnection();</span><br><span class="line">            in = urlConnection.getInputStream();</span><br><span class="line"></span><br><span class="line">            out = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;d:\\163.txt&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">64</span>] ;</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> -<span class="number">1</span> ;</span><br><span class="line">            <span class="keyword">while</span>(  (len = in.read(buf)) != -<span class="number">1</span> )&#123;</span><br><span class="line">                out.write(buf,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               	<span class="keyword">if</span>(out!=<span class="literal">null</span>) out.close();</span><br><span class="line">                <span class="keyword">if</span>(in!=<span class="literal">null</span>)  in.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p><a
href="https://www.bilibili.com/video/BV114411W7id?p=61">https://www.bilibili.com/video/BV114411W7id?p=61</a></p>
<h1 id="总结">总结</h1>
<p>记得学这个是在疫情期间网课学习的，当时用的是C#，VS教学的，到现在都快忘完了，我是喜欢Java！</p>
]]></content>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode1</title>
    <url>/article/75055f1f.html</url>
    <content><![CDATA[<p>这两天在LeetCode这个平台上刷算法题，想着也快毕业了，不想读研，那就要为找工作多费心力了。之后我会经常在这看题的，也会发一些好的题目算法，做个记录。</p>
<p>这次相对都是简单一些的。</p>
<span id="more"></span>
<h1 id="整数反转">7.整数反转</h1>
<p><a
href="https://leetcode-cn.com/problems/reverse-integer/">题目地址</a></p>
<p>给出一个 32
位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>
<p>示例1： &gt; 输入: 123<br />
&gt; 输出: 321</p>
<p>示例2： &gt; 输入: -123<br />
&gt; 输出: -321</p>
<p>示例3： &gt; 输入: 120<br />
&gt; 输出: 21</p>
<p>注意:</p>
<p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231, 
231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p>
<h1 id="begin">begin</h1>
<p>是不是感觉很简单，没错是相对简单的题，解这个题应该都可以的，但解题前是否分析了该怎么做才能做到最优，时间空间达到平衡。</p>
<p>这个题关键是就是用好“%”、“/”和循环，然后判断溢出即可，最简单的开始练手嘛！</p>
<p>一种java题解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> rev=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> pop=x%<span class="number">10</span>;</span><br><span class="line">            x/=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (rev &gt; Integer.MAX_VALUE/<span class="number">10</span> || (rev == Integer.MAX_VALUE / <span class="number">10</span> &amp;&amp; pop &gt; <span class="number">7</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (rev &lt; Integer.MIN_VALUE/<span class="number">10</span> || (rev == Integer.MIN_VALUE / <span class="number">10</span> &amp;&amp; pop &lt; -<span class="number">8</span>))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            rev=rev*<span class="number">10</span>+pop;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a
href="https://leetcode-cn.com/problems/reverse-integer/solution/">详细题解</a></p>
<p>热身好就下一个</p>
<h1 id="回文数">9.回文数</h1>
<p><a
href="https://leetcode-cn.com/problems/palindrome-number/">题目地址</a></p>
<p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>
<p>示例1： &gt; 输入: 121<br />
&gt; 输出: true</p>
<p>示例2： &gt; 输入: -121<br />
&gt; 输出: false<br />
&gt;解释: 从左向右读, 为 -121 。 从右向左读, 为 121-
。因此它不是一个回文数。</p>
<p>示例3： &gt; 输入: 10<br />
&gt; 输出: false<br />
&gt; 解释: 从右向左读, 为 01 。因此它不是一个回文数。</p>
<p>进阶:</p>
<p>你能不将整数转为字符串来解决这个问题吗？</p>
<h1 id="begin-1">begin</h1>
<p>很多人可能对进阶的字符串回文的会更了解，low、high首尾判断。这个题是整数的回文，最好自己先是尝试一下，不知道有没有人这样想，分三种情况考虑，负数false，0true，正数在做类似于字符串那样处理，不怕你们嘲笑，我当时就这么想的，实现之后，虽然通过但时间消耗太大了，需要改进，看了题解，不禁感慨：我怎么想不到！！！</p>
<p>题解思路：负数和以0结尾的数false，重点来了，下一步将这个数反转一半，如：12321和123321分别反转为123和123，接着与剩下的比较，匹配则true。</p>
<p>一种java题解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    bool <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="comment">// 特殊情况：</span></span><br><span class="line">        <span class="comment">// 如上所述，当 x &lt; 0 时，x 不是回文数。</span></span><br><span class="line">        <span class="comment">// 同样地，如果数字的最后一位是 0，为了使该数字为回文，</span></span><br><span class="line">        <span class="comment">// 则其第一位数字也应该是 0</span></span><br><span class="line">        <span class="comment">// 只有 0 满足这一属性</span></span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || (x % <span class="number">10</span> == <span class="number">0</span> &amp;&amp; x != <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">revertedNumber</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &gt; revertedNumber) &#123;</span><br><span class="line">            revertedNumber = revertedNumber * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当数字长度为奇数时，我们可以通过 revertedNumber/10 去除处于中位的数字。</span></span><br><span class="line">        <span class="comment">// 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，revertedNumber = 123，</span></span><br><span class="line">        <span class="comment">// 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。</span></span><br><span class="line">        <span class="keyword">return</span> x == revertedNumber || x == revertedNumber / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><a
href="https://leetcode-cn.com/problems/palindrome-number/solution/hui-wen-shu-by-leetcode-solution/">详细题解</a></p>
<p>是不是觉得，就这，那就来一道复杂一点的吧！</p>
<h1 id="两数相加">2. 两数相加</h1>
<p><a
href="https://leetcode-cn.com/problems/add-two-numbers/">题目地址</a></p>
<p>给出两个 非空
的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p>
<p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p>
<p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<p>示例： &gt;输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br />
&gt;输出：7 -&gt; 0 -&gt; 8<br />
&gt;原因：342 + 465 = 807</p>
<h1 id="begin-2">begin</h1>
<p>这个，还行吧，包含链表知识，可以费点心思了吧！</p>
<p>选这个题是有目的的，因为这个题和解太有趣了，也可能就我笨想不到吧！</p>
<p>提示一下下面直接放题解了——从低位依次向上加，存入链表即可。</p>
<p>一种java题解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">        ListNode l=<span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        ListNode p1=l1,p2=l2,p=l;</span><br><span class="line">        <span class="type">int</span> carry=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(p1!=<span class="literal">null</span>||p2!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">int</span> x=(p1!=<span class="literal">null</span>)? p1.val:<span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> y=(p2!=<span class="literal">null</span>)? p2.val:<span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> sum=carry+x+y;</span><br><span class="line">            carry=sum/<span class="number">10</span>;</span><br><span class="line">            p.next=<span class="keyword">new</span> <span class="title class_">ListNode</span>(sum%<span class="number">10</span>);</span><br><span class="line">            p=p.next;</span><br><span class="line">            <span class="keyword">if</span>(p1!=<span class="literal">null</span>)</span><br><span class="line">                p1=p1.next;</span><br><span class="line">            <span class="keyword">if</span>(p2!=<span class="literal">null</span>)</span><br><span class="line">                p2=p2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(carry&gt;<span class="number">0</span>)</span><br><span class="line">            p.next=<span class="keyword">new</span> <span class="title class_">ListNode</span>(carry);</span><br><span class="line">        <span class="keyword">return</span> l.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a
href="https://leetcode-cn.com/problems/add-two-numbers/solution/">详细题解</a></p>
<h1 id="总结">总结</h1>
<p>引用一位解题者在题解下的评论“简单的题效率完全比不上题解，复杂的题完全不会
-.-”，我也是这样，天生没有那么聪明的脑子，那就必须要格外努力！Fighting！</p>
]]></content>
      <tags>
        <tag>数据结构&amp;算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux虚拟机安装</title>
    <url>/article/e8c0a077.html</url>
    <content><![CDATA[<h1 id="参考">参考</h1>
<p>B站视频：<a
href="https://www.bilibili.com/video/BV1bA411b7vs">https://www.bilibili.com/video/BV1bA411b7vs</a></p>
<p>视频配套（windows安装）：<a
href="https://mp.weixin.qq.com/s/onVwwEQ1DAwbvK7qS2YNxg">https://mp.weixin.qq.com/s/onVwwEQ1DAwbvK7qS2YNxg</a></p>
<p>csdn：<a
href="https://blog.csdn.net/java_xinshou1/article/details/100010099">https://blog.csdn.net/java_xinshou1/article/details/100010099</a>、<a
href="https://blog.csdn.net/qq_40950957/article/details/80467513">https://blog.csdn.net/qq_40950957/article/details/80467513</a></p>
<p>菜鸟教程：<a
href="https://www.runoob.com/linux/linux-install.html">https://www.runoob.com/linux/linux-install.html</a></p>
<span id="more"></span>
<h1 id="起因">起因</h1>
<p>单纯的知道，Linux是程序员，尤其是后端程序员必须掌握的，so...</p>
<h1 id="安装">安装</h1>
<h2 id="准备">准备</h2>
<p>宿主机系统：<code>Windows 10</code></p>
<p>虚拟机软件：<a
href="https://my.vmware.com/cn/web/vmware/downloads/info/slug/desktop_end_user_computing/vmware_workstation_pro/16_0"><code>VMware Workstation 16</code></a></p>
<p><code>CentOS</code> 操作系统 <code>ISO</code> 镜像：<a
href="http://mirrors.aliyun.com/centos/7/isos/x86_64/">CentOS 7</a></p>
<p>SSH终端软件：<a
href="https://mobaxterm.mobatek.net/"><code>MobaXterm</code></a></p>
<h2 id="开始">开始</h2>
<p>上面的教程已经相当完备了，我只想提一下可能遇到的问题</p>
<p><strong>先整个叙述一下安装的整个过程</strong></p>
<ul>
<li>打开虚拟机软件<code>VMware Workstation</code>，创建新的虚拟机，自定义安装，选择虚拟机硬件兼容性</li>
<li>加载已下载好的<code>CentOS 7</code>镜像，下一步，直到命名虚拟机和选择安装位置，名字尽量不用（空格，斜线，点，中文），可以用下划线连接命名，位置自己选就行</li>
<li>自定义虚拟机配置，处理机按需分配（参考：8核分2核），内存推荐值左右吧，网络类型桥接网络，下一步，直到硬盘大小，我使用的就是推荐大小（同样按需分配）</li>
<li>安装成功后启动，设置简体中文，选择预安软件（最小安装没有图形界面，甚至不支持一些命令，需要额外安装，当然正因如此安装内容少更快，此项就是根据个人需求选择的）</li>
<li>配置分区，没有特别需求可以选择自动分区，如果有需要可以自定义分区</li>
<li>开始安装，这是有两个需要配置，ROOT密码和创建用户（ROOT用户及拥有最高权限的用户，许多操作都需要在ROOT用户下操作；创建用户则可以用这个用户登录Linux，权限低一些）</li>
<li>安装完成重启，进入系统</li>
</ul>
<p><strong>待解决问题</strong></p>
<ul>
<li>网络问题（虚拟机不能访问外网，不能访问宿主机）</li>
</ul>
<p><strong>网络配置</strong></p>
<ul>
<li><code>ifconfig</code>或<code>ip addr</code>查看ip信息</li>
<li>参考上面的链接操作即可</li>
</ul>
<p><strong>网络配置完成仍然有问题</strong></p>
<ul>
<li>可以访问外网，ping通外网，宿主机ping通虚拟机，但虚拟机ping不通宿主机</li>
<li>参考链接：<a
href="https://blog.csdn.net/qq_22799043/article/details/110682846">https://blog.csdn.net/qq_22799043/article/details/110682846</a></li>
</ul>
<p><strong>最小安装字体与分辨率问题</strong></p>
<ul>
<li>参考链接：<a
href="https://blog.csdn.net/weixin_39622178/article/details/114490496">https://blog.csdn.net/weixin_39622178/article/details/114490496</a></li>
</ul>
<p><strong>SSH终端连接</strong></p>
<p>使用SSH终端连接Linux，<code>MobaXterm</code>刚刚安装还在探索阶段</p>
<p>ChromeSSH插件：<a
href="chrome://extensions/?id=iodihamcpbpeioajjeobimgagajmlibd">chrome://extensions/?id=iodihamcpbpeioajjeobimgagajmlibd</a></p>
<p>其他还有许多，甚至Win10都带有，在任意目录下按<code>shift</code>和鼠标右键，在此处打开Powershell窗口，输入<code>ssh</code>，发现win10自带了SSH终端功能，即可
<code>ssh username@xxx.xxx.xxx.xxx</code> 连接了</p>
<p>如果有需要可以克隆已安装的虚拟机打造多节点，平时练练手</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode3</title>
    <url>/article/9b0b3e33.html</url>
    <content><![CDATA[<p>续<a
href="https://wnhyang.github.io/article/ec0c0ea5.html">LeetCode2</a></p>
<p>有了前面的做题经验，会发现接下来做的题有许多都是一个样板的翻版，都很类似，只要掌握了一些方法还是容易应对的。我写的一般都是新的题。</p>
<span id="more"></span>
<h1 id="盛最多水的容器">11.盛最多水的容器</h1>
<p><a
href="https://leetcode-cn.com/problems/container-with-most-water/">题目地址</a></p>
<p>给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai)
。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i,
0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>
<p>说明：你不能倾斜容器，且 n 的值至少为 2。</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/question_11.jpg"
alt="图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。" />
<figcaption aria-hidden="true">图中垂直线代表输入数组
[1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为
49。</figcaption>
</figure>
<p>示例： &gt;输入：[1,8,6,2,5,4,8,3,7]<br />
&gt;输出：49</p>
<h1 id="begin">begin</h1>
<p>这个你会怎么去解呢？我的第一想法就是刚刚见识过的双指针，试试嘛。但是判断如何移动时慌了，不知道咋办了。之后看来题解恍然大悟，自己真傻，怎么移动？当时真是没脑筋，当然是低的向中间移动了，哎。</p>
<p>一种java题解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxArea</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> maxarea=<span class="number">0</span>,l=<span class="number">0</span>,h=height.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;h)&#123;</span><br><span class="line">            maxarea=Math.max(maxarea,Math.min(height[l],height[h])*(h-l));</span><br><span class="line">            <span class="keyword">if</span>(height[l]&lt;=height[h])&#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                h--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxarea;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a
href="https://leetcode-cn.com/problems/container-with-most-water/solution/">详细题解</a></p>
<h1 id="搜索插入位置">35.搜索插入位置</h1>
<p><a
href="https://leetcode-cn.com/problems/search-insert-position/">题目地址</a></p>
<p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>
<p>你可以假设数组中无重复元素。</p>
<p>示例1： &gt;输入: [1,3,5,6], 5<br />
&gt;输出: 2</p>
<p>示例2： &gt;输入: [1,3,5,6], 2<br />
&gt;输出: 1</p>
<p>示例3： &gt;输入: [1,3,5,6], 7<br />
&gt;输出: 4</p>
<p>示例4： &gt;输入: [1,3,5,6], 0<br />
&gt;输出: 0</p>
<h1 id="begin-1">begin</h1>
<p>这是一个典型的二分法应用，迷惑的点在这个题叫“搜索插入位置”，关键是不存在时要找到插入为。想通这个就容易了，之后可以尝试这个<a
href="https://leetcode-cn.com/problems/sqrtx/">69. x 的平方根</a>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>,h=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=h)&#123;</span><br><span class="line">            <span class="type">int</span> mid=l+(h-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target==nums[mid])&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target&gt;nums[mid])&#123;</span><br><span class="line">                l=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                h=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a
href="https://leetcode-cn.com/problems/search-insert-position/solution/">详细题解</a></p>
<h1 id="环形链表">141.环形链表</h1>
<p><a
href="https://leetcode-cn.com/problems/linked-list-cycle/">题目地址</a></p>
<p>给定一个链表，判断链表中是否有环。</p>
<p>如果链表中有某个节点，可以通过连续跟踪 next
指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos
来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是
-1，则在该链表中没有环。注意：pos
不作为参数进行传递，仅仅是为了标识链表的实际情况。</p>
<p>如果链表中存在环，则返回 true 。 否则，返回 false 。</p>
<p>进阶：</p>
<p>你能用 O(1)（即，常量）内存解决此问题吗？</p>
<p>示例1：</p>
<p><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/141_1.png" width="400" height="" alt="141-1" /></p>
<blockquote>
<p>输入：head = [3,2,0,-4], pos = 1<br />
输出：true<br />
解释：链表中有一个环，其尾部连接到第二个节点。</p>
</blockquote>
<p>示例2：</p>
<p><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/141_2.png" width="200" height="" alt="141-1" /></p>
<blockquote>
<p>输入：head = [1,2], pos = 0 输出：true<br />
解释：链表中有一个环，其尾部连接到第一个节点。</p>
</blockquote>
<p>示例3：</p>
<p><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/141_3.png" width="60" height="" alt="141-1" /></p>
<blockquote>
<p>输入：head = [1], pos = -1<br />
输出：false<br />
解释：链表中没有环。</p>
</blockquote>
<p>提示：</p>
<ul>
<li>链表中节点的数目范围是 [<span class="math inline">\(0\)</span>,
<span class="math inline">\(10^4\)</span>]</li>
<li><span class="math inline">\({-10}^5\)</span> &lt;= Node.val &lt;=
<span class="math inline">\({10}^5\)</span></li>
<li>pos 为 <span class="math inline">\(-1\)</span> 或者链表中的一个
<strong>有效索引</strong> 。</li>
</ul>
<h1 id="begin-2">begin</h1>
<p>官方给了两种方法。这个题是一定要放在这的原因就是因为第二种解法，我只能说能产生这种想法和思维的简直了。</p>
<h1 id="方法一哈希表">方法一：哈希表</h1>
<p>利用哈希表判断是否有重复元素进而得出结果。</p>
<p>官方方法一java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    Set&lt;ListNode&gt; nodesSeen = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nodesSeen.contains(head)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nodesSeen.add(head);</span><br><span class="line">        &#125;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="复杂度分析">复杂度分析</h1>
<ul>
<li>时间复杂度：O(<span class="math inline">\(n\)</span>)，对于含有 n
个元素的链表，我们访问每个元素最多一次。添加一个结点到哈希表中只需要花费
O(<span class="math inline">\(1\)</span>)的时间。</li>
<li>空间复杂度：O(<span
class="math inline">\(n\)</span>)，空间取决于添加到哈希表中的元素数目，最多可以添加
<span class="math inline">\(n\)</span> 个元素。</li>
</ul>
<h1 id="方法二快慢指针">方法二：快慢指针</h1>
<p>想象跑步比赛，当无环时：快指针等于null，即到终点了，返回false。当有环时：快慢指针都会进入环赛道中，必定存在快指针超越慢指针，即的确有环，返回true。</p>
<p>官方方法二java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head.next;</span><br><span class="line">    <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fast == <span class="literal">null</span> || fast.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="复杂度分析-1">复杂度分析</h1>
<ul>
<li><p>时间复杂度：O(<span class="math inline">\(n\)</span>)，让我们将
<span class="math inline">\(n\)</span>
设为链表中结点的总数。为了分析时间复杂度，我们分别考虑下面两种情况。</p>
<ul>
<li><strong><em>链表中不存在环</em></strong>：<br />
快指针将会首先到达尾部，其时间取决于列表的长度，也就是 O(<span
class="math inline">\(n\)</span>)。</li>
<li><strong><em>链表中存在环</em></strong>：
我们将慢指针的移动过程划分为两个阶段：非环部分与环形部分：</li>
</ul>
<ol type="1">
<li>慢指针在走完非环部分阶段后将进入环形部分：此时，快指针已经进入环中
<strong>迭代次数</strong> = <strong>非环部分长度</strong> =
<strong><span class="math inline">\(N\)</span></strong></li>
<li>两个指针都在环形区域中：考虑两个在环形赛道上的运动员 -
快跑者每次移动两步而慢跑者每次只移动一步。其速度的差值为 1，因此需要经过
<strong>二者之间距离速度差值</strong>次循环后，快跑者可以追上慢跑者。这个距离几乎就是
<strong>"环形部分长度 <span class="math inline">\(K\)</span>"</strong>
且速度差值为 <span class="math inline">\(1\)</span>，我们得出这样的结论
<strong>迭代次数 = 近似于 "环形部分长度 K"</strong>.</li>
</ol>
<p>因此，在最糟糕的情形下，时间复杂度为 O(<span
class="math inline">\(N+K\)</span>)，也就是 O(<span
class="math inline">\(n\)</span>)。</p></li>
<li><p>空间复杂度：O(<span
class="math inline">\(1\)</span>)，我们只使用了慢指针和快指针两个结点，所以空间复杂度为
O(<span class="math inline">\(1\)</span>)。</p></li>
</ul>
<p><a
href="https://leetcode-cn.com/problems/linked-list-cycle/solution/">详细题解</a></p>
]]></content>
      <tags>
        <tag>数据结构&amp;算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode2</title>
    <url>/article/ec0c0ea5.html</url>
    <content><![CDATA[<p>续<a
href="https://wnhyang.github.io/article/75055f1f.html">LeetCode1</a></p>
<span id="more"></span>
<h1 id="powx-n">50.Pow(x, n)</h1>
<p><a href="https://leetcode-cn.com/problems/powx-n/">题目地址</a></p>
<p>实现 pow(x, n) ，即计算 x 的 n 次幂函数。</p>
<p>示例1： &gt; 输入: 2.00000, 10<br />
&gt;输出: 1024.00000</p>
<p>示例2： &gt; 输入: 2.10000, 3<br />
&gt;输出: 9.26100</p>
<p>示例3： &gt; 输入: 2.00000, -2<br />
&gt;输出: 0.25000<br />
&gt;解释: <span class="math inline">\(2^{-2}\)</span> = <span
class="math inline">\(1/2^2\)</span> = <span
class="math inline">\(1/4\)</span> = <span
class="math inline">\(0.25\)</span></p>
<p>说明:</p>
<ul>
<li>-100.0 &lt; x &lt; 100.0</li>
<li>n 是 32 位有符号整数，其数值范围是 [<span
class="math inline">\(−2^{31}\)</span>, <span
class="math inline">\(2^{31} − 1\)</span>] 。</li>
</ul>
<h1 id="begin">begin</h1>
<p>是不是有人就疑惑了，明明有pow可以用，为啥还有这题呢？是啊,但这样就考验到你对基础的理解了。</p>
<p>这里用到的是快速幂算法（使用了分治的思想），知道的都知道了，不知道的慢慢了解嘛。再加上负数的判断处理即可解。</p>
<p>一种java题解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">quickpow</span><span class="params">(<span class="type">double</span> x, <span class="type">long</span> n)</span>&#123;</span><br><span class="line">        <span class="type">double</span> res=<span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>) res*=x;</span><br><span class="line">            x*=x;</span><br><span class="line">            n/=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">myPow</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">long</span> N=n;</span><br><span class="line">        <span class="keyword">return</span> N&gt;=<span class="number">0</span>? quickpow(x,N) : <span class="number">1.0</span>/quickpow(x,-N);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a
href="https://leetcode-cn.com/problems/powx-n/solution/powx-n-by-leetcode-solution/">详细题解</a></p>
<h1 id="删除排序数组中的重复项">26.删除排序数组中的重复项</h1>
<p><a
href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">题目地址</a></p>
<p>给定一个排序数组，你需要在 原地
删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1)
额外空间的条件下完成。</p>
<p>示例1： &gt; 给定数组 nums = [1,1,2],<br />
&gt;函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。
&gt;你不需要考虑数组中超出新长度后面的元素。</p>
<p>示例2： &gt; 给定 nums = [0,0,1,1,1,2,2,3,3,4],<br />
&gt;函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1,
2, 3, 4。<br />
&gt;你不需要考虑数组中超出新长度后面的元素。</p>
<p>说明:</p>
<p>为什么返回数值是整数，但输出的答案是数组呢?</p>
<p>请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>
<p>你可以想象内部操作如下: <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝</span></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> removeDuplicates(nums);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在函数里修改输入数组对于调用者是可见的。</span></span><br><span class="line"><span class="comment">// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="begin-1">begin</h1>
<p>这道题应该是我目前解的最容易的了，原因就是上学期数据结构有个课后题和这个差不多。</p>
<p>解法就是双指针，k指向当前位置，l指向预备移入k+1位置的位置，while循环条件为l到数组末尾，若nums[k]==nums[l],l++，l向后移动；若不等，说明还未出现这个数可以存入数组中，nums[++k]=nums[l]可解决问题，最后返回当前下标k+1即新数组长度。</p>
<p>一种java题解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> k=<span class="number">0</span>,l=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;nums.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[k]==nums[l])</span><br><span class="line">                l++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                nums[++k]=nums[l];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a
href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/solution/">详细题解</a></p>
<h1 id="合并两个有序数组">88.合并两个有序数组</h1>
<p><a
href="https://leetcode-cn.com/problems/merge-sorted-array/">题目地址</a></p>
<p>给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使
nums1 成为一个有序数组。</p>
<p>说明：</p>
<ul>
<li>初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。</li>
<li>你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存
nums2 中的元素。</li>
</ul>
<p>示例1： &gt; 输入:<br />
&gt;nums1 = [1,2,3,0,0,0], m = 3<br />
&gt;nums2 = [2,5,6], n = 3<br />
&gt;输出: [1,2,2,3,5,6]</p>
<h1 id="begin-2">begin</h1>
<p>其实这个题与上面那个题有点类似，可参考着去做，但一定要注意数组范围和是否所有数以加入新数组中了。</p>
<p>官方题解给出了三种解法都用到了下面一个函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.arraycopy(dataType[] srcArray,<span class="type">int</span> srcIndex,<span class="type">int</span> destArray,<span class="type">int</span> destIndex,<span class="type">int</span> length)</span><br><span class="line"><span class="comment">//其中，srcArray 表示原数组；srcIndex 表示原数组中的起始索引；destArray 表示目标数组；destIndex 表示目标数组中的起始索引；length 表示要复制的数组长度。</span></span><br></pre></td></tr></table></figure>
<h1 id="方法一合并后排序">方法一：合并后排序</h1>
<p>简直了，官方这么玩，我直接懵逼。</p>
<p>官方方法一java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span> m, <span class="type">int</span>[] nums2, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    System.arraycopy(nums2, <span class="number">0</span>, nums1, m, n);</span><br><span class="line">    Arrays.sort(nums1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="复杂度分析">复杂度分析</h1>
<ul>
<li>时间复杂度 : <span class="math inline">\(O((n + m)log(n +
m))\)</span>。</li>
<li>空间复杂度 : <span class="math inline">\(O(1)\)</span>。</li>
</ul>
<h1 id="方法二-双指针-从前往后">方法二 : 双指针 / 从前往后</h1>
<p>类似于前一个题，但要注意，前面说的是否所有数以加入新数组中了，还有这个方法需要内存存nums1的原数据。</p>
<p>官方方法二java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span> m, <span class="type">int</span>[] nums2, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="comment">// Make a copy of nums1.</span></span><br><span class="line">    <span class="type">int</span> [] nums1_copy = <span class="keyword">new</span> <span class="title class_">int</span>[m];</span><br><span class="line">    System.arraycopy(nums1, <span class="number">0</span>, nums1_copy, <span class="number">0</span>, m);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Two get pointers for nums1_copy and nums2.</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set pointer for nums1</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Compare elements from nums1_copy and nums2</span></span><br><span class="line">    <span class="comment">// and add the smallest one into nums1.</span></span><br><span class="line">    <span class="keyword">while</span> ((p1 &lt; m) &amp;&amp; (p2 &lt; n))</span><br><span class="line">      nums1[p++] = (nums1_copy[p1] &lt; nums2[p2]) ? nums1_copy[p1++] : nums2[p2++];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if there are still elements to add</span></span><br><span class="line">    <span class="keyword">if</span> (p1 &lt; m)</span><br><span class="line">      System.arraycopy(nums1_copy, p1, nums1, p1 + p2, m + n - p1 - p2);</span><br><span class="line">    <span class="keyword">if</span> (p2 &lt; n)</span><br><span class="line">      System.arraycopy(nums2, p2, nums1, p1 + p2, m + n - p1 - p2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="复杂度分析-1">复杂度分析</h1>
<ul>
<li>时间复杂度 : <span class="math inline">\(O(n + m)\)</span>。</li>
<li>空间复杂度 : <span class="math inline">\(O(m)\)</span>。</li>
</ul>
<h1 id="方法三-双指针-从后往前">方法三 : 双指针 / 从后往前</h1>
<p>想到这个也是绝了，虽然与方法二相比只是从头到尾变为从尾到前，但空间省下来了。</p>
<p>官方方法二java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span> m, <span class="type">int</span>[] nums2, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="comment">// two get pointers for nums1 and nums2</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> m - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// set pointer for nums1</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> m + n - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// while there are still elements to compare</span></span><br><span class="line">    <span class="keyword">while</span> ((p1 &gt;= <span class="number">0</span>) &amp;&amp; (p2 &gt;= <span class="number">0</span>))</span><br><span class="line">      <span class="comment">// compare two elements from nums1 and nums2 </span></span><br><span class="line">      <span class="comment">// and add the largest one in nums1 </span></span><br><span class="line">      nums1[p--] = (nums1[p1] &lt; nums2[p2]) ? nums2[p2--] : nums1[p1--];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add missing elements from nums2</span></span><br><span class="line">    System.arraycopy(nums2, <span class="number">0</span>, nums1, <span class="number">0</span>, p2 + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="复杂度分析-2">复杂度分析</h1>
<ul>
<li>时间复杂度 : <span class="math inline">\(O(n + m)\)</span>。</li>
<li>空间复杂度 : <span class="math inline">\(O(1)\)</span>。</li>
</ul>
<p><a
href="https://leetcode-cn.com/problems/merge-sorted-array/solution/">详细题解</a></p>
<h1 id="总结">总结</h1>
<p>继续，有待提高。</p>
]]></content>
      <tags>
        <tag>数据结构&amp;算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux邮件发送</title>
    <url>/article/51f254be.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p>最近在折腾<code>Linux</code>，想做一点有趣的事情，首先想到就是通过定时任务，做一些通知，原来我就做过<code>Java</code>整合邮件，做一些邮件发送，直到最近我才知道，原来<code>Linux</code>本身就能发送邮件的。</p>
<p>那更好了，直接开始。</p>
<p>参考：</p>
<ul>
<li><p>https://linux.cn/article-11663-1.html</p></li>
<li><p>https://www.jianshu.com/p/d1f757c89826</p></li>
</ul>
<span id="more"></span>
<h1 id="开始">开始</h1>
<p>如果你懒得打开上面的两个链接，那我解释一下，第一个是<code>Linux</code>发送邮件的几种方式，第二个是使用<code>ssl</code>发送邮件的配置方式。</p>
<h2 id="section"></h2>
<h2 id="安装mailx">安装<code>mailx</code></h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install mailx</span><br></pre></td></tr></table></figure>
<h2 id="编辑配置">编辑配置</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/mail.rc</span><br></pre></td></tr></table></figure>
<p>最后添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发出邮件地址</span></span><br><span class="line">set from=example@qq.com</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">smtp配置，与上面对应</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通常不使用ssl，smtp使用25端口，配置采用下面的即可</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用ssl，smtp使用465端口，配置要改为 stmps://smtp.qq.com</span></span><br><span class="line">set smtp=smtp.qq.com                                         </span><br><span class="line">set smtp-auth-user=example@qq.com</span><br><span class="line">set smtp-auth-password=**************</span><br><span class="line">set smtp-auth=login</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果要用ssl就要加上下面的</span></span><br><span class="line">set ssl-verify=ignore</span><br><span class="line">set nss-config-dir=/root/.certs</span><br></pre></td></tr></table></figure>
<h2 id="证书配置">证书配置</h2>
<p>使用<code>ssl</code>，必须要配置证书</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /root/.certs/</span><br><span class="line">echo -n | openssl s_client -connect smtp.qq.com:465 | sed -ne &#x27;/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p&#x27; &gt; ~/.certs/qq.crt</span><br><span class="line">certutil -A -n &quot;GeoTrust SSL CA&quot; -t &quot;C,,&quot; -d ~/.certs -i ~/.certs/qq.crt</span><br><span class="line">certutil -A -n &quot;GeoTrust Global CA&quot; -t &quot;C,,&quot; -d ~/.certs -i ~/.certs/qq.crt</span><br><span class="line">certutil -A -n &quot;GeoTrust SSL CA - G3&quot; -t &quot;Pu,Pu,Pu&quot; -d ~/.certs/./ -i qq.crt</span><br><span class="line">certutil -L -d /root/.certs</span><br></pre></td></tr></table></figure>
<h2 id="测试">测试</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;This is the mail body&quot; | mail -a /home/wnh/apps/spring/application.properties -s &quot;Subject&quot; wnhyang@139.com</span><br></pre></td></tr></table></figure>
<h1 id="补上">补上</h1>
<h2 id="要定时的脚本">要定时的脚本</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">info=&quot;This is the mail body\n磁盘使用情况：\n`df -h`\n内存使用情况：\n`free -h`进程运行情况：\n`top -n 1`&quot;</span><br><span class="line"></span><br><span class="line">zip -r /home/wnh/linux_bak.zip /home/wnh/script /home/wnh/mail /home/wnh/apps</span><br><span class="line"></span><br><span class="line">curl -i -k  -H &quot;Content-type: application/json&quot; -X POST -d &#x27;&#123;&quot;mailbox&quot;: &quot;wnhyang@139.com&quot;,&quot;subject&quot;: &quot;testMail&quot;,&quot;content&quot;: &quot;$&#123;info&#125;&quot;&#125;&#x27; http://127.0.0.1:8093/email/4</span><br><span class="line"></span><br><span class="line">echo -e &quot;$&#123;info&#125;&quot; | mail -a /home/wnh/linux_bak.zip -s &quot;Subject&quot; wnhyang@139.com</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="定时执行">定时执行</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看定时任务</span></span><br><span class="line">crontab -l</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑定时任务</span></span><br><span class="line">crontab -e</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移除定时任务</span></span><br><span class="line">crontab -r</span><br><span class="line"></span><br><span class="line">00 12 * * 5 /home/wnh/script/mail.sh</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac做开发</title>
    <url>/article/30c6026a.html</url>
    <content><![CDATA[<h1 id="提要">提要</h1>
<p>开始实习了，公司配的电脑是Mac，对于Mac我只有在上学期选的一个“ios记事本”的创新实践课程中体会过，但学校那个电脑实在是不太行，整体体验也很差。尽管如此，我还是很期待使用Mac做开发的，毕竟关于Mac的生产能力还是不容置疑的。甚至想着拥有一台属于自己的Mac电脑。</p>
<span id="more"></span>
<h1 id="简介">简介</h1>
<p>Mac做开发有什么不同呢？</p>
<p>首先对于用惯了Windows的用户，还是需要一些适应时间的，毕竟是两个系统，差别还是很大的。</p>
<p>先讲一讲我的体会吧，Mac的触控板真是好用，太舒服了，虽然看过好多吹Mac触控板的，但毕竟也没有真实体会嘛。这下真的是服了，果然好用，第一感觉玩电脑失去鼠标，体验依旧很棒。接下来说一下Mac的做工吧，很精致，屏幕素质很好，很小只有13寸但是很精悍，加上M1芯片的支持，速度没的说。在装卸软件方面，与Windows差别更大了，在Mac上装软件没有那么多复杂的选项，很简洁轻松，不用与软件商斗智斗勇了。</p>
<p>下面说一下我现在在用的软件吧。</p>
<ul>
<li>Chrome</li>
<li>HomeBrew，mac专属装软件环境工具</li>
<li>JDK，不用多说</li>
<li>Git，协作开发</li>
<li>Maven，构建Java项目</li>
<li>IDEA，JavaIDE</li>
<li>Navicat Premium，数据库可视化工具</li>
<li>Postman，API调试、Http请求的工具</li>
<li>JMeter，压测工具</li>
<li>RDM，Redis可视化工具</li>
<li>VSCode，强大编辑器</li>
<li>NDM，下载器配合Chrome插件使用</li>
<li>Docker，虚拟容器</li>
<li>Dash，查文档助手</li>
<li>iTerm，很好用的终端</li>
</ul>
<h1 id="最后">最后</h1>
<p>Mac使用下来还是很棒的，尤其是能感受到M1芯片的强大，这里要注意了，下载软件时要区分是否适配M1芯片，也就是是否支持arm架构，不然很可能出问题，或是无法发挥M1的优势。</p>
<p>M1已经发布一年多了，今年新的M1Pro、M1Max都在M1的基础上，变得更强大了，被用在了新一代的Mac机器上了，所用过的人都体会到了M1系列芯片是有多么强大了。从苹果开始向iPad推广M1芯片，可以看出苹果真的想要将自己的芯片做的更长远的想法，不禁感叹：苹果真的是软硬件都非常强大的公司。跑远了，我想说其实是，在M1芯片推出后，几乎所有厂商都在为适配基于arm架构的M1努力，可见苹果的号召力和影响力啊！不过现在还是有一些欠缺的软件待完善。</p>
<p>最后一句话：Mac强大生产力工具！！！</p>
]]></content>
      <tags>
        <tag>记录</tag>
        <tag>软件/工具</tag>
      </tags>
  </entry>
  <entry>
    <title>MurmurHash算法初探</title>
    <url>/article/3df251b7.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p>简单讨论一下<code>MurmurHash</code>算法，之后会依此做一个简易的短链接项目，尽量快些做出来，分享出来😁</p>
<p>既然是初探，我只会去说怎么使用，至于原理，就留到有机会（<code>doge</code>）再来探究吧😂</p>
<p>在一周前我对这个算法也是闻所未闻，至到我看了这篇<a
href="https://mp.weixin.qq.com/s/YTrBaERcyjvw7A0Fg2Iegw">高性能短链设计</a>文章，才有所了解。</p>
<p>关于<code>MurmurHash</code>算法，可参考<a
href="https://blog.csdn.net/thinkmo/article/details/26833565">Murmurhash介绍与实现</a></p>
<span id="more"></span>
<h1 id="使用">使用</h1>
<p>从上面文章知道，<code>MurmurHash</code>是一种非常高效的加密型哈希算法，随机特征表现的非常好，应用领域也很多，具有较高的平衡性和低碰撞率。</p>
<p>它实现了<code>32</code>位和<code>128</code>位<code>HashKey</code>加密，这里直接使用<code>Google</code>提供的<code>guava</code>。</p>
<p><strong>pom依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>30.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>使用如下</strong></p>
<p>创建<code>HashFunction</code>对象，加密即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">HashFunction</span> <span class="variable">hashFunction</span> <span class="operator">=</span> Hashing.murmur3_32();</span><br><span class="line">    <span class="type">HashCode</span> <span class="variable">hashCode</span> <span class="operator">=</span> hashFunction.hashString(<span class="string">&quot;https://wnhyang.github.io/&quot;</span>, StandardCharsets.UTF_8);</span><br><span class="line">    System.out.println(hashCode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>结果如下</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a453dd36</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>
<p>这里不禁有疑问了？</p>
<p><code>a453dd36</code>是什么东西，第一反应便是<code>16</code>进制数，正好<span
class="math inline">\(4*8=32\)</span>位，很完美</p>
<p>找到<code>HashCode</code>接口，看到下面几个方法，都能看懂吧！？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Beta</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">HashCode</span> &#123;</span><br><span class="line">  HashCode() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Returns the number of bits in this hash code; a positive multiple of 8. */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">bits</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns the first four bytes of &#123;<span class="doctag">@linkplain</span> #asBytes() this hashcode&#x27;s bytes&#125;, converted to an</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@code</span> int&#125; value in little-endian order.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> IllegalStateException if &#123;<span class="doctag">@code</span> bits() &lt; 32&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">asInt</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns the first eight bytes of &#123;<span class="doctag">@linkplain</span> #asBytes() this hashcode&#x27;s bytes&#125;, converted to a</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@code</span> long&#125; value in little-endian order.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> IllegalStateException if &#123;<span class="doctag">@code</span> bits() &lt; 64&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">long</span> <span class="title function_">asLong</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * If this hashcode has enough bits, returns &#123;<span class="doctag">@code</span> asLong()&#125;, otherwise returns a &#123;<span class="doctag">@code</span> long&#125;</span></span><br><span class="line"><span class="comment">   * value with &#123;<span class="doctag">@code</span> asBytes()&#125; as the least-significant bytes and &#123;<span class="doctag">@code</span> 0x00&#125; as the remaining</span></span><br><span class="line"><span class="comment">   * most-significant bytes.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@since</span> 14.0 (since 11.0 as &#123;<span class="doctag">@code</span> Hashing.padToLong(HashCode)&#125;)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">long</span> <span class="title function_">padToLong</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns the value of this hash code as a byte array. The caller may modify the byte array;</span></span><br><span class="line"><span class="comment">   * changes to it will &lt;i&gt;not&lt;/i&gt; be reflected in this &#123;<span class="doctag">@code</span> HashCode&#125; object or any other arrays</span></span><br><span class="line"><span class="comment">   * returned by this method.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// TODO(user): consider ByteString here, when that is available</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">byte</span>[] asBytes();</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>加上这些方法，重新来</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">HashFunction</span> <span class="variable">hashFunction</span> <span class="operator">=</span> Hashing.murmur3_32();</span><br><span class="line">    <span class="type">HashCode</span> <span class="variable">hashCode</span> <span class="operator">=</span> hashFunction.hashString(<span class="string">&quot;https://wnhyang.github.io/&quot;</span>, StandardCharsets.UTF_8);</span><br><span class="line">    System.out.print(hashCode.asInt() + <span class="string">&quot;    &quot;</span>);</span><br><span class="line">    System.out.print(hashCode.padToLong() + <span class="string">&quot;    &quot;</span>);</span><br><span class="line">    System.out.print(hashCode.asBytes() + <span class="string">&quot;    &quot;</span>);</span><br><span class="line">    System.out.print(hashCode.bits() + <span class="string">&quot;    &quot;</span>);</span><br><span class="line">    System.out.println(hashCode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新结果就很舒服了，<span
class="math inline">\(2^{32}=4,294,967,296\)</span>，也就是说，<code>32</code>位的<code>MurmurHash</code>算法最多可以有近<code>43</code>亿，按上面短链接的方法转为<code>62</code>进制，<code>6</code>位足矣，<span
class="math inline">\(62^{6}=56,800,235,584\)</span>，有<code>568</code>亿呢。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">920474532    920474532    [B@76ed5528    32    a453dd36</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>
<p>可是，之后测试了同样的代码，只是把要加密的<code>url</code>变为<code>https://blog.csdn.net/freda1997/article/details/105199265</code>便出现问题了。</p>
<p><strong>意料之外的结果</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-503738096    3791229200    [B@76ed5528    32    1091f9e1</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>
<p>从上面<code>HashCode</code>接口的方法可知<code>asInt()</code>和<code>padToLong()</code>区别就在这，从<code>Java</code>基础或者说是计算机基础可知数有有符号数和无符号数一说。有符号数第一位表示符号范围为[<span
class="math inline">\(-2^{n-1}\)</span>,<span
class="math inline">\(2^{n-1}-1\)</span>]，无符号数则没有首位的限制。所以能容易想到是<code>int</code>数值溢出了。</p>
<p><strong>测试验证</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">HashFunction</span> <span class="variable">hashFunction</span> <span class="operator">=</span> Hashing.murmur3_32();</span><br><span class="line">    <span class="type">HashCode</span> <span class="variable">hashCode</span> <span class="operator">=</span> hashFunction.hashString(<span class="string">&quot;https://blog.csdn.net/freda1997/article/details/105199265&quot;</span>, StandardCharsets.UTF_8);</span><br><span class="line">    System.out.print(hashCode.asInt() + <span class="string">&quot;    &quot;</span>);</span><br><span class="line">    System.out.print(hashCode.padToLong() + <span class="string">&quot;    &quot;</span>);</span><br><span class="line">    System.out.print(hashCode.asBytes() + <span class="string">&quot;    &quot;</span>);</span><br><span class="line">    System.out.print(hashCode.bits() + <span class="string">&quot;    &quot;</span>);</span><br><span class="line">    System.out.println(hashCode);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">d</span> <span class="operator">=</span> (<span class="type">int</span>) hashCode.padToLong();</span><br><span class="line">    System.out.println(d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>果然</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-503738096    3791229200    [B@76ed5528    32    1091f9e1</span><br><span class="line">-503738096</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>
<p>上面就展示了怎么使用<code>MurmurHash</code>算法，之后就可着手开始短链接项目了。😏</p>
]]></content>
      <tags>
        <tag>数据结构&amp;算法</tag>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis（一）</title>
    <url>/article/3806e68f.html</url>
    <content><![CDATA[<p>因为内容太多了，所以将其拆分为以下内容</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/3806e68f.html">MyBatis(一)（当前）</a></li>
<li><a
href="https://wnhyang.github.io/article/8100a57.html">MyBatis(二)</a></li>
<li><a
href="https://wnhyang.github.io/article/450ea905.html">MyBatis(三)</a></li>
</ul>
<h1 id="参考">参考</h1>
<p><a
href="https://www.bilibili.com/video/BV1NE411Q7Nx">https://www.bilibili.com/video/BV1NE411Q7Nx</a></p>
<p><a
href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p>
<span id="more"></span>
<h1 id="mybatis">Mybatis</h1>
<h1 id="简介">简介</h1>
<h2 id="什么是-mybatis">什么是 MyBatis？</h2>
<figure>
<img data-src="https://mybatis.org/images/mybatis-logo.png" alt="Mybatis" />
<figcaption aria-hidden="true">Mybatis</figcaption>
</figure>
<p>MyBatis 是一款优秀的持久层框架，它支持自定义
SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC
代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML
或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java
Objects，普通老式 Java 对象）为数据库中的记录。</p>
<h2 id="使用">使用</h2>
<ul>
<li><p>要使用 MyBatis， 只需将 <a
href="https://github.com/mybatis/mybatis-3/releases">mybatis-x.x.x.jar</a>
文件置于类路径（classpath）中即可。</p>
<p>如果使用 Maven 来构建项目，则需将下面的依赖代码置于 pom.xml
文件中：</p></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Github：<a
href="https://github.com/mybatis/mybatis-3">https://github.com/mybatis/mybatis-3</a></li>
<li>中文文档：<a
href="https://github.com/tuguangquan/mybatis">https://github.com/tuguangquan/mybatis</a></li>
<li>参考：<a
href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></li>
</ul>
<h1 id="作用域scope和生命周期">作用域（Scope）和生命周期</h1>
<h2 id="sqlsessionfactorybuilder">SqlSessionFactoryBuilder</h2>
<p>这个类可以被实例化、使用和丢弃，一旦创建了
SqlSessionFactory，就不再需要它了。 因此 SqlSessionFactoryBuilder
实例的最佳作用域是方法作用域（也就是局部方法变量）。 你可以重用
SqlSessionFactoryBuilder 来创建多个 SqlSessionFactory
实例，但最好还是不要一直保留着它，以保证所有的 XML
解析资源可以被释放给更重要的事情。</p>
<h2 id="sqlsessionfactory">SqlSessionFactory</h2>
<p>SqlSessionFactory
一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。
使用 SqlSessionFactory
的最佳实践是在应用运行期间不要重复创建多次，多次重建 SqlSessionFactory
被视为一种代码“坏习惯”。因此 SqlSessionFactory
的最佳作用域是应用作用域。
有很多方法可以做到，最简单的就是使用单例模式或者静态单例模式。</p>
<h2 id="sqlsession">SqlSession</h2>
<p>每个线程都应该有它自己的 SqlSession 实例。SqlSession
的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。
绝对不能将 SqlSession
实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。 也绝不能将
SqlSession 实例的引用放在任何类型的托管作用域中，比如 Servlet 框架中的
HttpSession。 如果你现在正在使用一种 Web 框架，考虑将 SqlSession
放在一个和 HTTP 请求相似的作用域中。 换句话说，每次收到 HTTP
请求，就可以打开一个 SqlSession，返回一个响应后，就关闭它。
这个关闭操作很重要，为了确保每次都能执行关闭操作，你应该把这个关闭操作放到
finally 块中。</p>
<h1 id="mybatis上手">Mybatis上手</h1>
<h2 id="搭建环境">搭建环境</h2>
<p>MySQL5.7 + IDEA + Navicat Premium</p>
<h3 id="创建数据库">创建数据库</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">user</span> mybatis;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `<span class="keyword">user</span>`(</span><br><span class="line">	`id` <span class="type">INT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">	`name` <span class="type">VARCHAR</span> (<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	`pwd` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>UTF8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">USER</span>(id,name,pwd) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;123789&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;456789&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="新建项目">新建项目</h3>
<p>普通的 maven 项目</p>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="核心配置">核心配置</h3>
<p>mybatis-config.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="工具类">工具类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="编写代码">编写代码</h2>
<h3 id="实体类">实体类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, String name, String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPwd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPwd</span><span class="params">(String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="dao接口">Dao接口</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="mapper-配置文件">Mapper 配置文件</h3>
<p>接口实现类由原来的 Impl 转为 Mapper 配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.dao.UserMapper&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">&quot;getUserList&quot;</span> resultType=<span class="string">&quot;com.pojo.User&quot;</span>&gt;</span><br><span class="line">        select * from user</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>
<h3 id="测试">测试</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtil.getSqlSession();</span><br><span class="line"></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = mapper.getUserList();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="crud">CRUD</h1>
<h2 id="namespace">namespace</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>namespace 绑定对应 Mapper 接口</p>
<h2 id="select">select</h2>
<p>选择，查询语句；</p>
<ul>
<li>id：就是对应的 namespace 中的方法名</li>
<li>resultType：sql 语句执行的返回值</li>
<li>parameterType：参数类型</li>
</ul>
<p>1、编写接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>
<p>2、编写对应的 Mapper 配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtil.getSqlSession();</span><br><span class="line"></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.getUserById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="insert">insert</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    insert into user(id, name, pwd) values (#&#123;id&#125;, #&#123;name&#125;, #&#123;pwd&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="update">update</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    update user set name = #&#123;name&#125;,pwd=#&#123;pwd&#125; where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="delete">delete</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    delete from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="注意">注意：</h2>
<p>增删改需要提交事务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="parametertype">parameterType</h2>
<ul>
<li>map</li>
<li>Object</li>
<li>基本类型</li>
</ul>
<h2 id="分页">分页</h2>
<p><strong>方式一：</strong>limit实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByPage&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>方式二：</strong>RowBounds实现（了解）</p>
<p>java 对象层面实现分页</p>
<p><strong>方式三：</strong>插件（了解）</p>
<p>Mybatis-PageHelper</p>
<h1 id="配置">配置</h1>
<p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。</p>
<ul>
<li><p>mybatis-config.xml</p></li>
<li><p>配置文档的顶层结构如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">configuration（配置）</span><br><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>注意：</strong></p>
<p>xml 标签有顺序</p>
<p>The content of element type "configuration" must match
"(properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?)".</p>
<h2 id="属性properties">属性（properties）</h2>
<p>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java
属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。</p>
<p>编写配置文件</p>
<p>db.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>
<p>使用8.0以上驱动与要加上<code>serverTimezone=UTC</code></p>
<p>在核心配置文件加入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以引入外部配置也可以直接增加属性，但优先使用外部配置</p>
<h2 id="设置settings">设置（settings）</h2>
<h2 id="类型别名typealiases">类型别名（typeAliases）</h2>
<p>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML
配置，意在降低冗余的全限定类名书写。</p>
<p><strong>方式一：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.pojo.User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span> <span class="comment">&lt;!-- resultType 与上配置的 alias 一致 --&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>方式二：</strong></p>
<p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>每一个实体类包 中的 Java Bean，在没有注解的情况下，会使用 Bean
的首字母小写的非限定类名来作为它的别名。</p>
<p>若有注解，则别名为其注解值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;author&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Author</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="环境配置environments">环境配置（environments）</h2>
<p>MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL
映射应用于多种数据库之中，
现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；或者想在具有相同
Schema 的多个生产数据库中使用相同的 SQL
映射。还有许多类似的使用场景。</p>
<p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory
实例只能选择一种环境。</strong></p>
<p><strong>事务管理器（transactionManager）</strong></p>
<p>在 MyBatis 中有两种类型的事务管理器（也就是
type="[JDBC|MANAGED]"）</p>
<p>默认 JDBC</p>
<p><strong>数据源（dataSource）</strong></p>
<p>dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC
连接对象的资源。有三种内建的数据源类型（也就是
type="[UNPOOLED|POOLED|JNDI]"）</p>
<p>默认 POOLED</p>
<h2 id="其他配置">其他配置</h2>
<p><strong>类型处理器（typeHandlers）</strong></p>
<p><strong>处理枚举类型</strong></p>
<p><strong>对象工厂（objectFactory）</strong></p>
<p><strong>插件（plugins）</strong></p>
<h2 id="映射器mappers">映射器（mappers）</h2>
<p><strong>方式一：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>方式二：</strong>使用 class 文件绑定注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>接口和它的 Mapper 配置文件必须同名</li>
<li>接口和它的 Mapper 配置文件必须在同一包下</li>
</ul>
<p><strong>方式三：</strong>使用扫描包进行注入绑定</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>接口和它的 Mapper 配置文件必须同名</li>
<li>接口和它的 Mapper 配置文件必须在同一包下</li>
</ul>
<h1 id="结果映射">结果映射</h1>
<p><code>resultMap</code> 元素是 MyBatis
中最重要最强大的元素。它可以让你从 90% 的 JDBC <code>ResultSets</code>
数据提取代码中解放出来，并在一些情形下允许你进行一些 JDBC
不支持的操作。实际上，在为一些比如连接的复杂语句编写映射代码的时候，一份
<code>resultMap</code> 能够代替实现同等功能的数千行代码。ResultMap
的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。</p>
<p>MyBatis 会在幕后自动创建一个
<code>ResultMap</code>，再根据属性名来映射列到 JavaBean
的属性上。如果列名和属性名不能匹配上，需要显式配置
<code>ResultMap</code>，这就是 <code>ResultMap</code>
的优秀之处——你完全可以不用显式地配置它们。</p>
<p>解决属性名与字段名不一致的问题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面实体类 User，pwd 属性改为 password，查询 password 为 null</p>
<p>解决问题：</p>
<ul>
<li>起别名</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select id,name,pwd as password from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>结果集映射 ResultMap</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>column 指数据库字段，property 指实体类属性</p>
<p>注意因为上面前两个都是一一对应的，可以省去，只剩下不同的，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>因为内容太多了，所以将其拆分为以下内容</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/3806e68f.html">MyBatis(一)（当前）</a></li>
<li><a
href="https://wnhyang.github.io/article/8100a57.html">MyBatis(二)</a></li>
<li><a
href="https://wnhyang.github.io/article/450ea905.html">MyBatis(三)</a></li>
</ul>
]]></content>
      <tags>
        <tag>Spring Framework</tag>
        <tag>Mybatis/Mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis（三）</title>
    <url>/article/450ea905.html</url>
    <content><![CDATA[<p>因为内容太多了，所以将其拆分为以下内容</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/3806e68f.html">MyBatis(一)</a></li>
<li><a
href="https://wnhyang.github.io/article/8100a57.html">MyBatis(二)</a></li>
<li><a
href="https://wnhyang.github.io/article/450ea905.html">MyBatis(三)（当前）</a></li>
</ul>
<h1 id="参考">参考</h1>
<p><a
href="https://www.bilibili.com/video/BV1NE411Q7Nx">https://www.bilibili.com/video/BV1NE411Q7Nx</a></p>
<p><a
href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p>
<span id="more"></span>
<h1 id="动态-sql">动态 SQL</h1>
<p>动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC
或其它类似的框架，你应该能理解根据不同条件拼接 SQL
语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态
SQL，可以彻底摆脱这种痛苦。</p>
<p>使用动态 SQL 并非一件易事，但借助可用于任何 SQL
映射语句中的强大的动态 SQL 语言，MyBatis
显著地提升了这一特性的易用性。</p>
<p>如果你之前用过 JSTL 或任何基于类 XML 语言的文本处理器，你对动态 SQL
元素可能会感觉似曾相识。在 MyBatis
之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL
的表达式，MyBatis 3
替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。</p>
<ul>
<li>if</li>
<li>choose (when, otherwise)</li>
<li>trim (where, set)</li>
<li>foreach</li>
</ul>
<h2 id="数据库准备">数据库准备</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `blog`(</span><br><span class="line">`id` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客id&#x27;</span>,</span><br><span class="line">`title` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客标题&#x27;</span>,</span><br><span class="line">`author` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客作者&#x27;</span>,</span><br><span class="line">`create_time` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`views` <span class="type">INT</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;浏览量&#x27;</span></span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure>
<p><strong>实体类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Blog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> views;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>接口和对应的 Mapper.xml</strong></p>
<p>。。。</p>
<p><strong>mybatis 配置略</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// true : 自动提交事务</span></span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>mapUnderscoreToCamelCase：驼峰命名自动映射</p>
<h2 id="if">If</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;QueryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">        and title=#&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">        and author=#&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryBlogIf</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtil.getSqlSession();</span><br><span class="line">    <span class="type">BlogMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">    Map&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;author&quot;</span>,<span class="string">&quot;老杨&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.QueryBlogIf(map);</span><br><span class="line">    <span class="keyword">for</span> (Blog blog : blogs) &#123;</span><br><span class="line">        System.out.println(blog);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="choosewhenotherwise">choose、when、otherwise</h2>
<p>有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，MyBatis
提供了 choose 元素，它有点像 Java 中的 switch 语句。</p>
<h2 id="trimwhereset">trim、where、set</h2>
<p><strong>where</strong></p>
<p><em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE”
子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em>
元素也会将它们去除。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;QueryBlogChoose&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">                title=#&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">                and author=#&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and views &gt;#&#123;view&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryBlogChoose</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtil.getSqlSession();</span><br><span class="line">    <span class="type">BlogMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">    Map&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// map.put(&quot;title&quot;,&quot;Java&quot;);</span></span><br><span class="line">    map.put(<span class="string">&quot;author&quot;</span>,<span class="string">&quot;老杨&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;view&quot;</span>,<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.QueryBlogChoose(map);</span><br><span class="line">    <span class="keyword">for</span> (Blog blog : blogs) &#123;</span><br><span class="line">        System.out.println(blog);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>set</strong></p>
<p><em>set</em> 元素会动态地在行首插入 SET
关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    update blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">            title=#&#123;title&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">            author=#&#123;author&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBlog</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtil.getSqlSession();</span><br><span class="line">    <span class="type">BlogMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">    Map&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;c3e4fcff19c64a4b8503883b4b999091&quot;</span>);</span><br><span class="line">    <span class="comment">// map.put(&quot;title&quot;,&quot;C&quot;);</span></span><br><span class="line">    map.put(<span class="string">&quot;author&quot;</span>,<span class="string">&quot;小杨&quot;</span>);</span><br><span class="line"></span><br><span class="line">    mapper.updateBlog(map);</span><br><span class="line">	sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>trim</strong></p>
<p><a
href="https://blog.csdn.net/wt_better/article/details/80992014">参考</a></p>
<p><strong>sql片段</strong></p>
<p>抽取公共部分，方便复用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">        and title=#&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">        and author=#&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;QueryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="foreach">foreach</h2>
<p><em>foreach</em>
元素的功能非常强大，它允许你指定一个集合，声明可以在元素体内使用的集合项（item）和索引（index）变量。它也允许你指定开头与结尾的字符串以及集合项迭代之间的分隔符。这个元素也不会错误地添加多余的分隔符，看它多智能！</p>
<p><strong>官方示例</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPostIn&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;domain.blog.Post&quot;</span>&gt;</span></span><br><span class="line">  SELECT *</span><br><span class="line">  FROM POST P</span><br><span class="line">  WHERE ID in</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>自己来</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogForeach&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;and (&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>open 开始符，close 结束符，separator 分隔符</p>
<p><strong>测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryBlogForeach</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtil.getSqlSession();</span><br><span class="line">    <span class="type">BlogMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">    Map&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; ids=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// ids.add(1);</span></span><br><span class="line">    <span class="comment">// ids.add(2);</span></span><br><span class="line">    map.put(<span class="string">&quot;ids&quot;</span>,ids);</span><br><span class="line"></span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.queryBlogForeach(map);</span><br><span class="line">    <span class="keyword">for</span> (Blog blog : blogs) &#123;</span><br><span class="line">        System.out.println(blog);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="缓存">缓存</h1>
<p>MyBatis
内置了一个强大的事务性查询缓存机制，它可以非常方便地配置和定制。
为了使它更加强大而且易于配置，我们对 MyBatis 3
中的缓存实现进行了许多改进。</p>
<p>默认情况下，只启用了本地的会话缓存，它仅仅对一个会话中的数据进行缓存。</p>
<p>基本上就是这样。这个简单语句的效果如下:</p>
<ul>
<li>映射语句文件中的所有 select 语句的结果将会被缓存。</li>
<li>映射语句文件中的所有 insert、update 和 delete 语句会刷新缓存。</li>
<li>缓存会使用最近最少使用算法（LRU, Least Recently
Used）算法来清除不需要的缓存。</li>
<li>缓存不会定时进行刷新（也就是说，没有刷新间隔）。</li>
<li>缓存会保存列表或对象（无论查询方法返回哪种）的 1024 个引用。</li>
<li>缓存会被视为读/写缓存，这意味着获取到的对象并不是共享的，可以安全地被调用者修改，而不干扰其他调用者或线程所做的潜在修改。</li>
</ul>
<p><strong>提示</strong> 缓存只作用于 cache
标签所在的映射文件中的语句。如果你混合使用 Java API 和 XML
映射文件，在共用接口中的语句将不会被默认缓存。你需要使用 <span
class="citation"
data-cites="CacheNamespaceRef">@CacheNamespaceRef</span>
注解指定缓存作用域。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryBlogById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtil.getSqlSession();</span><br><span class="line">    <span class="type">BlogMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(BlogMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">Blog</span> <span class="variable">blog1</span> <span class="operator">=</span> mapper.queryBlogById(<span class="number">1</span>);</span><br><span class="line">    <span class="type">Blog</span> <span class="variable">blog2</span> <span class="operator">=</span> mapper.queryBlogById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(blog1==blog2);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>默认开启一级缓存，如下只会查询一次</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Opening JDBC Connection</span><br><span class="line">Created connection 555273695.</span><br><span class="line">==&gt;  Preparing: select * from blog where id = ? </span><br><span class="line">==&gt; Parameters: 1(Integer)</span><br><span class="line">&lt;==    Columns: id, title, author, create_time, views</span><br><span class="line">&lt;==        Row: 1, Mybatis, 老杨, 2021-02-08 11:00:41, 9999</span><br><span class="line">&lt;==      Total: 1</span><br><span class="line">true</span><br><span class="line">Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@2118cddf]</span><br><span class="line">Returned connection 555273695 to pool.</span><br></pre></td></tr></table></figure>
<h2 id="使用"><strong>使用</strong></h2>
<p>1、开启全局缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启全局缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnable&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、在要使用的的 Mapper 中加上</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以自定义参数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">  <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、测试</p>
<p><a
href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#cache">官网</a></p>
<h2 id="参考-1"><a
href="https://blog.csdn.net/weixin_37139197/article/details/82908377">参考</a></h2>
<p>因为内容太多了，所以将其拆分为以下内容</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/3806e68f.html">MyBatis(一)</a></li>
<li><a
href="https://wnhyang.github.io/article/8100a57.html">MyBatis(二)</a></li>
<li><a
href="https://wnhyang.github.io/article/450ea905.html">MyBatis(三)（当前）</a></li>
</ul>
]]></content>
      <tags>
        <tag>Spring Framework</tag>
        <tag>Mybatis/Mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis（二）</title>
    <url>/article/8100a57.html</url>
    <content><![CDATA[<p>因为内容太多了，所以将其拆分为以下内容</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/3806e68f.html">MyBatis(一)</a></li>
<li><a
href="https://wnhyang.github.io/article/8100a57.html">MyBatis(二)（当前）</a></li>
<li><a
href="https://wnhyang.github.io/article/450ea905.html">MyBatis(三)</a></li>
</ul>
<h1 id="参考">参考</h1>
<p><a
href="https://www.bilibili.com/video/BV1NE411Q7Nx">https://www.bilibili.com/video/BV1NE411Q7Nx</a></p>
<p><a
href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p>
<span id="more"></span>
<h1 id="日志">日志</h1>
<h2 id="日志工厂">日志工厂</h2>
<table>
<colgroup>
<col style="width: 5%" />
<col style="width: 42%" />
<col style="width: 47%" />
<col style="width: 4%" />
</colgroup>
<thead>
<tr class="header">
<th>设置名</th>
<th>描述</th>
<th>有效值</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>logImpl</td>
<td>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td>
<td>SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING |
STDOUT_LOGGING | NO_LOGGING</td>
<td>未设置</td>
</tr>
</tbody>
</table>
<p>Mybatis
通过使用内置的日志工厂提供日志功能。内置日志工厂将会把日志工作委托给下面的实现之一：</p>
<ul>
<li>SLF4J</li>
<li>Apache Commons Logging</li>
<li>Log4j 2</li>
<li>Log4j</li>
<li>JDK logging</li>
</ul>
<h2 id="配置日志">配置日志</h2>
<p>核心配置加入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试结果：</p>
<figure class="highlight plaintext"><figcaption><span>initialized using 'class org.apache.ibatis.logging.stdout.StdOutImpl' adapter.</span></figcaption><table><tr><td class="code"><pre><span class="line">PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">Opening JDBC Connection</span><br><span class="line">Created connection 1658699134.</span><br><span class="line">Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@62ddbd7e]</span><br><span class="line">==&gt;  Preparing: select * from user where id = ? </span><br><span class="line">==&gt; Parameters: 1(Integer)</span><br><span class="line">&lt;==    Columns: id, name, pwd</span><br><span class="line">&lt;==        Row: 1, 张三, 123456</span><br><span class="line">&lt;==      Total: 1</span><br><span class="line">User0&#123;id=1, name=&#x27;张三&#x27;, password=&#x27;123456&#x27;&#125;</span><br><span class="line">Resetting autocommit to true on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@62ddbd7e]</span><br><span class="line">Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@62ddbd7e]</span><br><span class="line">Returned connection 1658699134 to pool.</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h2 id="log4j">Log4j</h2>
<p>Log4j是<a
href="https://baike.baidu.com/item/Apache/8512995">Apache</a>的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、<a
href="https://baike.baidu.com/item/GUI">GUI</a>组件，甚至是套接口服务器、<a
href="https://baike.baidu.com/item/NT/3443842">NT</a>的事件记录器、<a
href="https://baike.baidu.com/item/UNIX">UNIX</a> <a
href="https://baike.baidu.com/item/Syslog">Syslog</a><a
href="https://baike.baidu.com/item/守护进程/966835">守护进程</a>等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。最令人感兴趣的就是，这些可以通过一个<a
href="https://baike.baidu.com/item/配置文件/286550">配置文件</a>来灵活地进行配置，而不需要修改应用的代码。</p>
<p>1、导入 log4j 包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、log4j.properties</p>
<p>详细配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># priority  :debug&lt;info&lt;warn&lt;error</span></span><br><span class="line"><span class="comment">#you cannot specify every priority with different file for log4j </span></span><br><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">debug,stdout,info,debug,warn,error </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">#console</span></span><br><span class="line"><span class="attr">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender </span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout </span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout.ConversionPattern</span>= <span class="string">[%d&#123;yyyy-MM-dd HH:mm:ss a&#125;]:%p %l%m%n</span></span><br><span class="line"><span class="comment">#info log</span></span><br><span class="line"><span class="attr">log4j.logger.info</span>=<span class="string">info</span></span><br><span class="line"><span class="attr">log4j.appender.info</span>=<span class="string">org.apache.log4j.DailyRollingFileAppender </span></span><br><span class="line"><span class="attr">log4j.appender.info.DatePattern</span>=<span class="string">&#x27;_&#x27;yyyy-MM-dd&#x27;.log&#x27;</span></span><br><span class="line"><span class="attr">log4j.appender.info.File</span>=<span class="string">./src/com/hp/log/info.log</span></span><br><span class="line"><span class="attr">log4j.appender.info.Append</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">log4j.appender.info.Threshold</span>=<span class="string">INFO</span></span><br><span class="line"><span class="attr">log4j.appender.info.layout</span>=<span class="string">org.apache.log4j.PatternLayout </span></span><br><span class="line"><span class="attr">log4j.appender.info.layout.ConversionPattern</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss a&#125; [Thread: %t][ Class:%c &gt;&gt; Method: %l ]%n%p:%m%n</span></span><br><span class="line"><span class="comment">#debug log</span></span><br><span class="line"><span class="attr">log4j.logger.debug</span>=<span class="string">debug</span></span><br><span class="line"><span class="attr">log4j.appender.debug</span>=<span class="string">org.apache.log4j.DailyRollingFileAppender </span></span><br><span class="line"><span class="attr">log4j.appender.debug.DatePattern</span>=<span class="string">&#x27;_&#x27;yyyy-MM-dd&#x27;.log&#x27;</span></span><br><span class="line"><span class="attr">log4j.appender.debug.File</span>=<span class="string">./src/com/hp/log/debug.log</span></span><br><span class="line"><span class="attr">log4j.appender.debug.Append</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">log4j.appender.debug.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.appender.debug.layout</span>=<span class="string">org.apache.log4j.PatternLayout </span></span><br><span class="line"><span class="attr">log4j.appender.debug.layout.ConversionPattern</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss a&#125; [Thread: %t][ Class:%c &gt;&gt; Method: %l ]%n%p:%m%n</span></span><br><span class="line"><span class="comment">#warn log</span></span><br><span class="line"><span class="attr">log4j.logger.warn</span>=<span class="string">warn</span></span><br><span class="line"><span class="attr">log4j.appender.warn</span>=<span class="string">org.apache.log4j.DailyRollingFileAppender </span></span><br><span class="line"><span class="attr">log4j.appender.warn.DatePattern</span>=<span class="string">&#x27;_&#x27;yyyy-MM-dd&#x27;.log&#x27;</span></span><br><span class="line"><span class="attr">log4j.appender.warn.File</span>=<span class="string">./src/com/hp/log/warn.log</span></span><br><span class="line"><span class="attr">log4j.appender.warn.Append</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">log4j.appender.warn.Threshold</span>=<span class="string">WARN</span></span><br><span class="line"><span class="attr">log4j.appender.warn.layout</span>=<span class="string">org.apache.log4j.PatternLayout </span></span><br><span class="line"><span class="attr">log4j.appender.warn.layout.ConversionPattern</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss a&#125; [Thread: %t][ Class:%c &gt;&gt; Method: %l ]%n%p:%m%n</span></span><br><span class="line"><span class="comment">#error</span></span><br><span class="line"><span class="attr">log4j.logger.error</span>=<span class="string">error</span></span><br><span class="line"><span class="attr">log4j.appender.error</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.error.DatePattern</span>=<span class="string">&#x27;_&#x27;yyyy-MM-dd&#x27;.log&#x27;</span></span><br><span class="line"><span class="attr">log4j.appender.error.File</span> = <span class="string">./src/com/hp/log/error.log </span></span><br><span class="line"><span class="attr">log4j.appender.error.Append</span> = <span class="string">true</span></span><br><span class="line"><span class="attr">log4j.appender.error.Threshold</span> = <span class="string">ERROR </span></span><br><span class="line"><span class="attr">log4j.appender.error.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.error.layout.ConversionPattern</span> = <span class="string">%d&#123;yyyy-MM-dd HH:mm:ss a&#125; [Thread: %t][ Class:%c &gt;&gt; Method: %l ]%n%p:%m%n</span></span><br></pre></td></tr></table></figure>
<p>略简版</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="attr">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="attr">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="attr">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.file.File</span>=<span class="string">./log/wnhyang.log</span></span><br><span class="line"><span class="attr">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="attr">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="attr">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>
<p>极简版</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局日志配置</span></span><br><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">ERROR,stdout</span></span><br><span class="line"><span class="comment"># MyBatis 日志配置</span></span><br><span class="line"><span class="attr">log4j.logger.org.mybatis.example.BlogMapper</span>=<span class="string">TRACE</span></span><br><span class="line"><span class="comment"># 控制台输出</span></span><br><span class="line"><span class="attr">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%5p [%t] - %m%n</span></span><br></pre></td></tr></table></figure>
<p>3、配置 log4j</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4、测试运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[org.apache.ibatis.logging.LogFactory]-Logging initialized using &#x27;class org.apache.ibatis.logging.log4j.Log4jImpl&#x27; adapter.</span><br><span class="line">[org.apache.ibatis.datasource.pooled.PooledDataSource]-PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">[org.apache.ibatis.datasource.pooled.PooledDataSource]-PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">[org.apache.ibatis.datasource.pooled.PooledDataSource]-PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">[org.apache.ibatis.datasource.pooled.PooledDataSource]-PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Opening JDBC Connection</span><br><span class="line">[org.apache.ibatis.datasource.pooled.PooledDataSource]-Created connection 279593458.</span><br><span class="line">[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@10aa41f2]</span><br><span class="line">[com.dao.UserMapper.getUserById]-==&gt;  Preparing: select * from user where id = ? </span><br><span class="line">[com.dao.UserMapper.getUserById]-==&gt; Parameters: 1(Integer)</span><br><span class="line">[com.dao.UserMapper.getUserById]-&lt;==      Total: 1</span><br><span class="line">User0&#123;id=1, name=&#x27;张三&#x27;, password=&#x27;123456&#x27;&#125;</span><br><span class="line">[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Resetting autocommit to true on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@10aa41f2]</span><br><span class="line">[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@10aa41f2]</span><br><span class="line">[org.apache.ibatis.datasource.pooled.PooledDataSource]-Returned connection 279593458 to pool.</span><br></pre></td></tr></table></figure>
<p><strong>简单使用：</strong></p>
<p>1、在要使用 Log4j 的类中，导入包
<code>import org.apache.log4j.Logger;</code></p>
<p>2、日志对象，参数为当前的class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Logger logger=  Logger.getLogger(UserDaoTest.class);</span><br></pre></td></tr></table></figure>
<p>3、日志级别</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.info(<span class="string">&quot;info：进入了testLog4j&quot;</span>);</span><br><span class="line">logger.debug(<span class="string">&quot;debug：进入了testLog4j&quot;</span>);</span><br><span class="line">logger.error(<span class="string">&quot;error：进入了testLog4j&quot;</span>);</span><br></pre></td></tr></table></figure>
<h1 id="注解开发">注解开发</h1>
<p>使用注解来映射简单语句会使代码显得更加简洁，但对于稍微复杂一点的语句，Java
注解不仅力不从心，还会让你本就复杂的 SQL 语句更加混乱不堪。
因此，如果你需要做一些很复杂的操作，最好用 XML 来映射语句。</p>
<p>1、接口方法上加上注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
<p>2、核心配置绑定接口</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/dao/UserMapper.class&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>xml 与注解同时使用需要：接口和它的 Mapper
配置文件必须同名且必须在同一包下，并配置 xml</p>
<p>3、测试</p>
<p>本质：反射机制实现</p>
<p>底层：动态代理</p>
<h2 id="crud">CRUD</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select()</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">@Insert()</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">@Update()</span></span><br><span class="line">....</span><br><span class="line"><span class="meta">@Delete()</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><strong>关于 <span class="citation"
data-cites="Param">@Param</span>() 注解</strong></p>
<ul>
<li>8基本类型 + String 类型，需要加上</li>
<li>引用类型不用加</li>
<li>只有一个基本类型，可以忽略，但建议加上</li>
<li>在 sql 中引用的就是我们这里的 <span class="citation"
data-cites="Param">@Param</span>() 中设定的属性名</li>
</ul>
<h2 id="区别">#{} ${} 区别</h2>
<p><strong>参考：</strong></p>
<p><a
href="https://www.bilibili.com/video/BV1gs411j7kA">MyBatis视频教程</a></p>
<p>[#{}与<span
class="math inline">\({}的区别](https://blog.csdn.net/qian_qian_123/article/details/92844194?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522160759025519726885835134%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&amp;request_id=160759025519726885835134&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-3-92844194.pc_search_result_no_baidu_js&amp;utm_term=#{}%E4%B8%8E\)</span>{}%E5%8C%BA%E5%88%AB)</p>
<h2 id="mybatis-详细执行流程">Mybatis 详细执行流程</h2>
<p><a
href="https://louluan.blog.csdn.net/article/details/40422941?utm_medium=distribute.pc_relevant.none-task-blog-searchFromBaidu-9.baidujs&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-searchFromBaidu-9.baidujs">参考</a></p>
<h1 id="复杂查询">复杂查询</h1>
<h2 id="数据库准备">数据库准备</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `teacher` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher(`id`, `name`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;老杨&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `fktid` (`tid`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `fktid` <span class="keyword">FOREIGN</span> KEY (`tid`) <span class="keyword">REFERENCES</span> `teacher` (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;1&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;1&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;小张&#x27;</span>, <span class="string">&#x27;1&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;小李&#x27;</span>, <span class="string">&#x27;1&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;小王&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="配置">配置</h2>
<p><strong>实体类（使用了 Lombok 插件）</strong></p>
<p>Teacher</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Student</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>接口和对应的 Mapper.xml</strong></p>
<p>注意放在同一包下，且命名相同，如下模板</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.dao.xxxMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="核心配置">核心配置</h2>
<p>如果需要的话修改 db.properties</p>
<p>mybatis-config.xml 修改</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 数据库配置要正确 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span> <span class="comment">&lt;!-- 自带日志开启 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span> <span class="comment">&lt;!-- 扫描包取别名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span> <span class="comment">&lt;!-- 需要的修改 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/dao/TeacherMapper.xml&quot;</span>/&gt;</span> <span class="comment">&lt;!-- + --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/dao/StudentMapper.xml&quot;</span>/&gt;</span> <span class="comment">&lt;!-- + --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="测试">测试</h2>
<h3 id="要求一">要求一：</h3>
<p>查询所有学生信息，内容包括（学生id，学生name，老师name）</p>
<p><strong>方法一：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 复杂属性，需要单独处理</span></span><br><span class="line"><span class="comment">         对象：association</span></span><br><span class="line"><span class="comment">         集合：collection</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacherById&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacherById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from teacher</span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>按照查询嵌套处理，相当于子查询</p>
<p><strong>方法二：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentMap0&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 复杂属性，需要单独处理</span></span><br><span class="line"><span class="comment">         对象：association</span></span><br><span class="line"><span class="comment">         集合：collection</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent0&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentMap0&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid, s.name sname, t.name tname</span><br><span class="line">    from student s,</span><br><span class="line">         teacher t</span><br><span class="line">    where s.tid = t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>按照结果嵌套处理，即连表查询</p>
<h3 id="要求二">要求二：</h3>
<p>查询所有老师信息，内容包括（老师id，老师name，所有学生（学生id，学生name，学生老师id））</p>
<p><strong>实体类的变化</strong></p>
<p>Student0</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student0</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> tid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Teacher0</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher0</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student0&gt; student0s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>方法一：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;teacherMap0&quot;</span> <span class="attr">type</span>=<span class="string">&quot;teacher0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;student0s&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student0&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getStudentByTid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher0&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;teacherMap0&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from teacher</span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentByTid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student0&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from student</span><br><span class="line">    where tid = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>按照查询嵌套处理，相当于子查询</p>
<p><strong>方法二：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;resultMap id=<span class="string">&quot;teacherMap&quot;</span> type=<span class="string">&quot;teacher0&quot;</span>&gt;</span><br><span class="line">    &lt;result column=<span class="string">&quot;tid&quot;</span> property=<span class="string">&quot;id&quot;</span>/&gt;</span><br><span class="line">    &lt;result column=<span class="string">&quot;tname&quot;</span> property=<span class="string">&quot;name&quot;</span>/&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        javaType=<span class="string">&quot;&quot;</span> 指定属性类型</span><br><span class="line">        集合中的泛型信息，我们使用 ofType 获取</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;collection property=<span class="string">&quot;student0s&quot;</span> ofType=<span class="string">&quot;Student0&quot;</span>&gt;</span><br><span class="line">        &lt;result property=<span class="string">&quot;id&quot;</span> column=<span class="string">&quot;sid&quot;</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">&quot;name&quot;</span> column=<span class="string">&quot;sname&quot;</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">&quot;tid&quot;</span> column=<span class="string">&quot;tid&quot;</span>/&gt;</span><br><span class="line">    &lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">&quot;getTeacher&quot;</span> resultMap=<span class="string">&quot;teacherMap&quot;</span>&gt;</span><br><span class="line">    select t.id tid, t.name tname, s.id sid, s.name sname</span><br><span class="line">    from student s,</span><br><span class="line">         teacher t</span><br><span class="line">    where s.tid = t.id</span><br><span class="line">      and t.id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p>按照结果嵌套处理，即连表查询</p>
<h2 id="总结">总结</h2>
<p>1、关联 - association</p>
<p>2、集合 - collection</p>
<p>3、javaType &amp; ofType</p>
<ol type="1">
<li>javaType 用来指定实体类中属性的类型</li>
<li>ofType 用来指定映射到 List 或集合中的 pojo
类型，泛型中的约束类型</li>
</ol>
<p><strong>注意点：</strong></p>
<ul>
<li>sql 可读性</li>
<li>数据库字段与实体类属性对应</li>
<li>排错依靠日志信息（log4j等）</li>
</ul>
<p>因为内容太多了，所以将其拆分为以下内容</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/3806e68f.html">MyBatis(一)</a></li>
<li><a
href="https://wnhyang.github.io/article/8100a57.html">MyBatis(二)（当前）</a></li>
<li><a
href="https://wnhyang.github.io/article/450ea905.html">MyBatis(三)</a></li>
</ul>
]]></content>
      <tags>
        <tag>Spring Framework</tag>
        <tag>Mybatis/Mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的小结01</title>
    <url>/article/c769172d.html</url>
    <content><![CDATA[<h1 id="简述">简述</h1>
<p>最近做项目时，遇到使用<code>MySQL</code>的一些问题和总结</p>
<span id="more"></span>
<h1 id="范式">范式</h1>
<p>https://blog.csdn.net/weixin_43433032/article/details/89293663</p>
<p>关于数据库设计必须要了解范式的概念，因为我们通常会结合具体场景来做设计，所以还是比较灵活的，也未必要完全遵守范式约定。</p>
<p>这里就不举例子了。</p>
<h1 id="null与默认值">NULL与默认值</h1>
<p>这个很重要，通常还是要设置默认值的，这样能避免改变非空字段为<code>NULL</code>的情况。</p>
<p>学到了时间的默认设置，好处就是，创建时间直接插入就是当下时间，更新时间就是每次做更新操作的时间，不需要写额外sql更新，非常方便。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">`create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`update_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br></pre></td></tr></table></figure>
<h1 id="mbg">MBG</h1>
<p><code>Mybatis-Generator</code>在生成<code>BaseResultMap</code>会有不同</p>
<p>若数据表字段为<code>tinyiny(1)</code>，<code>MBG</code>映射<code>jdbcType</code>为<code>BIT</code>，<code>Java</code>属性为<code>Boolean</code>，</p>
<p>若为<code>tinyint(4)</code>，<code>MBG</code>映射<code>jdbcType</code>为<code>TINYINT</code>，<code>Java</code>属性为<code>Byte</code>，</p>
<p>若为<code>datetime</code>，<code>MBG</code>映射<code>jdbcType</code>为<code>TIMESTAMP</code>，<code>Java</code>属性为<code>Date</code>。</p>
<p>这个需要注意</p>
<h1 id="order-by">order by</h1>
<p><code>order by</code>子句最好依据有唯一字段排序</p>
<p>举个例子：</p>
<p>看这张表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">20	demoData	1	2021-12-31 17:13:03	2021-12-31 17:14:15</span><br><span class="line">22	etjyrj	0	2021-12-31 17:13:11	2021-12-31 17:13:11</span><br><span class="line">21	olafa	1	2021-12-31 17:13:08	2021-12-31 17:13:08</span><br><span class="line">19	tjryj	1	2021-12-31 17:13:00	2021-12-31 17:13:00</span><br><span class="line">18	rgher	1	2021-12-31 17:12:58	2021-12-31 17:12:58</span><br><span class="line">17	rg	1	2021-12-31 17:12:55	2021-12-31 17:12:55</span><br><span class="line">12	人物	1	2021-12-31 17:12:19	2021-12-31 17:12:19</span><br><span class="line">16	健康	1	2021-12-31 17:12:19	2021-12-31 17:12:19</span><br><span class="line">15	教育	1	2021-12-31 17:12:19	2021-12-31 17:12:19</span><br><span class="line">14	农业	1	2021-12-31 17:12:19	2021-12-31 17:12:19</span><br><span class="line">13	军事	1	2021-12-31 17:12:19	2021-12-31 17:12:19</span><br><span class="line">11	法治	1	2021-12-31 17:12:19	2021-12-31 17:12:19</span><br><span class="line">10	汽车	1	2021-12-31 17:12:19	2021-12-31 17:12:19</span><br><span class="line">9	时政	1	2021-12-31 17:12:19	2021-12-31 17:12:19</span><br><span class="line">8	科技	1	2021-12-31 17:12:19	2021-12-31 17:12:19</span><br><span class="line">7	生活	1	2021-12-31 17:12:19	2021-12-31 17:12:19</span><br><span class="line">6	文化	1	2021-12-31 17:12:19	2021-12-31 17:12:19</span><br><span class="line">5	体育	1	2021-12-31 17:12:19	2021-12-31 17:12:19</span><br><span class="line">4	金融	1	2021-12-31 17:12:19	2021-12-31 17:12:19</span><br><span class="line">3	财经	1	2021-12-31 17:12:19	2021-12-31 17:12:19</span><br><span class="line">2	社会	1	2021-12-31 17:06:22	2021-12-31 17:06:22</span><br><span class="line">1	国际	1	2021-12-31 17:06:01	2021-12-31 17:06:01</span><br></pre></td></tr></table></figure>
<p>第一次分页查找</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	id,</span><br><span class="line">	category_name,</span><br><span class="line">	valid,</span><br><span class="line">	create_time,</span><br><span class="line">	update_time </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	news_category </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	valid <span class="operator">=</span> <span class="number">1</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">	update_time <span class="keyword">DESC</span></span><br><span class="line">	LIMIT <span class="number">0</span>,</span><br><span class="line">	<span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">20	demoData	1	2021-12-31 17:13:03	2021-12-31 17:14:15</span><br><span class="line">21	olafa	1	2021-12-31 17:13:08	2021-12-31 17:13:08</span><br><span class="line">19	tjryj	1	2021-12-31 17:13:00	2021-12-31 17:13:00</span><br><span class="line">18	rgher	1	2021-12-31 17:12:58	2021-12-31 17:12:58</span><br><span class="line">17	rg	1	2021-12-31 17:12:55	2021-12-31 17:12:55</span><br></pre></td></tr></table></figure>
<p>没什么问题</p>
<p>下一页</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">xxx</span><br><span class="line">	LIMIT <span class="number">5</span>,</span><br><span class="line">	<span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3	财经	1	2021-12-31 17:12:19	2021-12-31 17:12:19</span><br><span class="line">5	体育	1	2021-12-31 17:12:19	2021-12-31 17:12:19</span><br><span class="line">6	文化	1	2021-12-31 17:12:19	2021-12-31 17:12:19</span><br><span class="line">7	生活	1	2021-12-31 17:12:19	2021-12-31 17:12:19</span><br><span class="line">10	汽车	1	2021-12-31 17:12:19	2021-12-31 17:12:19</span><br></pre></td></tr></table></figure>
<p>？？？</p>
<p>下一页</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">xxx</span><br><span class="line">	LIMIT <span class="number">10</span>,</span><br><span class="line">	<span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10	汽车	1	2021-12-31 17:12:19	2021-12-31 17:12:19</span><br><span class="line">11	法治	1	2021-12-31 17:12:19	2021-12-31 17:12:19</span><br><span class="line">12	人物	1	2021-12-31 17:12:19	2021-12-31 17:12:19</span><br><span class="line">13	军事	1	2021-12-31 17:12:19	2021-12-31 17:12:19</span><br><span class="line">14	农业	1	2021-12-31 17:12:19	2021-12-31 17:12:19</span><br></pre></td></tr></table></figure>
<p>？？？</p>
<p>“更离谱了”🤔上一页的数据怎么又来了</p>
<p>当时人傻了半天，最后才发现中间的数据<code>update_time</code>字段一样，导致MySQL无法正常排序</p>
<p>所以MySQL需要一个能唯一确定的字段来排序，so</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">	update_time <span class="keyword">DESC</span>,id <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>
<p>这样就ok</p>
<h1 id="小结">小结</h1>
<p>还有很多问题待发现吧~</p>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac-Java开发环境</title>
    <url>/article/661307ba.html</url>
    <content><![CDATA[<h1 id="系统设置">系统设置</h1>
<p>这个完全看个人习惯，不多提了<br />关于使用技巧，这个用的越多越熟悉，慢慢来</p>
<table>
<thead>
<tr class="header">
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>command</code>+<code>option</code>+<code>1</code></td>
<td>图标自动排列</td>
</tr>
<tr class="even">
<td><code>command</code>+<code>shift</code>+<code>.</code></td>
<td>显示/不显示隐藏文件</td>
</tr>
<tr class="odd">
<td><code>command</code>+<code>option</code>+<code>c</code></td>
<td>复制文件路径</td>
</tr>
<tr class="even">
<td></td>
<td></td>
</tr>
</tbody>
</table>
<span id="more"></span>
<h1 id="homebrewgit">homebrew&amp;git</h1>
<p><a
href="https://zhuanlan.zhihu.com/p/111014448">Homebrew国内如何自动安装（国内地址）（Mac
&amp; Linux）</a></p>
<p>这个不用多说，装就对了</p>
<p>有了homebrew，在mac上安装软件就变的非常容易了，不仅是<code>wget</code>、<code>curl</code>、<code>telnet</code>这些，而且还包括百度网盘、迅雷这些，桌面程序也是可以的</p>
<p>貌似按照上面的安装方式也会同时安装<code>git</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看git版本</span></span><br><span class="line">git -v</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看配置 </span></span><br><span class="line">git config -l</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看系统config</span></span><br><span class="line">git config --system --list　</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看当前用户（global）配置</span></span><br><span class="line">git config --global  --list</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置用户名</span></span><br><span class="line">git config --global user.name <span class="string">&quot;username&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置邮箱</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxx@xxx.com&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="jdk">JDK</h1>
<p><code>Mac</code>安装<code>JDK</code>，直接按照傻瓜式安装即可，安装完毕会发现<code>java -version</code>，<code>java</code>，<code>javac</code>都在了</p>
<h1 id="maven">Maven</h1>
<p><code>Maven</code>下载<code>zip</code>或是<code>tar.gz</code>压缩包即可，下载后解压到一个目录，下面开始配置<code>Maven</code>环境变量<br /><code>vi ~/.bash_profile</code>加上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export MAVEN_HOME=/xxx/apache-maven-3.6.3</span><br><span class="line">export PATH=$MAVEN_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>
<p><code>source ~/.bash_profile</code>生效</p>
<p><code>mvn -v</code>检查</p>
<p>顺带一提，配置文件根据自己情况配置即可，通常我习惯创建一个<code>repository</code>文件夹用于本地<code>maven</code>仓库</p>
<h1 id="iterm2">iTerm2</h1>
<p><a
href="https://www.jianshu.com/p/405956cdaca6">ITerm2配置-让你的mac命令行更加丰富高效</a></p>
<p><a href="https://iterm2.com/">iTerm2 - macOS Terminal
Replacement</a></p>
<p><a
href="https://blog.csdn.net/qwe641259875/article/details/107201760">oh-my-zsh
国内安装及配置_菜饼同学的博客-CSDN博客_ohmyzsh</a></p>
<h1 id="section">✈️</h1>
<p><a href="https://github.com/yichengchen/clashX">clashX</a></p>
<p><a
href="chrome-extension://padekgcemlokbadohgkifijomclgjgif/options.html#!/about">SwitchyOmega</a></p>
<p>这个不没怎么用过，这次免费试用了一下，因为毕竟是从<code>win</code>转过来的，对于<code>Google</code>、<code>Github</code>要求还是挺高的，毕竟要同步和下载东西，用一下很有必要</p>
<h1 id="nvmnodenpm">nvm&amp;node&amp;npm</h1>
<p><a
href="https://zhuanlan.zhihu.com/p/114364577">Mac已到手？从零开始，八步打造一个高效舒适的开发环境</a></p>
<p><a
href="https://cloud.tencent.com/developer/article/1956818?from=article.detail.1913156">mac
上使用brew安装 nvm - 腾讯云开发者社区-腾讯云</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm list                 ##是查找本电脑上所有的node版本</span><br><span class="line">- nvm list     ##查看已经安装的版本</span><br><span class="line">- nvm list installed ##查看已经安装的版本</span><br><span class="line">- nvm list available ##查看网络可以安装的版本</span><br><span class="line"></span><br><span class="line">nvm install    ##安装指定版本node</span><br><span class="line">nvm uninstall  ##卸载制定的版本</span><br><span class="line">nvm install stable             ## 安装最新稳定版 node，当前是node v9.5.0 (npm v5.6.0)</span><br><span class="line">nvm install      ##安装指定版本，可模糊安装，如：安装v4.4.0，既可nvm install v4.4.0，又可nvm install 4.4</span><br><span class="line"></span><br><span class="line">nvm use              ##切换使用指定的版本node</span><br><span class="line">nvm -v                                     ##查看当前的版本</span><br><span class="line"></span><br><span class="line">nvm ls                                     ## 列出所有安装的版本</span><br><span class="line">nvm ls-remote                     ## 列出所有远程服务器的版本（官方node version list）</span><br><span class="line">nvm current                          ## 显示当前的版本</span><br><span class="line"></span><br><span class="line">nvm alias       ## 给不同的版本号添加别名</span><br><span class="line">nvm unalias                      ## 删除已定义的别名</span><br><span class="line"></span><br><span class="line">nvm reinstall-packages      ## 在当前版本 node 环境下，重新全局安装指定版本号的 npm 包</span><br><span class="line"></span><br><span class="line">nvm on                         ##打开nodejs控制</span><br><span class="line">nvm off                     ##关闭nodejs控制</span><br><span class="line">nvm proxy                 ##查看设置与代理</span><br><span class="line">nvm node_mirror [url] ##设置或者查看setting.txt中的node_mirror，如果不设置的默认是 https://nodejs.org/dist/</span><br><span class="line">nvm npm_mirror [url]  ##设置或者查看setting.txt中的npm_mirror,如果不设置的话默认的是： https://github.com/npm/npm/archive/.</span><br><span class="line"></span><br><span class="line">nvm use [version] [arch] ##切换制定的node版本和位数</span><br><span class="line">nvm root [path]          ##设置和查看root路径</span><br></pre></td></tr></table></figure>
<h1 id="软件">软件</h1>
<p>原本是有<a
href="http://macwk.com/">http://macwk.com/</a>的，但已经关站了，很遗憾，只能选择其他的软件网站了，对于需要破解的软件，我是建议可以在这里找的，还是那句话，如果有能力请支持正版</p>
<p><a
href="https://www.hereitis.cn/">hereitis,在这里资源站,免费软件下载,PPT、图片素材下载,精品小工具小插件</a></p>
<p><a href="https://en.softonic.com/">App news and reviews, best
software downloads and discovery - Softonic</a></p>
<h2 id="idea">Idea</h2>
<p>通过<a
href="https://www.jetbrains.com/zh-cn/idea/">官网</a>下载即可，想要最终版就自己想办法吧</p>
<h2 id="vscode">VSCode</h2>
<p><a
href="https://code.visualstudio.com/">官网</a>安装即可，可以登录微软账号同步设置和插件，非常方便</p>
<h2 id="navicat-premium">Navicat Premium</h2>
<p>一直使用的都是这个，好用且好用<br /><a
href="https://www.hereitis.cn/">https://www.hereitis.cn/</a><br />这个只能通过破解来安装使用，参考上面网站安装即可，期间遇到问题也有文档可解答</p>
<h2 id="another-redis-desktop-manager">Another Redis Desktop
Manager</h2>
<p><a
href="https://www.hereitis.cn/">https://www.hereitis.cn/</a><br />同上，参考上面网站安装即可，期间遇到问题也有文档可解答</p>
<h2 id="postman">Postman</h2>
<p><a href="https://www.postman.com/">官网</a>安装即可</p>
<h2 id="docker">Docker</h2>
<p><a href="https://yeasy.gitbook.io/docker_practice/install/mac">macOS
- Docker — 从入门到实践</a></p>
<p>参考这里的安装和镜像配置即可</p>
<h2 id="其他">其他</h2>
<p>这个纯个人使用而定<br />微信，QQ（才发现没有Mac版Tim），钉钉，腾讯会议，阿里云盘，百度网盘、网易云音乐，语雀，Chrome、Edge、WPS，DNM，腾讯柠檬</p>
]]></content>
  </entry>
  <entry>
    <title>MD编辑器的烦恼</title>
    <url>/article/1ac0b150.html</url>
    <content><![CDATA[<h1 id="起因">起因</h1>
<p>因为在实习嘛，公司配有<code>mac</code>办公，而我有一台<code>windows</code>，我又习惯性使用<code>Typora</code>进行<code>MarkDown</code>编辑记录，这就很烦了，两台电脑数据总是不一致。而且我的<code>hexo</code>博客在<code>windows</code>上，现在我使用<code>mac</code>更多一些了，所以每次编辑新博客就比较麻烦。之前一直都是用<code>Tim</code>、<code>微信</code>、<code>钉钉</code>这些聊天工具通过给自己发消息，然后复制粘贴来保证同步的。实在是太蠢了。尤其是在现在这样的云时代。所以我亟需寻找一个合适的云知识库。</p>
<span id="more"></span>
<h1 id="语雀">语雀</h1>
<p>关于解决方案有很多，但最终还是它了——<a
href="https://www.yuque.com/dashboard">语雀</a>。</p>
<p>它的功能非常丰富，从目前感触来看，它有以下优点</p>
<ul>
<li><p>云，这是必须的，我的首要考虑因素</p></li>
<li><p>同步协作，目前感触主要是同步，协作嘛，期待吧</p></li>
<li><p>生态，其实就是很多人在用，并且可以设置互联网公共权限</p></li>
<li><p>资源库，可以上传一些共享资源，在线看，目前主要是一些pdf文档</p></li>
<li><p>编辑内容非常丰富，只需在编辑时输入“/”，就可以了，公式、音乐、思维导图这些都很常规，但它还包括地图、淘宝视频等等</p></li>
<li><p>...</p></li>
</ul>
<p>说完优点，必须来缺点啊</p>
<p>尽管语雀文档编辑功能非常强大，但是它的几个页面跳转也太难用了吧，举个例子：首先进入语雀到<code>dashboard</code>页面，首先点击某个知识库，跳进来没问题，但是，跳进来展示的信息也太少了吧，只有中间显示一些文档信息，更关键的是，我要回到dashboard不能通过<code>username/知识库名</code>这里跳转，只能通过<code>username</code>跳到我的主页，如果这里有分级目录多好啊，左边是dashboard菜单，有工作台、收藏、个人知识库等等跳转入口，加上一级个知识库目录，三级目录结构，还可以隐藏/显示，多好啊！可，那都是幻想，什么都没有，跳转起来简直让我抓狂。</p>
<p>还有，我真是用惯了<code>Typora</code>，习惯用<code>MarkDown</code>直接编辑，不喜欢在线编辑<code>MarkDown</code>用上各种按钮的方式，难搞。</p>
<p>所以只能寻求解决方案了，首先看到在语雀官方的进阶玩法中有第三方工具<a
href="https://www.yuque.com/yuque/tygt6i">https://www.yuque.com/yuque/tygt6i</a>里，可以有不同解决方案，尝试了其中的<code>MarkEditor</code>后，又放弃了，原因是它仅仅能解决上面提到的没有目录的问题，但是它的编辑模式却不是那种实时直接预览的方式，有点头疼。</p>
<p>真就找不到一个我让我满意的方案。</p>
<p>如果你有不错的方案请务必联系我，hhhhh</p>
<h1 id="使用">使用</h1>
<p>讲一下我是怎么样利用语雀的吧。</p>
<p>首先我现在仅仅是个人使用，没有组织没有协作。所以我主要是用个人知识库，目前主要4个，它们是主知识库（绝大多数时间都在用着）、blog（个人博客，考虑开放一些内容）、img（目前感觉可以作为图床，虽然我有其他方案）、resource（放一些共享资源，pdf之类的资料）。</p>
<p>说一些最开始的事吧，现在想想是真蠢啊。原本创建的是5个，就是把主知识库分为<code>mac</code>和<code>win</code>，显而易见，分平台区分开。好蠢啊，当时想着这样我的数据不就能同时能看到了。然而这样做不就和没使用语雀一样吗？同步了什么呢？好傻！缓过神来，才把它们合并整理了一下。</p>
<h1 id="问题">问题</h1>
<p>目前已经慢慢适应语雀了，是挺好用的。</p>
<p>但也发现了问题，<a
href="https://www.yuque.com/yuque/topics">https://www.yuque.com/yuque/topics</a>，在语雀官方中也有，就是<strong>卡顿</strong>，可以在前面链接中搜索。</p>
<p>就是查看/编辑大文档时，整个语雀就会卡顿，就是说只要你有一个页面在查看/编辑大文档，与语雀有关的所有的都会卡顿。</p>
<p>其中官方人员有回答可以试试升级浏览器版本，我也试了试，使用最新的<code>Edge</code>后，卡顿问题好像就解决了。</p>
<p>所以推荐使用最新版的浏览器，有可能只是针对<a
href="https://www.chromium.org/">Chromium</a>的浏览器哦。</p>
<h1 id="小结">小结</h1>
<p>云时代，我们真的可以有效的利用，来提高自己工作学习的效率。很有帮助！</p>
]]></content>
      <tags>
        <tag>记录</tag>
        <tag>软件/工具</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL（三）</title>
    <url>/article/f07c622d.html</url>
    <content><![CDATA[<p>因为内容太多了，所以将其拆分为以下内容</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/8d742da7.html">MySQL(一)</a></li>
<li><a
href="https://wnhyang.github.io/article/bd62c17f.html">MySQL(二)</a></li>
<li><a
href="https://wnhyang.github.io/article/f07c622d.html">MySQL(三)（当前）</a></li>
<li><a
href="https://wnhyang.github.io/article/47517b48.html">MySQL(四)</a></li>
</ul>
<h1 id="参考">参考</h1>
<p><a
href="https://www.bilibili.com/video/BV1NJ411J79W">https://www.bilibili.com/video/BV1NJ411J79W</a></p>
<p><a
href="https://www.runoob.com/mysql/mysql-tutorial.html">https://www.runoob.com/mysql/mysql-tutorial.html</a></p>
<span id="more"></span>
<h1 id="mysql-函数">MySQL 函数</h1>
<h2 id="字符串函数">字符串函数</h2>
<table>
<colgroup>
<col style="width: 16%" />
<col style="width: 41%" />
<col style="width: 41%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">函数</th>
<th style="text-align: left;">描述</th>
<th style="text-align: left;">实例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">CHAR_LENGTH(s)</td>
<td style="text-align: left;">返回字符串 s 的字符数</td>
<td style="text-align: left;">返回字符串 RUNOOB
的字符数<code>SELECT CHAR_LENGTH("RUNOOB") AS LengthOfString;</code></td>
</tr>
<tr class="even">
<td style="text-align: left;">CONCAT(s1,s2...sn)</td>
<td style="text-align: left;">字符串 s1,s2
等多个字符串合并为一个字符串</td>
<td
style="text-align: left;">合并多个字符串<code>SELECT CONCAT("SQL ", "Runoob ", "Gooogle ", "Facebook") AS ConcatenatedString;</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;">CONCAT_WS(x, s1,s2...sn)</td>
<td style="text-align: left;">同 CONCAT(s1,s2,...)
函数，但是每个字符串之间要加上 x，x 可以是分隔符</td>
<td
style="text-align: left;">合并多个字符串，并添加分隔符：<code>SELECT CONCAT_WS("-", "SQL", "Tutorial", "is", "fun!")AS ConcatenatedString;</code></td>
</tr>
<tr class="even">
<td style="text-align: left;">FORMAT(x,n)</td>
<td style="text-align: left;">函数可以将数字 x 进行格式化 "#,##.##", 将
x 保留到小数点后 n 位，最后一位四舍五入。</td>
<td style="text-align: left;">格式化数字 "#,##.##"
形式：<code>SELECT FORMAT(250500.5634, 2);     -- 输出 250,500.56</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;">INSERT(s1,x,len,s2)</td>
<td style="text-align: left;">字符串 s2 替换 s1 的 x 位置开始长度为 len
的字符串</td>
<td style="text-align: left;">从字符串第一个位置开始的 6 个字符替换为
runoob：<code>SELECT INSERT("google.com", 1, 6, "runoob");  -- 输出：runoob.com</code></td>
</tr>
<tr class="even">
<td style="text-align: left;">LEFT(s,n)</td>
<td style="text-align: left;">返回字符串 s 的前 n 个字符</td>
<td style="text-align: left;">返回字符串 runoob
中的前两个字符：<code>SELECT LEFT('runoob',2) -- ru</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;">LOWER(s)</td>
<td style="text-align: left;">将字符串 s 的所有字母变成小写字母</td>
<td style="text-align: left;">字符串 RUNOOB
转换为小写：<code>SELECT LOWER('RUNOOB') -- runoob</code></td>
</tr>
<tr class="even">
<td style="text-align: left;">LTRIM(s)</td>
<td style="text-align: left;">去掉字符串 s 开始处的空格</td>
<td style="text-align: left;">去掉字符串
RUNOOB开始处的空格：<code>SELECT LTRIM("    RUNOOB") AS LeftTrimmedString;-- RUNOOB</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;">REPLACE(s,s1,s2)</td>
<td style="text-align: left;">将字符串 s2 替代字符串 s 中的字符串
s1</td>
<td style="text-align: left;">将字符串 abc 中的字符 a 替换为字符
x：<code>SELECT REPLACE('abc','a','x') --xbc</code></td>
</tr>
<tr class="even">
<td style="text-align: left;">REVERSE(s)</td>
<td style="text-align: left;">将字符串s的顺序反过来</td>
<td style="text-align: left;">将字符串 abc
的顺序反过来：<code>SELECT REVERSE('abc') -- cba</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;">RIGHT(s,n)</td>
<td style="text-align: left;">返回字符串 s 的后 n 个字符</td>
<td style="text-align: left;">返回字符串 runoob
的后两个字符：<code>SELECT RIGHT('runoob',2) -- ob</code></td>
</tr>
<tr class="even">
<td style="text-align: left;">RTRIM(s)</td>
<td style="text-align: left;">去掉字符串 s 结尾处的空格</td>
<td style="text-align: left;">去掉字符串 RUNOOB
的末尾空格：<code>SELECT RTRIM("RUNOOB     ") AS RightTrimmedString;   -- RUNOOB</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;">STRCMP(s1,s2)</td>
<td style="text-align: left;">比较字符串 s1 和 s2，如果 s1 与 s2
相等返回 0 ，如果 s1&gt;s2 返回 1，如果 s1&lt;s2 返回 -1</td>
<td
style="text-align: left;">比较字符串：<code>SELECT STRCMP("runoob", "runoob");  -- 0</code></td>
</tr>
<tr class="even">
<td style="text-align: left;">SUBSTR(s, start, length)</td>
<td style="text-align: left;">从字符串 s 的 start 位置截取长度为 length
的子字符串</td>
<td style="text-align: left;">从字符串 RUNOOB 中的第 2 个位置截取 3个
字符：<code>SELECT SUBSTR("RUNOOB", 2, 3) AS ExtractString; -- UNO</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;">UPPER(s)</td>
<td style="text-align: left;">将字符串转换为大写</td>
<td style="text-align: left;">将字符串 runoob
转换为大写：<code>SELECT UPPER("runoob"); -- RUNOOB</code></td>
</tr>
</tbody>
</table>
<h2 id="数字函数">数字函数</h2>
<table>
<colgroup>
<col style="width: 12%" />
<col style="width: 41%" />
<col style="width: 45%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">函数名</th>
<th style="text-align: left;">描述</th>
<th style="text-align: left;">实例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">SUM(expression)</td>
<td style="text-align: left;">返回指定字段的总和</td>
<td style="text-align: left;">计算 OrderDetails 表中字段 Quantity
的总和：<code>SELECT SUM(Quantity) AS TotalItemsOrdered FROM OrderDetails;</code></td>
</tr>
<tr class="even">
<td style="text-align: left;">ABS(x)</td>
<td style="text-align: left;">返回 x 的绝对值</td>
<td style="text-align: left;">返回 -1
的绝对值：<code>SELECT ABS(-1) -- 返回1</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;">AVG(expression)</td>
<td style="text-align: left;">返回一个表达式的平均值，expression
是一个字段</td>
<td style="text-align: left;">返回 Products 表中Price
字段的平均值：<code>SELECT AVG(Price) AS AveragePrice FROM Products;</code></td>
</tr>
<tr class="even">
<td style="text-align: left;">CEIL(x)</td>
<td style="text-align: left;">返回大于或等于 x 的最小整数</td>
<td
style="text-align: left;"><code>SELECT CEIL(1.5) -- 返回2</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;">COUNT(expression)</td>
<td style="text-align: left;">返回查询的记录总数，expression
参数是一个字段或者 * 号</td>
<td style="text-align: left;">返回 Products 表中 products
字段总共有多少条记录：<code>SELECT COUNT(ProductID) AS NumberOfProducts FROM Products;</code></td>
</tr>
<tr class="even">
<td style="text-align: left;">FLOOR(x)</td>
<td style="text-align: left;">返回小于或等于 x 的最大整数</td>
<td style="text-align: left;">小于或等于 1.5
的整数：<code>SELECT FLOOR(1.5) -- 返回1</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;">MAX(expression)</td>
<td style="text-align: left;">返回字段 expression 中的最大值</td>
<td style="text-align: left;">返回数据表 Products 中字段 Price
的最大值：<code>SELECT MAX(Price) AS LargestPrice FROM Products;</code></td>
</tr>
<tr class="even">
<td style="text-align: left;">MIN(expression)</td>
<td style="text-align: left;">返回字段 expression 中的最小值</td>
<td style="text-align: left;">返回数据表 Products 中字段 Price
的最小值：<code>SELECT MIN(Price) AS MinPrice FROM Products;</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;">RAND()</td>
<td style="text-align: left;">返回 0 到 1 的随机数</td>
<td
style="text-align: left;"><code>SELECT RAND() --0.93099315644334</code></td>
</tr>
<tr class="even">
<td style="text-align: left;">ROUND(x)</td>
<td style="text-align: left;">返回离 x 最近的整数</td>
<td
style="text-align: left;"><code>SELECT ROUND(1.23456) --1</code></td>
</tr>
</tbody>
</table>
<h2 id="日期函数">日期函数</h2>
<table>
<colgroup>
<col style="width: 21%" />
<col style="width: 20%" />
<col style="width: 57%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">函数名</th>
<th style="text-align: left;">描述</th>
<th style="text-align: left;">实例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">CURRENT_DATE()</td>
<td style="text-align: left;">返回当前日期</td>
<td
style="text-align: left;"><code>SELECT CURRENT_DATE(); -&gt; 2018-09-19</code></td>
</tr>
<tr class="even">
<td style="text-align: left;">CURRENT_TIME</td>
<td style="text-align: left;">返回当前时间</td>
<td
style="text-align: left;"><code>SELECT CURRENT_TIME(); -&gt; 19:59:02</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;">CURRENT_TIMESTAMP()</td>
<td style="text-align: left;">返回当前日期和时间</td>
<td
style="text-align: left;"><code>SELECT CURRENT_TIMESTAMP() -&gt; 2018-09-19 20:57:43</code></td>
</tr>
<tr class="even">
<td style="text-align: left;">NOW()</td>
<td style="text-align: left;">返回当前日期和时间</td>
<td
style="text-align: left;"><code>SELECT NOW() -&gt; 2018-09-19 20:57:43</code></td>
</tr>
</tbody>
</table>
<h2 id="更多"><a
href="https://www.runoob.com/mysql/mysql-functions.html">更多</a></h2>
<h1 id="事务">事务</h1>
<p>MySQL 事务主要用于处理操作量大，复杂度高的数据。</p>
<ul>
<li>在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务。</li>
<li>事务处理可以用来维护数据库的完整性，保证成批的 SQL
语句要么全部执行，要么全部不执行。</li>
<li>事务用来管理 insert,update,delete 语句</li>
</ul>
<blockquote>
<p>ACID 原则</p>
</blockquote>
<p>一般来说，事务是必须满足4个条件（ACID）：：原子性（<strong>A</strong>tomicity，或称不可分割性）、一致性（<strong>C</strong>onsistency）、隔离性（<strong>I</strong>solation，又称独立性）、持久性（<strong>D</strong>urability）。</p>
<ul>
<li><strong>原子性：</strong>一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</li>
<li><strong>一致性：</strong>在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</li>
<li><strong>隔离性：</strong>数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read
uncommitted）、读提交（read committed）、可重复读（repeatable
read）和串行化（Serializable）。</li>
<li><strong>持久性：</strong>事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li>
</ul>
<blockquote>
<p>隔离所导致的一些问题</p>
</blockquote>
<p><strong>脏读：</strong></p>
<p>当前事务(A)中可以读到其他事务(B)未提交的数据（脏数据），这种现象是脏读。</p>
<p><strong>不可重复读：</strong></p>
<p>在事务A中先后两次读取同一个数据，两次读取的结果不一样，这种现象称为不可重复读。</p>
<p><strong>虚读（幻读）：</strong></p>
<p>在事务A中按照某个条件先后两次查询数据库，两次查询结果的条数不同，这种现象称为幻读。</p>
<blockquote>
<p>在 MySQL 命令行的默认设置下，事务都是自动提交的，即执行 SQL
语句后就会马上执行 COMMIT 操作。因此要显式地开启一个事务务须使用命令
BEGIN 或 START TRANSACTION，或者执行命令 SET
AUTOCOMMIT=0，用来禁止使用当前会话的自动提交。</p>
</blockquote>
<h2 id="事务控制语句">事务控制语句：</h2>
<ul>
<li>BEGIN 或 START TRANSACTION 显式地开启一个事务；</li>
<li>COMMIT 也可以使用 COMMIT WORK，不过二者是等价的。COMMIT
会提交事务，并使已对数据库进行的所有修改成为永久性的；</li>
<li>ROLLBACK 也可以使用 ROLLBACK
WORK，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；</li>
<li>SAVEPOINT identifier，SAVEPOINT
允许在事务中创建一个保存点，一个事务中可以有多个 SAVEPOINT；</li>
<li>RELEASE SAVEPOINT identifier
删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；</li>
<li>ROLLBACK TO identifier 把事务回滚到标记点；</li>
<li>SET TRANSACTION 用来设置事务的隔离级别。InnoDB
存储引擎提供事务的隔离级别有READ UNCOMMITTED、READ COMMITTED、REPEATABLE
READ 和 SERIALIZABLE。</li>
</ul>
<h2 id="mysql-事务处理主要有两种方法">MYSQL
事务处理主要有两种方法：</h2>
<p>1、用 BEGIN, ROLLBACK, COMMIT来实现</p>
<ul>
<li><strong>BEGIN</strong> 开始一个事务</li>
<li><strong>ROLLBACK</strong> 事务回滚</li>
<li><strong>COMMIT</strong> 事务确认</li>
</ul>
<p>2、直接用 SET 来改变 MySQL 的自动提交模式:</p>
<ul>
<li><strong>SET AUTOCOMMIT=0</strong> 禁止自动提交</li>
<li><strong>SET AUTOCOMMIT=1</strong> 开启自动提交</li>
</ul>
<p><strong>例：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 模拟转账</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `account`(</span><br><span class="line">	`id` <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">not</span> <span class="keyword">null</span> AUTO_INCREMENT,</span><br><span class="line">	`name` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">	`money` <span class="type">decimal</span>(<span class="number">9</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">	<span class="keyword">primary</span> key(`id`)</span><br><span class="line">)engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> account (`name`,`money`)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;a&#x27;</span>,<span class="number">2000.00</span>),(<span class="string">&#x27;b&#x27;</span>,<span class="number">10000.00</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> AUTOCOMMIT <span class="operator">=</span> <span class="number">0</span>;	<span class="comment">-- 关闭自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money<span class="operator">=</span>money<span class="number">-500</span> <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money<span class="operator">=</span>money<span class="operator">+</span><span class="number">500</span> <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">rollback</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> AUTOCOMMIT <span class="operator">=</span> <span class="number">1</span>;	<span class="comment">-- 开启自动提交</span></span><br></pre></td></tr></table></figure>
<p>因为内容太多了，所以将其拆分为以下内容</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/8d742da7.html">MySQL(一)</a></li>
<li><a
href="https://wnhyang.github.io/article/bd62c17f.html">MySQL(二)</a></li>
<li><a
href="https://wnhyang.github.io/article/f07c622d.html">MySQL(三)（当前）</a></li>
<li><a
href="https://wnhyang.github.io/article/47517b48.html">MySQL(四)</a></li>
</ul>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-Generator使用</title>
    <url>/article/524c985a.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p>在学习公司项目时看到公司有使用<code>Mybatis-Generator</code>，所以学习了一下</p>
<p>之前是有见识过<code>Mybatis-Plus</code>的<code>generator</code>，使用起来还是很棒的，再说了<code>Mybatis-Plus</code>不也是基于<code>Mybatis</code>做的吗，所以相信他们会很相似</p>
<p>再有就是学习项目时用过<a
href="https://gitee.com/renrenio/renren-generator">renren-generator</a>，他能生成项目中简单的业务代码，包括controller、service等等</p>
<span id="more"></span>
<h1 id="内容">内容</h1>
<p>关于<code>Mybatis-Generator</code>最好还是去官网学习，http://mybatis.org/generator/index.html</p>
<p>当然有些博客写的也很棒，https://www.cnblogs.com/throwable/p/12046848.html</p>
<p>关于上面的那篇博客我只纠正一点，就是关于<code>commentGenerator标签</code>这块<code>suppressAllComments</code>，默认值是<code>false</code>没错，但是<code>false</code>含义是生成注释，设置为<code>true</code>才表示不生成注解。</p>
<h2 id="代码">代码</h2>
<p>下面是我的一些代码，可以参考一下</p>
<p>主要是<code>pom.xml</code>、<code>generatorConfig.xml</code>、<code>generatorConfig.properties</code></p>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wnh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.boot.version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">spring.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.driver.version</span>&gt;</span>8.0.17<span class="tag">&lt;/<span class="name">mysql.driver.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.generator.version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">mybatis.generator.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.driver.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.generator.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 通过mvn mybatis-generator:generate命令，运行mybatis-generator --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 参考：https://mybatis.org/generator/running/runningWithMaven.html --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.generator.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>Generate MyBatis Artifacts<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>generate<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 定义配置文件 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/mybatis/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 输出详细信息 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 覆盖生成文件 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 这里许多配置可以放在对应的xml文件中 --&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.driver.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>generatorConfig.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">datasource.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/operation?useSSL=false</span></span><br><span class="line"><span class="attr">datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">datasource.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>
<p>generatorConfig.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;mybatis/generatorConfig.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 要添加到类路径的 JAR/ZIP 文件的完整路径名，或要添加到类路径的目录 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 需要驱动：1、加入驱动路径 2、在plugin里直接加入依赖 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;classPathEntry location=&quot;/Program Files/IBM/SQLLIB/java/db2java.zip&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- targetRuntime属性推荐MyBatis3和MyBatis3Simple --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 必须按context的顺序配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;MySQL&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3Simple&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 插件扩展生成类，例如：生成toString，实现java.io.Serializable等 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- http://mybatis.org/generator/reference/plugins.html     https://github.com/itfsw/mybatis-generator-plugin --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;plugin type=&quot;com.itfsw.mybatis.generator.plugins.LombokPlugin&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &amp;lt;!&amp;ndash; @Data 默认开启,同时插件会对子类自动附加@EqualsAndHashCode(callSuper = true)，@ToString(callSuper = true) &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;property name=&quot;@Data&quot; value=&quot;true&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &amp;lt;!&amp;ndash; @Builder 必须在 Lombok 版本 &gt;= 1.18.2 的情况下开启，对存在继承关系的类自动替换成@SuperBuilder &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;property name=&quot;@Builder&quot; value=&quot;false&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &amp;lt;!&amp;ndash; @NoArgsConstructor 和 @AllArgsConstructor 使用规则和Lombok一致 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;property name=&quot;@AllArgsConstructor&quot; value=&quot;false&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;property name=&quot;@NoArgsConstructor&quot; value=&quot;false&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &amp;lt;!&amp;ndash; @Getter、@Setter、@Accessors 等使用规则参见官方文档 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;property name=&quot;@Accessors(chain = true)&quot; value=&quot;false&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &amp;lt;!&amp;ndash; 临时解决IDEA工具对@SuperBuilder的不支持问题，开启后(默认未开启)插件在遇到@SuperBuilder注解时会调用ModelBuilderPlugin来生成相应的builder代码 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;property name=&quot;supportSuperBuilderForIdea&quot; value=&quot;false&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/plugin&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--覆盖生成XML文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否输出表和列的comment信息 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addRemarkComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 数据源连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span></span></span><br><span class="line"><span class="tag">                <span class="attr">driverClass</span>=<span class="string">&quot;$&#123;datasource.driver&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">connectionURL</span>=<span class="string">&quot;$&#123;datasource.url&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">userId</span>=<span class="string">&quot;$&#123;datasource.username&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">password</span>=<span class="string">&quot;$&#123;datasource.password&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如果为true，所有数字属性被强制使用BigDecimal类型表示 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成模型的包名和位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span></span></span><br><span class="line"><span class="tag">                <span class="attr">targetPackage</span>=<span class="string">&quot;com.wnh.pojo.model&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成的映射文件包名和位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span></span></span><br><span class="line"><span class="tag">                <span class="attr">targetPackage</span>=<span class="string">&quot;mybatis/mapper&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">targetProject</span>=<span class="string">&quot;src/main/resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成DAO的包名和位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span></span></span><br><span class="line"><span class="tag">                <span class="attr">targetPackage</span>=<span class="string">&quot;com.wnh.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        &lt;table tableName=&quot;school_area&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--               domainObjectName=&quot;SchoolArea&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--               enableCountByExample=&quot;false&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--               enableSelectByExample=&quot;false&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--               enableUpdateByExample=&quot;false&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--               enableDeleteByExample=&quot;false&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;generatedKey column=&quot;id&quot; sqlStatement=&quot;JDBC&quot; identity=&quot;true&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/table&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;user&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">domainObjectName</span>=<span class="string">&quot;user.User&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">mapperName</span>=<span class="string">&quot;user.UserMapper&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">sqlStatement</span>=<span class="string">&quot;JDBC&quot;</span> <span class="attr">identity</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="注意事项">注意事项</h2>
<ul>
<li>虽然有<code>Java</code>和<code>maven</code>两种启动方式，但我还是推荐<code>maven</code></li>
<li>关于<code>pom</code>，要在<code>plugin</code>中引入需要的依赖，上面也提到了可以配置插件帮助我们生成代码，但官方提供的插件都太基础了，不太实用</li>
<li>关于<code>generatorConfig.xml</code>，这里<code>context</code>标签里的要严格按照顺序配置，否则报错</li>
<li>一定注意上面的覆盖<code>xml</code>的<code>plugin</code>配置，不然在覆盖生成时会有问题</li>
</ul>
<h2 id="吐槽">吐槽</h2>
<ul>
<li>首先就是关于注释的，<code>Mybatis-Generator</code>生成注释配置下，会生成很多多余的注解，其主要就是关于声明这里的代码是我们<code>Mybatis-Generator</code>生成的，但真的没什么用啊。有人就问了，“你不会把它关掉吗？”我要不是为了生成实体类对应数据库的注释我也不会开</li>
<li>关于生成表这块，难道没有直接配置多个表的选项吗？非得对应数据库每个表写一个<code>table</code>标签吗？</li>
<li>还有就是在生成文件时，它不会自己确定父包，也就是还得配置每个文件的父包，很麻烦</li>
</ul>
<h1 id="总结">总结</h1>
<p>说实话<code>Mybatis-Generator</code>确实能帮助我们简化开发，生成数据库实体类、<code>mapper</code>接口和<code>xml</code>，但是确实也存在一些问题，这也可能是因为它不更新了吧，上<code>maven</code>仓库就可以看到最新版本就是<code>1.4.0</code>，停留在2019年，现在确实也存在很多能替代它的方案。</p>
]]></content>
      <tags>
        <tag>Mybatis/Mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-explain应用</title>
    <url>/article/f6b622c.html</url>
    <content><![CDATA[<h1 id="参考">参考</h1>
<p>https://segmentfault.com/a/1190000023565685</p>
<p>也不多说了，关于<code>MySQL</code>的<code>explain</code>看看上面的文章就挺好的了</p>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL（四）</title>
    <url>/article/47517b48.html</url>
    <content><![CDATA[<p>因为内容太多了，所以将其拆分为以下内容</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/8d742da7.html">MySQL(一)</a></li>
<li><a
href="https://wnhyang.github.io/article/bd62c17f.html">MySQL(二)</a></li>
<li><a
href="https://wnhyang.github.io/article/f07c622d.html">MySQL(三)</a></li>
<li><a
href="https://wnhyang.github.io/article/47517b48.html">MySQL(四)（当前）</a></li>
</ul>
<h1 id="参考">参考</h1>
<p><a
href="https://www.bilibili.com/video/BV1NJ411J79W">https://www.bilibili.com/video/BV1NJ411J79W</a></p>
<p><a
href="https://www.runoob.com/mysql/mysql-tutorial.html">https://www.runoob.com/mysql/mysql-tutorial.html</a></p>
<span id="more"></span>
<h1 id="索引">索引</h1>
<p>MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。</p>
<ul>
<li><strong>Primary
Key（聚集索引）</strong>：InnoDB存储引擎的表会存在主键（唯一非null），如果建表的时候没有指定主键，则会使用第一非空的唯一索引作为聚集索引，否则InnoDB会自动帮你创建一个不可见的、长度为6字节的row_id用来作为聚集索引。</li>
<li><strong>单列索引</strong>：单列索引即一个索引只包含单个列</li>
<li><strong>组合索引</strong>：组合索引指在表的多个字段组合上创建的索引，只有在查询条件中使用了这些字段的左边字段时，索引才会被使用。使用组合索引时<strong>遵循最左前缀集合</strong></li>
<li><strong>Unique（唯一索引）</strong>：索引列的值必须唯一，但允许有空值。若是组合索引，则列值的组合必须唯一。主键索引是一种特殊的唯一索引，不允许有空值</li>
<li><strong>Key（普通索引）</strong>：是MySQL中的基本索引类型，允许在定义索引的列中插入重复值和空值</li>
<li><strong>FULLTEXT（全文索引）</strong>：全文索引类型为FULLTEXT，在定义索引的列上支持值的全文查找，允许在这些索引列中插入重复值和空值。全文索引可以在CHAR、VARCHAR或者TEXT类型的列上创建</li>
<li><strong>SPATIAL（空间索引）</strong>：空间索引是对空间数据类型的字段建立的索引，MySQL中的空间数据类型有4种，分别是GEOMETRY、POINT、LINESTRING和POLYGON。MySQL使用SPATIAL关键字进行扩展，使得能够用于创建正规索引类似的语法创建空间索引。创建空间索引的列必须声明为NOT
NULL</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> tablename	<span class="comment">-- 显示所有索引信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> INDEX indexName <span class="keyword">ON</span> table_name (column_name)	<span class="comment">-- 创建索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> tableName <span class="keyword">ADD</span> INDEX indexName(columnName)	<span class="comment">-- 修改表增加索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> INDEX [indexName] <span class="keyword">ON</span> mytable;	<span class="comment">-- 删除索引</span></span><br><span class="line"></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tablename	<span class="comment">-- explain分析索引</span></span><br></pre></td></tr></table></figure>
<h2 id="更多"><a
href="https://www.cnblogs.com/zsql/p/13808417.html">更多</a></h2>
<h1 id="权限管理">权限管理</h1>
<blockquote>
<p>SQL 命令</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> jack@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> &quot;jack&quot; <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br><span class="line"><span class="comment">--  先来看一个例子，创建一个只允许从本地登录的超级用户jack，并允许将权限赋予别的用户，密码为：jack.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> jack;	<span class="comment">-- 查看权限</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">delete</span> <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">from</span> <span class="string">&#x27;jack&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;	<span class="comment">-- 回收权限</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;jack&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;	<span class="comment">-- 删除用户</span></span><br><span class="line"></span><br><span class="line">rename <span class="keyword">user</span> <span class="string">&#x27;jack&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">to</span> <span class="string">&#x27;jim&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;	<span class="comment">-- 重命名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="operator">=</span> PASSWORD(<span class="string">&#x27;123456&#x27;</span>);	<span class="comment">-- 修改密码</span></span><br></pre></td></tr></table></figure>
<h2 id="参考-1"><a
href="https://www.cnblogs.com/Richardzhu/p/3318595.html">参考</a></h2>
<h1 id="备份">备份</h1>
<blockquote>
<p>MySQL 可视化工具，转储 sql 文件</p>
</blockquote>
<blockquote>
<p>mysqldump 命令行使用</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mysqldump -h主机 -u用户名 -p密码 数据库 表名 &gt;物理磁盘位置/文件名.sql</span></span><br><span class="line">mysqldump -hlocalhost -uroot -proot <span class="built_in">test</span> user &gt;C:/Users/18339/Desktop/a.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysqldump -h主机 -u用户名 -p密码 数据库 表1 表2 &gt;物理磁盘位置/文件名.sql</span></span><br><span class="line">mysqldump -hlocalhost -uroot -proot <span class="built_in">test</span> user teacher &gt;C:/Users/18339/Desktop/a.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysqldump -h主机 -u用户名 -p密码 数据库 &gt;物理磁盘位置/文件名.sql</span></span><br><span class="line">mysqldump -hlocalhost -uroot -proot <span class="built_in">test</span> &gt;C:/Users/18339/Desktop/a.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆情况下，切换到指定数据库</span></span><br><span class="line"><span class="comment"># source 备份文件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> C:/Users/18339/Desktop/a.sql</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="三大范式">三大范式</h1>
<p><strong>第一范式</strong></p>
<p>1NF是对属性的<strong>原子性</strong>，要求属性具有原子性，不可再分解；</p>
<p>说明：在任何一个关系数据库中，第一范式（1NF）是对关系模式的基本要求，不满足第一范式（1NF）的数据库就不是关系数据库。</p>
<p><strong>第二范式</strong></p>
<p><strong>2NF要求记录有惟一标识，即不存在部分依赖；</strong></p>
<p>第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。</p>
<p><strong>第三范式</strong></p>
<p>3NF是对字段的<strong><code>冗余性</code></strong>，要求任何字段不能由其他字段派生出来，它要求字段没有冗余，即不存在传递依赖；</p>
<p>满足第三范式（3NF）必须先满足第二范式（2NF）。第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。</p>
<p><strong>总结：</strong>三大范式只是一般设计数据库的基本理念，可以建立冗余较小、结构合理的数据库。如果有特殊情况，当然要特殊对待，数据库设计最重要的是看需求跟性能，需求&gt;性能&gt;表结构。所以不能一味的去追求范式建立数据库。</p>
<h1 id="sql-注入">SQL 注入</h1>
<p>如果您通过网页获取用户输入的数据并将其插入一个MySQL数据库，那么就有可能发生SQL注入安全的问题。</p>
<p>所谓SQL注入，就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。</p>
<p>我们永远不要信任用户的输入，我们必须认定用户输入的数据都是不安全的，我们都需要对用户输入的数据进行过滤处理。</p>
<blockquote>
<p>防止SQL注入，我们需要注意以下几个要点：</p>
</blockquote>
<ul>
<li>1.永远不要信任用户的输入。对用户的输入进行校验，可以通过正则表达式，或限制长度；对单引号和
双"-"进行转换等。</li>
<li>2.永远不要使用动态拼装sql，可以使用参数化的sql或者直接使用存储过程进行数据查询存取。</li>
<li>3.永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。</li>
<li>4.不要把机密信息直接存放，加密或者hash掉密码和敏感的信息。</li>
<li>5.应用的异常信息应该给出尽可能少的提示，最好使用自定义的错误信息对原始错误信息进行包装</li>
<li>6.sql注入的检测方法一般采取辅助软件或网站平台来检测，软件一般采用sql注入检测工具jsky，网站平台就有亿思网站安全平台检测工具。MDCSOFT
SCAN等。采用MDCSOFT-IPS可以有效的防御SQL注入，XSS攻击等。</li>
</ul>
<p>因为内容太多了，所以将其拆分为以下内容</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/8d742da7.html">MySQL(一)</a></li>
<li><a
href="https://wnhyang.github.io/article/bd62c17f.html">MySQL(二)</a></li>
<li><a
href="https://wnhyang.github.io/article/f07c622d.html">MySQL(三)</a></li>
<li><a
href="https://wnhyang.github.io/article/47517b48.html">MySQL(四)（当前）</a></li>
</ul>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL（二）</title>
    <url>/article/bd62c17f.html</url>
    <content><![CDATA[<p>因为内容太多了，所以将其拆分为以下内容</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/8d742da7.html">MySQL(一)</a></li>
<li><a
href="https://wnhyang.github.io/article/bd62c17f.html">MySQL(二)（当前）</a></li>
<li><a
href="https://wnhyang.github.io/article/f07c622d.html">MySQL(三)</a></li>
<li><a
href="https://wnhyang.github.io/article/47517b48.html">MySQL(四)</a></li>
</ul>
<h1 id="参考">参考</h1>
<p><a
href="https://www.bilibili.com/video/BV1NJ411J79W">https://www.bilibili.com/video/BV1NJ411J79W</a></p>
<p><a
href="https://www.runoob.com/mysql/mysql-tutorial.html">https://www.runoob.com/mysql/mysql-tutorial.html</a></p>
<span id="more"></span>
<h1 id="mysql-数据管理">MySQL 数据管理</h1>
<h2 id="外键了解">外键（了解）</h2>
<p>【强制】不得使用外键与级联，一切外键概念必须在应用层解决。
说明：以学生和成绩的关系为例，学生表中的
student_id是主键，那么成绩表中的 student_id 则为外键。如果更新学生表中的
student_id，同时触发成绩表中的 student_id 更新，即为
级联更新。外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻
塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。
——阿里巴巴Java开发手册</p>
<h2 id="dml掌握">DML（掌握）</h2>
<blockquote>
<p>where</p>
</blockquote>
<table>
<colgroup>
<col style="width: 6%" />
<col style="width: 69%" />
<col style="width: 23%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">操作符</th>
<th style="text-align: left;">描述</th>
<th style="text-align: left;">实例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">=</td>
<td
style="text-align: left;">等号，检测两个值是否相等，如果相等返回true</td>
<td style="text-align: left;">(A = B) 返回false。</td>
</tr>
<tr class="even">
<td style="text-align: left;">&lt;&gt;, !=</td>
<td
style="text-align: left;">不等于，检测两个值是否相等，如果不相等返回true</td>
<td style="text-align: left;">(A != B) 返回 true。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">&gt;</td>
<td style="text-align: left;">大于号，检测左边的值是否大于右边的值,
如果左边的值大于右边的值返回true</td>
<td style="text-align: left;">(A &gt; B) 返回false。</td>
</tr>
<tr class="even">
<td style="text-align: left;">&lt;</td>
<td style="text-align: left;">小于号，检测左边的值是否小于右边的值,
如果左边的值小于右边的值返回true</td>
<td style="text-align: left;">(A &lt; B) 返回 true。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">&gt;=</td>
<td
style="text-align: left;">大于等于号，检测左边的值是否大于或等于右边的值,
如果左边的值大于或等于右边的值返回true</td>
<td style="text-align: left;">(A &gt;= B) 返回false。</td>
</tr>
<tr class="even">
<td style="text-align: left;">&lt;=</td>
<td
style="text-align: left;">小于等于号，检测左边的值是否小于或等于右边的值,
如果左边的值小于或等于右边的值返回true</td>
<td style="text-align: left;">(A &lt;= B) 返回 true。</td>
</tr>
</tbody>
</table>
<p>如果我们想在 MySQL 数据表中读取指定的数据，WHERE
子句是非常有用的。</p>
<p>使用主键来作为 WHERE 子句的条件查询是非常快速的。</p>
<p>如果给定的条件在表中没有任何匹配的记录，那么查询不会返回任何数据。</p>
<h3 id="增加">增加</h3>
<blockquote>
<p>insert</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name ( field1, field2,...fieldN )</span><br><span class="line"><span class="keyword">VALUES</span> ( value1, value2,...valueN );</span><br></pre></td></tr></table></figure>
<h3 id="修改">修改</h3>
<blockquote>
<p>update</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name <span class="keyword">SET</span> field1<span class="operator">=</span><span class="keyword">new</span><span class="operator">-</span>value1, field2<span class="operator">=</span><span class="keyword">new</span><span class="operator">-</span>value2</span><br><span class="line">[<span class="keyword">WHERE</span> Clause]</span><br></pre></td></tr></table></figure>
<h3 id="删除">删除</h3>
<blockquote>
<p>delete</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name [<span class="keyword">WHERE</span> Clause]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>truncate</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> table_name</span><br></pre></td></tr></table></figure>
<blockquote>
<p>delete 与 truncate 的区别</p>
</blockquote>
<ul>
<li>相同点：都能删除表数据，不影响表结构</li>
<li>不同：
<ul>
<li>TRUNCATE 重新设置自增（归零）</li>
<li>TRUNCATE 不影响事务</li>
</ul></li>
</ul>
<h1 id="dql-查询数据">DQL 查询数据</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> [<span class="keyword">all</span> <span class="operator">|</span> <span class="keyword">distinct</span>] <span class="operator">&lt;</span>select_expr<span class="operator">&gt;</span>, <span class="operator">&lt;</span>select_expr<span class="operator">&gt;</span>, ...</span><br><span class="line"><span class="keyword">from</span> <span class="operator">&lt;</span>table_reference<span class="operator">&gt;</span></span><br><span class="line">[<span class="keyword">where</span> <span class="operator">&lt;</span>where_condition<span class="operator">&gt;</span>]</span><br><span class="line">[<span class="keyword">group</span> <span class="keyword">by</span> <span class="operator">&lt;</span>col_list<span class="operator">&gt;</span>]</span><br><span class="line">[<span class="keyword">having</span> <span class="operator">&lt;</span>having_condition<span class="operator">&gt;</span>]</span><br><span class="line">[<span class="keyword">order</span> <span class="keyword">by</span> <span class="operator">&lt;</span>order_condition<span class="operator">&gt;</span>]</span><br><span class="line">[distribute <span class="keyword">by</span> <span class="operator">&lt;</span>distribute_condition<span class="operator">&gt;</span> [sort <span class="keyword">by</span> <span class="operator">&lt;</span>sort_condition<span class="operator">&gt;</span>] ]</span><br><span class="line">[limit <span class="operator">&lt;</span>number<span class="operator">&gt;</span>]</span><br></pre></td></tr></table></figure>
<h2 id="简单示例">简单示例</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users	<span class="comment">-- 查询全部表数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> user_name <span class="keyword">as</span> 姓名,user_password <span class="keyword">as</span> 密码 <span class="keyword">from</span> users	<span class="comment">-- 查询指定字段 as 可以取别名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> CONCAT(<span class="string">&#x27;姓名：&#x27;</span>,user_name) <span class="keyword">as</span> 姓名 <span class="keyword">from</span> users	<span class="comment">-- 函数 CONCAT(&#x27;姓名：&#x27;,user_name)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> <span class="keyword">table</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> coutn(<span class="number">1</span>) <span class="keyword">from</span> <span class="keyword">table</span> </span><br></pre></td></tr></table></figure>
<blockquote>
<p>去重</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> user_id <span class="keyword">from</span> news	<span class="comment">-- 依据 user_id 去重</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>数据库的列</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> version()	<span class="comment">--查看数据库版本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="number">100</span><span class="operator">*</span><span class="number">3</span><span class="number">-1</span> <span class="keyword">as</span> 计算结果	<span class="comment">-- 计算</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@auto</span>_increment_increment	<span class="comment">-- 查询自增步长</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> state<span class="operator">+</span><span class="number">1</span> <span class="keyword">from</span> news	<span class="comment">-- 状态 +1</span></span><br></pre></td></tr></table></figure>
<h2 id="逻辑运算">逻辑运算</h2>
<table>
<thead>
<tr class="header">
<th>逻辑运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>and &amp;&amp;</td>
<td>与</td>
</tr>
<tr class="even">
<td>or ||</td>
<td>或</td>
</tr>
<tr class="odd">
<td>not !</td>
<td>非</td>
</tr>
</tbody>
</table>
<h2 id="模糊查询">模糊查询</h2>
<table>
<thead>
<tr class="header">
<th>运算符</th>
<th>语法</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>is null</td>
<td>a is null</td>
</tr>
<tr class="even">
<td>is not null</td>
<td>a is not null</td>
</tr>
<tr class="odd">
<td>between and</td>
<td>a between b and c</td>
</tr>
<tr class="even">
<td><strong>like</strong></td>
<td>a like b</td>
</tr>
<tr class="odd">
<td><strong>in</strong></td>
<td>a in (b,c,d...)</td>
</tr>
</tbody>
</table>
<p>like：</p>
<ul>
<li><p>%：0个或多个字符</p></li>
<li><p>_：1个字符</p></li>
</ul>
<h2 id="连接查询join-on">连接查询（join on）</h2>
<p><img data-src="https://pic4.zhimg.com/80/v2-7dd2e77f2d94fb2752900b05ba7ae67b_720w.jpg" alt="img" style="zoom: 67%;" /></p>
<table>
<thead>
<tr class="header">
<th>操作</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>INNER JOIN</strong></td>
<td>内连接,或等值连接，获取两个表中字段匹配关系的记录。</td>
</tr>
<tr class="even">
<td><strong>LEFT JOIN</strong></td>
<td>获取左表所有记录，即使右表没有对应匹配的记录。</td>
</tr>
<tr class="odd">
<td><strong>RIGHT JOIN</strong></td>
<td>获取右表所有记录，即使左表没有对应匹配的记录。</td>
</tr>
</tbody>
</table>
<p>例：</p>
<p><strong>等值连接：</strong>查找两个表中连接字段相等的记录。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--查询每个学生的学号、姓名、籍贯、年龄、专业、班级</span></span><br><span class="line"><span class="comment">--涉及到student和major两张表，用共有字段“学号”为连接字段</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--写法1：使用INNER JOIN</span></span><br><span class="line"><span class="keyword">SELECT</span> A.学号, A.姓名, A.籍贯, A.年龄, B.专业, B.班级</span><br><span class="line"><span class="keyword">FROM</span> student A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> major B   </span><br><span class="line"><span class="keyword">ON</span>  A.学号<span class="operator">=</span>B.学号</span><br><span class="line"></span><br><span class="line"><span class="comment">--写法2：--省去了INNER，直接写JOIN，与INNER JOIN没有区别</span></span><br><span class="line"><span class="keyword">SELECT</span> A.学号, A.姓名, A.籍贯, A.年龄, B.专业, B.班级</span><br><span class="line"><span class="keyword">FROM</span> student A</span><br><span class="line"><span class="keyword">JOIN</span> major B  </span><br><span class="line"><span class="keyword">ON</span>  A.学号<span class="operator">=</span>B.学号</span><br><span class="line"></span><br><span class="line"><span class="comment">--写法3： --使用WHERE，已经逐渐被淘汰</span></span><br><span class="line"><span class="keyword">SELECT</span> A.学号, A.姓名, A.籍贯, A.年龄, B.专业, B.班级</span><br><span class="line"><span class="keyword">FROM</span> student A, major B</span><br><span class="line"><span class="keyword">WHERE</span> A.学号<span class="operator">=</span>B.学号 </span><br><span class="line"></span><br><span class="line"><span class="comment">--上面三种写法的结果都是一样的，推荐使用写法2</span></span><br></pre></td></tr></table></figure>
<p><strong>自身连接：</strong>就是和自己进行连接查询，给一张表取两个不同的别名，然后附上连接条件。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--要在学生表里查询与 HH 同龄且籍贯也相同的学生信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> B.学号, B.姓名, B.性别, B.籍贯, B.年龄</span><br><span class="line"><span class="keyword">FROM</span> student A </span><br><span class="line"><span class="keyword">JOIN</span> student B</span><br><span class="line"><span class="keyword">ON</span> A.年龄<span class="operator">=</span>B.年龄 <span class="keyword">AND</span> A.籍贯<span class="operator">=</span>B.籍贯 <span class="keyword">AND</span> A.姓名<span class="operator">=</span><span class="string">&#x27;HH&#x27;</span></span><br></pre></td></tr></table></figure>
<p>参考：<a
href="https://zhuanlan.zhihu.com/p/68136613">https://zhuanlan.zhihu.com/p/68136613</a></p>
<h2 id="子查询嵌套查询">子查询、嵌套查询</h2>
<ul>
<li>格式1</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>select_expr<span class="operator">&gt;</span> <span class="keyword">from</span> (<span class="operator">&lt;</span>select_statement<span class="operator">&gt;</span>) <span class="operator">&lt;</span>sq_alias_name<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>格式2</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> (<span class="operator">&lt;</span>select_statement<span class="operator">&gt;</span>) <span class="keyword">from</span> <span class="operator">&lt;</span>table_name<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure>
<p>参数说明</p>
<ul>
<li><strong>select_expr</strong>：必填。格式为<code>col1_name, col2_name, 正则表达式,...</code>，表示待查询的普通列、分区列或正则表达式。</li>
<li><strong>select_statement</strong>必填。子查询语句。如果子查询语句为格式2，子查询结果必须只有一行。格式请参见<a
href="https://help.aliyun.com/document_detail/73777.html">SELECT语法</a>。</li>
<li><strong>sq_alias_name</strong>：必填。子查询的别名。</li>
<li><strong>table_name</strong>：必填。目标表名称。</li>
</ul>
<h2 id="分组">分组</h2>
<blockquote>
<p>[group by 子句 ]：分组子句，group
by子句主要的作用是分组，从而进行统计操作，而不是为了展示（展示的时候，只会展示分组记录的第一条记录），分组时，一般会结合使用count（）、max（）、min（）、avg（）、sum（）函数。</p>
</blockquote>
<p><strong>例：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> c_id,sex,<span class="built_in">count</span>(<span class="operator">*</span>),<span class="built_in">max</span>(height),<span class="built_in">min</span>(height),<span class="built_in">avg</span>(height),<span class="built_in">sum</span>(age),GROUP_CONCAT(name) <span class="keyword">from</span> my_student <span class="keyword">group</span> <span class="keyword">by</span> c_id ,sex;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>[having
子句]：having的作用类同where，而且having能做几乎所有where能做的事情，而where却不能做having能做的很多事情，主要是因为</p>
<p>where只能在磁盘提取数据的时候对数据进行操作；而在内存中对数据进行group
by分组之后的结果进行处理，只能通过having。</p>
</blockquote>
<p><strong>例：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> c_id,<span class="built_in">count</span>(<span class="operator">*</span>),<span class="built_in">max</span>(height),<span class="built_in">min</span>(height),<span class="built_in">avg</span>(height),<span class="built_in">sum</span>(age) <span class="keyword">from</span> my_student <span class="keyword">group</span> <span class="keyword">by</span> c_id <span class="keyword">having</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<h2 id="排序">排序</h2>
<ul>
<li><p>升序 ASC</p></li>
<li><p>降序：DESC</p></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> order_experssion[<span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span>]</span><br></pre></td></tr></table></figure>
<p>其中，order_experssion表示用于排序的列或列名及表达式。当有多个排序列时，每个排序了列用逗号隔开，而且列后都可以跟一个排序要求。</p>
<h2 id="分页">分页</h2>
<blockquote>
<p>一般的分页查询</p>
</blockquote>
<p>一般的分页查询使用简单的 limit 子句就可以实现。limit
子句声明如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> LIMIT [<span class="keyword">offset</span>,] <span class="keyword">rows</span> <span class="operator">|</span> <span class="keyword">rows</span> <span class="keyword">OFFSET</span> <span class="keyword">offset</span></span><br></pre></td></tr></table></figure>
<p>LIMIT 子句可以被用于指定 SELECT
语句返回的记录数。需注意以下几点：</p>
<ul>
<li>第一个参数指定第一个返回记录行的偏移量，注意从<code>0</code>开始</li>
<li>第二个参数指定返回记录行的最大数目</li>
<li>如果只给定一个参数：它表示返回最大的记录行数目</li>
<li>第二个参数为 -1
表示检索从某一个偏移量到记录集的结束所有的记录行</li>
<li>初始记录行的偏移量是 0(而不是 1)</li>
</ul>
<p><strong>例：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news limit <span class="number">0</span>,<span class="number">5</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>子查询优化</p>
</blockquote>
<h2 id="参考-1">参考</h2>
<p><a href="http://uusama.com/458.html">分页优化参考</a></p>
<p><a
href="https://blog.csdn.net/u011991249/article/details/64519945?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.baidujs&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.baidujs">select参考</a></p>
<p>因为内容太多了，所以将其拆分为以下内容</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/8d742da7.html">MySQL(一)</a></li>
<li><a
href="https://wnhyang.github.io/article/bd62c17f.html">MySQL(二)（当前）</a></li>
<li><a
href="https://wnhyang.github.io/article/f07c622d.html">MySQL(三)</a></li>
<li><a
href="https://wnhyang.github.io/article/47517b48.html">MySQL(四)</a></li>
</ul>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-Plus-Generator使用</title>
    <url>/article/52ebbcb.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p>之前有文章<a
href="https://wnhyang.github.io/article/524c985a.html">Mybatis-Generator使用</a>，现在体验了<code>Mybatis-Plus-Generator</code>，真心觉得有了它开发效率提高太多了，用起来是真的爽，爽！</p>
<p>参考：</p>
<p><a
href="https://baomidou.com/pages/779a6e/">https://baomidou.com/pages/779a6e/</a></p>
<p><a
href="https://blog.csdn.net/qq_20185737/article/details/121456598">https://blog.csdn.net/qq_20185737/article/details/121456598</a></p>
<span id="more"></span>
<h1 id="代码">代码</h1>
<blockquote>
<p>注意</p>
<p>适用版本：mybatis-plus-generator 3.5.1
及其以上版本，对历史版本不兼容！3.5.1 以下的请参考 <a
href="https://baomidou.com/pages/d357af/">代码生成器旧</a></p>
</blockquote>
<h2 id="依赖">依赖</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="yml">yml</h2>
<p>因为我习惯的三字段（<code>valid</code>、<code>create_time</code>、<code>update_time</code>），所以配置有逻辑删除</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/sl?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:mapper/**/*Mapper.xml</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">valid</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="generator">Generator</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wnhyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-08-19 10:20</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1、配置数据源</span></span><br><span class="line">        FastAutoGenerator.create(<span class="string">&quot;jdbc:mysql://localhost:3306/sl&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>)</span><br><span class="line">                <span class="comment">//2、全局配置</span></span><br><span class="line">                .globalConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.author(<span class="string">&quot;wnhyang&quot;</span>) <span class="comment">// 设置作者名</span></span><br><span class="line">                            .outputDir(System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/src/main/java&quot;</span>)   <span class="comment">//设置输出路径：项目的 java 目录下</span></span><br><span class="line">                            .commentDate(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>)   <span class="comment">//注释日期</span></span><br><span class="line">                            .dateType(DateType.TIME_PACK)   <span class="comment">//定义生成的实体类中日期的类型 TIME_PACK=LocalDateTime;ONLY_DATE=Date;</span></span><br><span class="line">                            .fileOverride()   <span class="comment">//覆盖之前的文件</span></span><br><span class="line">                            <span class="comment">// .enableSwagger()   //开启 swagger 模式</span></span><br><span class="line">                            .disableOpenDir();   <span class="comment">//禁止打开输出目录，默认打开</span></span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">//3、包配置</span></span><br><span class="line">                .packageConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.parent(<span class="string">&quot;com.wnh.shortlink&quot;</span>) <span class="comment">// 设置父包名</span></span><br><span class="line">                            .moduleName(<span class="string">&quot;&quot;</span>)   <span class="comment">//设置模块包名</span></span><br><span class="line">                            .entity(<span class="string">&quot;entity&quot;</span>)   <span class="comment">//pojo 实体类包名</span></span><br><span class="line">                            .service(<span class="string">&quot;service&quot;</span>) <span class="comment">//Service 包名</span></span><br><span class="line">                            .serviceImpl(<span class="string">&quot;service.impl&quot;</span>) <span class="comment">// ***ServiceImpl 包名</span></span><br><span class="line">                            .mapper(<span class="string">&quot;mapper&quot;</span>)   <span class="comment">//Mapper 包名</span></span><br><span class="line">                            .xml(<span class="string">&quot;mapper&quot;</span>)  <span class="comment">//Mapper XML 包名</span></span><br><span class="line">                            .controller(<span class="string">&quot;controller&quot;</span>) <span class="comment">//Controller 包名</span></span><br><span class="line">                            .other(<span class="string">&quot;utils&quot;</span>) <span class="comment">//自定义文件包名</span></span><br><span class="line">                            .pathInfo(Collections.singletonMap(OutputFile.mapperXml, System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/src/main/resources/mapper&quot;</span>));    <span class="comment">//配置 mapper.xml 路径信息：项目的 resources 目录下</span></span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">//4、策略配置</span></span><br><span class="line">                .strategyConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.addInclude(<span class="string">&quot;url_map&quot;</span>) <span class="comment">// 设置需要生成的数据表名</span></span><br><span class="line">                            .addTablePrefix(<span class="string">&quot;t_&quot;</span>, <span class="string">&quot;c_&quot;</span>) <span class="comment">// 设置过滤表前缀</span></span><br><span class="line"></span><br><span class="line">                            <span class="comment">//4.1、Mapper策略配置</span></span><br><span class="line">                            .mapperBuilder()</span><br><span class="line">                            .superClass(BaseMapper.class)   <span class="comment">//设置父类</span></span><br><span class="line">                            .formatMapperFileName(<span class="string">&quot;%sMapper&quot;</span>)   <span class="comment">//格式化 mapper 文件名称</span></span><br><span class="line">                            .enableMapperAnnotation()       <span class="comment">//开启 @Mapper 注解</span></span><br><span class="line">                            .formatXmlFileName(<span class="string">&quot;%sXml&quot;</span>)<span class="comment">//格式化 Xml 文件名称</span></span><br><span class="line"></span><br><span class="line">                            <span class="comment">//4.2、service 策略配置</span></span><br><span class="line">                            .serviceBuilder()</span><br><span class="line">                            .formatServiceFileName(<span class="string">&quot;%sService&quot;</span>) <span class="comment">//格式化 service 接口文件名称，%s进行匹配表名，如 UserService</span></span><br><span class="line">                            .formatServiceImplFileName(<span class="string">&quot;%sServiceImpl&quot;</span>) <span class="comment">//格式化 service 实现类文件名称，%s进行匹配表名，如 UserServiceImpl</span></span><br><span class="line"></span><br><span class="line">                            <span class="comment">//4.3、实体类策略配置</span></span><br><span class="line">                            .entityBuilder()</span><br><span class="line">                            .enableLombok() <span class="comment">//开启 Lombok</span></span><br><span class="line">                            .disableSerialVersionUID()  <span class="comment">//不实现 Serializable 接口，不生产 SerialVersionUID</span></span><br><span class="line">                            .logicDeleteColumnName(<span class="string">&quot;valid&quot;</span>)   <span class="comment">//逻辑删除字段名</span></span><br><span class="line">                            .naming(NamingStrategy.underline_to_camel)  <span class="comment">//数据库表映射到实体的命名策略：下划线转驼峰命</span></span><br><span class="line">                            .columnNaming(NamingStrategy.underline_to_camel)    <span class="comment">//数据库表字段映射到实体的命名策略：下划线转驼峰命</span></span><br><span class="line">                            .addTableFills(</span><br><span class="line">                                    <span class="keyword">new</span> <span class="title class_">Column</span>(<span class="string">&quot;create_time&quot;</span>, FieldFill.INSERT),</span><br><span class="line">                                    <span class="keyword">new</span> <span class="title class_">Column</span>(<span class="string">&quot;update_time&quot;</span>, FieldFill.INSERT_UPDATE)</span><br><span class="line">                            )   <span class="comment">//添加表字段填充，&quot;create_time&quot;字段自动填充为插入时间，&quot;modify_time&quot;字段自动填充为插入修改时间</span></span><br><span class="line">                            .enableTableFieldAnnotation()       <span class="comment">// 开启生成实体时生成字段注解</span></span><br><span class="line"></span><br><span class="line">                            <span class="comment">//4.4、Controller策略配置</span></span><br><span class="line">                            .controllerBuilder()</span><br><span class="line">                            .formatFileName(<span class="string">&quot;%sController&quot;</span>) <span class="comment">//格式化 Controller 类文件名称，%s进行匹配表名，如 UserController</span></span><br><span class="line">                            .enableRestStyle();  <span class="comment">//开启生成 @RestController 控制器</span></span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">//5、模板</span></span><br><span class="line">                .templateEngine(<span class="keyword">new</span> <span class="title class_">VelocityTemplateEngine</span>())</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    .templateEngine(new FreemarkerTemplateEngine())</span></span><br><span class="line"><span class="comment">                    .templateEngine(new BeetlTemplateEngine())</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//6、执行</span></span><br><span class="line">                .execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自动填充"><a
href="https://baomidou.com/pages/4c6bcf/">自动填充</a></h2>
<p><code>mybatis-plus</code>提供的自动填充功能，参考官网文档即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;start insert fill ....&quot;</span>);</span><br><span class="line">        <span class="comment">// 起始版本 3.3.0(推荐使用)</span></span><br><span class="line">        <span class="built_in">this</span>.strictInsertFill(metaObject, <span class="string">&quot;createTime&quot;</span>, LocalDateTime.class, LocalDateTime.now());</span><br><span class="line">        <span class="built_in">this</span>.strictInsertFill(metaObject, <span class="string">&quot;updateTime&quot;</span>, LocalDateTime.class, LocalDateTime.now());</span><br><span class="line">        <span class="comment">// 或者</span></span><br><span class="line">        <span class="comment">// 起始版本 3.3.3(推荐)</span></span><br><span class="line">        <span class="comment">// this.strictInsertFill(metaObject, &quot;createTime&quot;, () -&gt; LocalDateTime.now(), LocalDateTime.class);</span></span><br><span class="line">        <span class="comment">// 或者</span></span><br><span class="line">        <span class="comment">// 也可以使用(3.3.0 该方法有bug)</span></span><br><span class="line">        <span class="comment">// this.fillStrategy(metaObject, &quot;createTime&quot;, LocalDateTime.now());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;start update fill ....&quot;</span>);</span><br><span class="line">        <span class="comment">// 起始版本 3.3.0(推荐)</span></span><br><span class="line">        <span class="built_in">this</span>.strictUpdateFill(metaObject, <span class="string">&quot;updateTime&quot;</span>, LocalDateTime.class, LocalDateTime.now());</span><br><span class="line">        <span class="comment">// 或者</span></span><br><span class="line">        <span class="comment">// 起始版本 3.3.3(推荐)</span></span><br><span class="line">        <span class="comment">// this.strictUpdateFill(metaObject, &quot;updateTime&quot;, () -&gt; LocalDateTime.now(), LocalDateTime.class);</span></span><br><span class="line">        <span class="comment">// 或者</span></span><br><span class="line">        <span class="comment">// 也可以使用(3.3.0 该方法有bug)</span></span><br><span class="line">        <span class="comment">// this.fillStrategy(metaObject, &quot;updateTime&quot;, LocalDateTime.now());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="启动类">启动类</h2>
<p>添加扫描即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wnhyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-08-19 10:03</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.wnh.shortlink.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用<code>Mybatis-Plus</code>的体验就是爽，开发效率太高了（又重复了一遍😂）</p>
]]></content>
      <tags>
        <tag>Mybatis/Mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis中两种取值符号区别</title>
    <url>/article/dc4db25f.html</url>
    <content><![CDATA[<p>在使用Mybatis写sql语句时常会用到#{}和${}动态实现参数传递，这里就是来记录一下这两者的区别。</p>
<h1 id="参考">参考</h1>
<p><a
href="https://www.bilibili.com/video/BV1gs411j7kA">MyBatis视频教程</a></p>
<p>[#{}与<span
class="math inline">\({}的区别](https://blog.csdn.net/qian_qian_123/article/details/92844194?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522160759025519726885835134%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&amp;request_id=160759025519726885835134&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-3-92844194.pc_search_result_no_baidu_js&amp;utm_term=#{}%E4%B8%8E\)</span>{}%E5%8C%BA%E5%88%AB)</p>
<span id="more"></span>
<h1 id="区别">区别</h1>
<p>输入参数: parameterType</p>
<p>类型为简单类型(8个基本类型+String)</p>
<blockquote>
<p>a</p>
</blockquote>
<p>#{任意值}</p>
<p>${value}，其中的标识符只能是value</p>
<blockquote>
<p>b</p>
</blockquote>
<p>#{}自动给String类型加上' '(自动类型转换)</p>
<p>${}原样输出，但是适合于动态排序(动态字段)</p>
<p>例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sno,sname,sage <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="operator">=</span> #&#123;<span class="keyword">value</span>&#125;</span><br></pre></td></tr></table></figure>
<p>等价</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sno,sname,sage <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="operator">=</span><span class="string">&#x27;$&#123;value&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>动态排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sno,sname,sage <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> $&#123;<span class="keyword">value</span>&#125; <span class="keyword">asc</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>c</p>
</blockquote>
<p>#{}可以防止SQL注入</p>
<p>${}不防止</p>
<p><a
href="https://blog.csdn.net/q_all_is_well/article/details/81559612">原因</a></p>
]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>Mybatis/Mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis大key问题与scan命令</title>
    <url>/article/1e9afcf1.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p>前面不是写了一篇<a
href="https://wnhyang.github.io/article/8abc133f.html">点赞功能的一种实现</a>的文章吗</p>
<p>当时也提出了一些问题，今天就来解决其中的部分问题</p>
<span id="more"></span>
<h1 id="开始">开始</h1>
<p>先讲一讲背景吧，以免没看过之前文章的迷惑</p>
<p>还是以点赞功能为话题，这里主要解决之前存在的大<code>key</code>问题</p>
<h2 id="大key问题">大key问题</h2>
<p>由于<code>Redis</code>主线程为单线程模型，大<code>key</code>也会带来一些问题，如：</p>
<p>1、集群模式在<code>slot</code>分片均匀情况下，会出现数据和查询倾斜情况，部分有大<code>key</code>的<code>Redis</code>节点占用内存多，<code>QPS</code>高。</p>
<p>2、大<code>key</code>相关的删除或者自动过期时，会出现<code>qps</code>突降或者突升的情况，极端情况下，会造成主从复制异常，<code>Redis</code>服务阻塞无法响应请求。</p>
<h2 id="策略">策略</h2>
<p>基于之前的设计，这里进行改进</p>
<p>因为点赞属于经常性操作，为了避免频繁操作数据库，这里的策略是：</p>
<table>
<colgroup>
<col style="width: 5%" />
<col style="width: 48%" />
<col style="width: 29%" />
<col style="width: 17%" />
</colgroup>
<thead>
<tr class="header">
<th>redis</th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>string</td>
<td>key</td>
<td>value</td>
<td></td>
</tr>
<tr class="even">
<td></td>
<td>news:like:count:%s <br />新闻点赞数 string前缀:newsId</td>
<td>count<br />修改数</td>
<td></td>
</tr>
<tr class="odd">
<td>hash</td>
<td>key</td>
<td>field</td>
<td>value</td>
</tr>
<tr class="even">
<td></td>
<td>user:like:news:%s <br />用户点赞新闻 hash前缀:hashCode取模</td>
<td>%s:%s<br />userId:newsId</td>
<td>0（未点赞）/1（点赞）</td>
</tr>
<tr class="odd">
<td>set</td>
<td>key</td>
<td>value</td>
<td></td>
</tr>
<tr class="even">
<td></td>
<td>user:like:news:set <br />用户点赞操作hashKey集合</td>
<td>user:like:news:%s<br />hashCode取模</td>
<td></td>
</tr>
<tr class="odd">
<td></td>
<td>news:like:count:set <br />新闻点赞数操作newsId集合</td>
<td>%s<br />newsId</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="流程图">流程图</h2>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/点赞设计.6quc89ltvq40.webp"
alt="点赞设计" />
<figcaption aria-hidden="true">点赞设计</figcaption>
</figure>
<p>通过定时任务（使用的<code>JDK</code>自带的<code>ScheduledExecutorService</code>）将<code>redis</code>数据持久化到<code>mysql</code>，后来发现问题，在使用<code>ScheduledExecutorService</code>时，应该是由于在非Spring组件中注入Spring组件导致的空指针异常，所以最后改为使用SpringBoot的定时任务，使用起来很简单，之前定时任务文章也提到了。</p>
<p>点赞会产生非常多数据，做持久化时为了不生成那么多数据，利用了<code>valid</code>字段</p>
<h2 id="代码">代码</h2>
<p>下面是部分代码，可以参考一下</p>
<p><code>Redis</code>工具类，主要定义一些常量和<code>key</code>拼装工具</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认key过期时间(s)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">DEFAULT_TTL</span> <span class="operator">=</span> <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认key过期时间(minute)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">DEFAULT_TTL_MINUTES</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认key过期时间(day)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">DEFAULT_TTL_DAYS</span> <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模 256</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">KEY_MOLD</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * scan count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SCAN_COUNT</span> <span class="operator">=</span> <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;P, T&gt; String <span class="title function_">getKey</span><span class="params">(P keyPrefix, T id)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>().append(keyPrefix).append(id);</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getUserLikeNewsKey</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>()</span><br><span class="line">                .append(RedisKeyConstants.USER_LIKE_NEWS)</span><br><span class="line">                .append(Math.abs(userId.hashCode() &amp; KEY_MOLD - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getUserLikeNewsField</span><span class="params">(Long userId, Long newsId)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>()</span><br><span class="line">                .append(userId)</span><br><span class="line">                .append(RedisKeyConstants.SPLITTER)</span><br><span class="line">                .append(newsId);</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面主要是点赞动作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userLikeService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserLikeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserLikeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(UserLikeServiceImpl.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LIKE_STATE</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">UNLIKE_STATE</span> <span class="operator">=</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserLikeNewsMapper userLikeNewsMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">like</span><span class="params">(Long userId, Long newsId)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">userLikeNewsKey</span> <span class="operator">=</span> RedisUtils.getUserLikeNewsKey(userId);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">userLikeNewsField</span> <span class="operator">=</span> RedisUtils.getUserLikeNewsField(userId, newsId);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">newsLikeCountKey</span> <span class="operator">=</span> RedisUtils.getKey(RedisKeyConstants.NEWS_LIKE_COUNT, newsId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 大key问题</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">recordState</span> <span class="operator">=</span> (String) stringRedisTemplate.opsForHash().get(userLikeNewsKey, userLikeNewsField);</span><br><span class="line">        <span class="keyword">if</span> (!LIKE_STATE.equals(recordState)) &#123;</span><br><span class="line">            <span class="comment">// 未点赞，点赞</span></span><br><span class="line">            LOGGER.info(<span class="string">&quot;未点赞，点赞&quot;</span>);</span><br><span class="line">            stringRedisTemplate.opsForHash().put(userLikeNewsKey, userLikeNewsField, LIKE_STATE);</span><br><span class="line">            <span class="comment">// 操作key记录</span></span><br><span class="line">            stringRedisTemplate.opsForSet().add(RedisKeyConstants.USER_LIKE_NEWS_KEY_SET, userLikeNewsKey);</span><br><span class="line">            <span class="comment">// 新闻点赞数+1</span></span><br><span class="line">            stringRedisTemplate.opsForValue().increment(newsLikeCountKey);</span><br><span class="line">            <span class="comment">// 操作key记录</span></span><br><span class="line">            stringRedisTemplate.opsForSet().add(RedisKeyConstants.NEWS_LIKE_COUNT_KEY_SET, String.valueOf(newsId));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlike</span><span class="params">(Long userId, Long newsId)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">userLikeNewsKey</span> <span class="operator">=</span> RedisUtils.getUserLikeNewsKey(userId);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">userLikeNewsField</span> <span class="operator">=</span> RedisUtils.getUserLikeNewsField(userId, newsId);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">newsLikeCountKey</span> <span class="operator">=</span> RedisUtils.getKey(RedisKeyConstants.NEWS_LIKE_COUNT, newsId);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">recordState</span> <span class="operator">=</span> (String) stringRedisTemplate.opsForHash().get(userLikeNewsKey, userLikeNewsField);</span><br><span class="line">        <span class="keyword">if</span> (!UNLIKE_STATE.equals(recordState)) &#123;</span><br><span class="line">            <span class="comment">// 已点赞，取消点赞</span></span><br><span class="line">            LOGGER.info(<span class="string">&quot;已点赞，取消点赞&quot;</span>);</span><br><span class="line">            stringRedisTemplate.opsForHash().put(userLikeNewsKey, userLikeNewsField, UNLIKE_STATE);</span><br><span class="line">            <span class="comment">// 操作key记录</span></span><br><span class="line">            stringRedisTemplate.opsForSet().add(RedisKeyConstants.USER_LIKE_NEWS_KEY_SET, userLikeNewsKey);</span><br><span class="line">            <span class="comment">// 新闻点赞数-1</span></span><br><span class="line">            stringRedisTemplate.opsForValue().decrement(newsLikeCountKey);</span><br><span class="line">            <span class="comment">// 操作key记录</span></span><br><span class="line">            stringRedisTemplate.opsForSet().add(RedisKeyConstants.NEWS_LIKE_COUNT_KEY_SET, String.valueOf(newsId));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查用户是否点赞新闻</span></span><br><span class="line"><span class="comment">     * 暂未调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newsId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">liked</span><span class="params">(Long userId, Long newsId)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">userLikeNewsKey</span> <span class="operator">=</span> RedisUtils.getUserLikeNewsKey(userId);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">userLikeNewsField</span> <span class="operator">=</span> RedisUtils.getUserLikeNewsField(userId, newsId);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">recordState</span> <span class="operator">=</span> (String) stringRedisTemplate.opsForHash().get(userLikeNewsKey, userLikeNewsField);</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(recordState)) &#123;</span><br><span class="line">            <span class="keyword">return</span> LIKE_STATE.equals(recordState);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">UserLikeNews</span> <span class="variable">userLikeNews</span> <span class="operator">=</span> userLikeNewsMapper.selectValidByUserIdAndNewsId(userId, newsId);</span><br><span class="line">            <span class="keyword">return</span> Objects.nonNull(userLikeNews);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="scan">scan</h2>
<p>最后关于持久化，可以先看下面文章</p>
<p>https://aijishu.com/a/1060000000007477</p>
<p>这篇讲的是利用<code>scan</code>代替<code>keys</code></p>
<p>然后再看</p>
<p>https://cloud.tencent.com/developer/article/1650002</p>
<p>https://redis.io/commands/scan</p>
<p>这里讲的<code>scan</code>存在的问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="meta">@Scheduled(initialDelay = 60 * 1000, fixedDelay = 5 * 60 * 1000)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">persistUserLikeNews</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 定时任务持久化</span></span><br><span class="line">    Set&lt;String&gt; keys = stringRedisTemplate.opsForSet().members(RedisKeyConstants.USER_LIKE_NEWS_KEY_SET);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Objects.nonNull(keys)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            <span class="comment">// TODO cursor 问题</span></span><br><span class="line">            Cursor&lt;Map.Entry&lt;Object, Object&gt;&gt; cursor = stringRedisTemplate.opsForHash().scan(key</span><br><span class="line">                    , ScanOptions.scanOptions().match(<span class="string">&quot;*&quot;</span>).count(RedisUtils.SCAN_COUNT).build());</span><br><span class="line">            <span class="keyword">while</span> (cursor.hasNext()) &#123;</span><br><span class="line">                Map.Entry&lt;Object, Object&gt; entry = cursor.next();</span><br><span class="line">                <span class="type">String</span> <span class="variable">likeRecordField</span> <span class="operator">=</span> (String) entry.getKey();</span><br><span class="line"></span><br><span class="line">                <span class="type">UserLikeNews</span> <span class="variable">userLikeRecord</span> <span class="operator">=</span> getUserLikeNews(likeRecordField);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// ???检查用户和新闻还在不</span></span><br><span class="line"></span><br><span class="line">                <span class="type">UserLikeNews</span> <span class="variable">userLikeNews</span> <span class="operator">=</span> userLikeNewsMapper.selectByUserIdAndNewsId(userLikeRecord.getUserId(), userLikeRecord.getNewsId());</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">haveRecord</span> <span class="operator">=</span> Objects.nonNull(userLikeNews);</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">state</span> <span class="operator">=</span> (String) entry.getValue();</span><br><span class="line">                <span class="comment">// 点赞状态</span></span><br><span class="line">                <span class="keyword">if</span> (LikeConstants.LIKE.equals(state)) &#123;</span><br><span class="line">                    <span class="comment">// 有记录 valid true</span></span><br><span class="line">                    <span class="keyword">if</span> (haveRecord) &#123;</span><br><span class="line">                        userLikeNews.setValid(<span class="literal">true</span>);</span><br><span class="line">                        userLikeNewsMapper.updateByPrimaryKeySelective(userLikeNews);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 无记录 插入</span></span><br><span class="line">                        userLikeNewsMapper.insertSelective(userLikeRecord);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (LikeConstants.UNLIKE.equals(state)) &#123;</span><br><span class="line">                    <span class="comment">// 取消点赞状态</span></span><br><span class="line">                    <span class="keyword">if</span> (haveRecord) &#123;</span><br><span class="line">                        <span class="comment">// 有记录 valid false</span></span><br><span class="line">                        userLikeNews.setValid(<span class="literal">false</span>);</span><br><span class="line">                        userLikeNewsMapper.updateByPrimaryKeySelective(userLikeNews);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 删除已持久化的field，问题若出现异常，mysql可以依据事务回滚，但redis不会</span></span><br><span class="line">                stringRedisTemplate.opsForHash().delete(key, likeRecordField);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                cursor.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                LOGGER.error(<span class="string">&quot;cursor关闭失败&quot;</span>);</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断hashKey中是否还有元素未持久化</span></span><br><span class="line">            <span class="keyword">if</span> (stringRedisTemplate.opsForHash().size(key) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 从set中删除</span></span><br><span class="line">                stringRedisTemplate.opsForSet().remove(RedisKeyConstants.USER_LIKE_NEWS_KEY_SET, key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定时任务代码就不贴了，有很多实现方式</p>
<h1 id="总结">总结</h1>
<p>许多时候，我们真的需要实践才能得到真理</p>
<p>一开始畅想的很美好，以为实现很简单，等到手去做了，才发现总会遇到一些问题，不是那么顺畅，实践啊~实践啊</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis安装</title>
    <url>/article/c9f6f059.html</url>
    <content><![CDATA[<h1 id="参考">参考</h1>
<p>菜鸟教程：<a
href="https://www.runoob.com/redis/redis-tutorial.html">https://www.runoob.com/redis/redis-tutorial.html</a></p>
<p>下载地址：http://download.redis.io/releases/</p>
<p>博文：<a
href="https://blog.csdn.net/u022812849/article/details/108021517">https://blog.csdn.net/u022812849/article/details/108021517</a></p>
<span id="more"></span>
<p><strong>解压</strong></p>
<p>这⾥下载的是 <code>redis-6.0.6.tar.gz</code> 安装包，并将其直接放在了
<code>root</code> ⽬录下</p>
<p>1、在 <code>/usr/local/</code> 下创建 <code>redis</code>
⽂件夹并进⼊</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/</span><br><span class="line">mkdir redis</span><br><span class="line">cd redis</span><br></pre></td></tr></table></figure>
<p>2、将 <code>Redis</code> 安装包解压到 <code>/usr/local/redis</code>
中即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf /root/redis-5.0.8.tar.gz -C ./</span><br></pre></td></tr></table></figure>
<p>解压完之后， <code>/usr/local/redis</code> ⽬录中会出现⼀个
<code>redis-6.0.6</code> 的⽬录</p>
<p><strong>安装</strong></p>
<p>如果没有安装<code>wget</code>，先安装<code>yum install -y wget</code>。</p>
<p>make之前确保安装了gcc，未安装则需安装<code>yum install -y gcc</code>。</p>
<p><code>gcc -v</code> 查看版本</p>
<p><code>redis6</code> 需要 <code>gcc5.3</code>以上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">升级到 5.3及以上版本</span></span><br><span class="line">yum -y install centos-release-scl</span><br><span class="line">yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils</span><br><span class="line"></span><br><span class="line">scl enable devtoolset-9 bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意：scl命令启用只是临时的，退出xshell或者重启就会恢复到原来的gcc版本。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果要长期生效的话，执行如下：</span></span><br><span class="line">echo &quot;source /opt/rh/devtoolset-9/enable&quot; &gt;&gt;/etc/profile</span><br></pre></td></tr></table></figure>
<p>先运行<code>make distclean</code>清理上次make失败的文件和目录，再次make。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd redis-5.0.8/</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<p><strong>启动</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd utils/</span><br><span class="line">./install_server.sh</span><br></pre></td></tr></table></figure>
<p><code>install_server.sh</code>可能出错误</p>
<p>打开install_server.sh，注释掉下面的内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">_pid_1_exe=<span class="string">&quot;<span class="subst">$(readlink -f /proc/1/exe)</span>&quot;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;_pid_1_exe##*/&#125;</span>&quot;</span> = systemd ]</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">then</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">	<span class="built_in">echo</span> <span class="string">&quot;This systems seems to use systemd.&quot;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">	<span class="built_in">echo</span> <span class="string">&quot;Please take a look at the provided example service unit files in this directory, and adapt and install them. Sorry!&quot;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">	<span class="built_in">exit</span> 1</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">fi</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">unset</span> _pid_1_exe</span></span><br></pre></td></tr></table></figure>
<p>以后就可以使用系统服务的命令来操作redis了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl stop redis_6379</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl status redis_6379</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl start redis_6379</span></span><br></pre></td></tr></table></figure>
<p>查看Redis服务启动情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status redis_6379.service</span><br></pre></td></tr></table></figure>
<p><strong>客户端测试</strong></p>
<p>启动⾃带的 redis-cli 客户端测试</p>
<p><code>ping</code> - <code>PONG</code></p>
<p><strong>设置远程连接和访问密码</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/redis/6379.conf</span><br></pre></td></tr></table></figure>
<p>将 <code>bind 127.0.0.1</code> 修改为
<code>0.0.0.0</code>完成允许远程连接</p>
<p>找到如下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">requirepass foobared</span></span><br></pre></td></tr></table></figure>
<p>去掉注释，将 <code>foobared</code>
修改为⾃⼰想要的密码，保存即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">requirepass root</span><br></pre></td></tr></table></figure>
<p>保存，重启 Redis 服务即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart redis_6379.service</span><br></pre></td></tr></table></figure>
<p>再次使用<code>redis-cli</code>进入</p>
<p>提示<code>NOAUTH Authentication required.</code>，既需要输入密码验证</p>
<p>输入<code>auth root</code>即可（root为之前设置的密码）</p>
<p>想要远程连接还需要</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开放防火墙端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新加载</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<p><strong>测试</strong></p>
<p><a
href="https://github.com/uglide/RedisDesktopManager/releases/tag/0.8.8">https://github.com/uglide/RedisDesktopManager/releases/tag/0.8.8</a></p>
<h1 id="命令">命令</h1>
<p>Redis 客户端的基本语法为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">redis-cli</span></span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br><span class="line">redis 127.0.0.1:6379&gt; PING</span><br><span class="line"></span><br><span class="line">PONG</span><br></pre></td></tr></table></figure>
<p>执行 <strong>PING</strong> 命令，该命令用于检测 redis
服务是否启动。</p>
<p>远程连接</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ redis-cli -h host -p port -a password</span><br><span class="line"></span><br><span class="line">$ redis-cli -h 127.0.0.1 -p 6379 -a <span class="string">&quot;mypass&quot;</span></span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br><span class="line">redis 127.0.0.1:6379&gt; PING</span><br><span class="line"></span><br><span class="line">PONG</span><br></pre></td></tr></table></figure>
<p>默认16个数据库，选择数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">select db</span><br></pre></td></tr></table></figure>
<p>查看数据库大小</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dbsize </span><br></pre></td></tr></table></figure>
<p>常用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set key value #设置k-v</span><br><span class="line"></span><br><span class="line">get key	#获取k-v</span><br><span class="line"></span><br><span class="line">key * #获取所有k</span><br><span class="line"></span><br><span class="line">flushdb #清空数据库</span><br><span class="line"></span><br><span class="line">flushall #清空全部数据库</span><br></pre></td></tr></table></figure>
<h1 id="总结">总结</h1>
<p>这篇文章仅仅是Redis安装，学习记录还有待整理。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ部署</title>
    <url>/article/28a4cb58.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p>最近在学习<code>RocketMQ</code>，但一直苦于没有合适的环境学习。我的电脑是<code>Windows</code>系统，虽然换上了专业版装上了<code>Docker</code>，而且也有虚拟机，平常也会通过这些环境学习，但是还是太不方便了，为了方便终于又用上了云服务器，这次是阿里的。</p>
<p>配置如下</p>
<blockquote>
<p>CPU&amp;内存 1核(vCPU)2 GiB</p>
</blockquote>
<blockquote>
<p>操作系统 CentOS 7.8 64位</p>
</blockquote>
<blockquote>
<p>当前使用带宽 1Mbps</p>
</blockquote>
<p>这次<code>RocketMQ</code>的配置包括，<code>RocketMQ（NameServer、Broker）</code>和控制台<code>RocketMQ-Dashboard</code></p>
<p>提要：基础的<code>JDK</code>和<code>Maven</code>这里不多提了，都安装配置好了，另外后面的<code>RocketMQ-Dashboard</code>采用<code>Docker</code>部署方式，<code>Docker</code>安装查看官网装上就好。</p>
<span id="more"></span>
<h1 id="rocketmq">RocketMQ</h1>
<p>https://rocketmq.apache.org/zh/docs/quickStart/02quickstart/</p>
<h2 id="准备rocketmq安装包">准备RocketMQ安装包</h2>
<p>官网提供有二进制包和源码包，区别是：源码包通过编译成为二进制包才可运行</p>
<p>这里直接准备<code>rocketmq-all-5.0.0-bin-release.zip</code>二进制包</p>
<h2 id="创建目录并解压">创建目录并解压</h2>
<p>选好目录解压</p>
<p>如果缺少<code>zip</code>和<code>unzip</code>，直接用下面命令安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y unzip zip</span><br></pre></td></tr></table></figure>
<p>然后解压即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unzip rocketmq-all-5.0.0-bin-release.zip</span><br></pre></td></tr></table></figure>
<p>解压后就有<code>rocketmq-all-5.0.0-bin-release</code></p>
<h2 id="修改配置">修改配置</h2>
<p>https://blog.csdn.net/qq359605040/article/details/124272238</p>
<p>官网启动方法在下面，建议先修改启动配置，不然很可能启动失败</p>
<p>先修改<code>nameserver</code>启动配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim bin/runserver.sh</span><br></pre></td></tr></table></figure>
<p>原有配置我已经注释掉了<code>#JAVA_OPT="$&#123;JAVA_OPT&#125; -server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m"</code></p>
<p>这个配置对于机器配置很高，所以我将配置改成下面的一行了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">choose_gc_options()</span><br><span class="line">&#123;</span><br><span class="line">    # Example of JAVA_MAJOR_VERSION value : &#x27;1&#x27;, &#x27;9&#x27;, &#x27;10&#x27;, &#x27;11&#x27;, ...</span><br><span class="line">    # &#x27;1&#x27; means releases befor Java 9</span><br><span class="line">    JAVA_MAJOR_VERSION=$(&quot;$JAVA&quot; -version 2&gt;&amp;1 | sed -r -n &#x27;s/.* version &quot;([0-9]*).*$/\1/p&#x27;)</span><br><span class="line">    if [ -z &quot;$JAVA_MAJOR_VERSION&quot; ] || [ &quot;$JAVA_MAJOR_VERSION&quot; -lt &quot;9&quot; ] ; then</span><br><span class="line">      #JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span><br><span class="line">      JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn128m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span><br><span class="line">      JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:+UseConcMarkSweepGC -XX:+UseCMSCompactAtFullCollection -XX:CMSInitiatingOccupancyFraction=70 -XX:+CMSParallelRemarkEnabled -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+CMSClassUnloadingEnabled -XX:SurvivorRatio=8 -XX:-UseParNewGC&quot;</span><br><span class="line">      JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -verbose:gc -Xloggc:$&#123;GC_LOG_DIR&#125;/rmq_srv_gc_%p_%t.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps&quot;</span><br><span class="line">      JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=30m&quot;</span><br><span class="line">    else</span><br><span class="line">      #JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms4g -Xmx4g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span><br><span class="line">      JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span><br><span class="line">      JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:+UseG1GC -XX:G1HeapRegionSize=16m -XX:G1ReservePercent=25 -XX:InitiatingHeapOccupancyPercent=30 -XX:SoftRefLRUPolicyMSPerMB=0&quot;</span><br><span class="line">      JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -Xlog:gc*:file=$&#123;GC_LOG_DIR&#125;/rmq_srv_gc_%p_%t.log:time,tags:filecount=5,filesize=30M&quot;</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来是<code>broker</code>启动配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim bin/runbroker.sh</span><br></pre></td></tr></table></figure>
<p>同样被注释的是<code>#JAVA_OPT="$&#123;JAVA_OPT&#125; -server -Xms8g -Xmx8g"</code>把参数改小了一些</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">choose_gc_log_directory</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -server -Xms8g -Xmx8g&quot;</span></span></span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m&quot;</span><br><span class="line">choose_gc_options</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:-OmitStackTraceInFastThrow&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:+AlwaysPreTouch&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:MaxDirectMemorySize=15g&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:-UseLargePages -XX:-UseBiasedLocking&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -Drocketmq.client.logUseSlf4j=true&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -Xdebug -Xrunjdwp:transport=dt_socket,address=9555,server=y,suspend=n&quot;</span></span></span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; $&#123;JAVA_OPT_EXT&#125;&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -cp $&#123;CLASSPATH&#125;&quot;</span><br></pre></td></tr></table></figure>
<p>最后修改<code>broker</code>配置</p>
<p>https://blog.csdn.net/zhwyj1019/article/details/81082254</p>
<p>修改此配置主要原因是可能出现上面链接的情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim conf/broker.conf</span><br></pre></td></tr></table></figure>
<p>添加后面的两行配置，我这里用的是阿里云服务器<code>IP</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brokerClusterName = DefaultCluster</span><br><span class="line">brokerName = broker-a</span><br><span class="line">brokerId = 0</span><br><span class="line">deleteWhen = 04</span><br><span class="line">fileReservedTime = 48</span><br><span class="line">brokerRole = ASYNC_MASTER</span><br><span class="line">flushDiskType = ASYNC_FLUSH</span><br><span class="line">namesrvAddr=IP:9876</span><br><span class="line">brokerIP1=IP</span><br></pre></td></tr></table></figure>
<h2 id="启动nameserver">启动NameServer</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动namesrv</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">nohup</span> sh bin/mqnamesrv &amp;</span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 验证namesrv是否启动成功</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">tail</span> -f ~/logs/rocketmqlogs/namesrv.log</span></span><br><span class="line">The Name Server boot success...</span><br></pre></td></tr></table></figure>
<h2 id="启动brokerproxy">启动Broker+Proxy</h2>
<p><code>NameServer</code>成功启动后，我们启动<code>Broke</code>r和<code>Proxy，5.x</code>
版本下我们建议使用 <code>Local</code> 模式部署，即 <code>Broker</code>
和 <code>Proxy</code> 同进程部署。<code>5.x</code> 版本也支持
<code>Broker</code> 和 <code>Proxy</code>
分离部署以实现更灵活的集群能力。详情参考<a
href="https://rocketmq.apache.org/zh/docs/deploymentOperations/15deploy">部署教程</a>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 先启动broker</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">nohup</span> sh bin/mqbroker -n localhost:9876 --enable-proxy &amp;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 验证broker是否启动成功, 比如, broker的ip是192.168.1.2 然后名字是broker-a</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">tail</span> -f ~/logs/rocketmqlogs/broker_default.log</span> </span><br><span class="line">The broker[broker-a,192.169.1.2:10911] boot success...</span><br></pre></td></tr></table></figure>
<h1 id="rocketmq-dashboard">RocketMQ-Dashboard</h1>
<p>https://github.com/apache/rocketmq-dashboard</p>
<p>官网有<code>docker</code>和源码两种部署方式，这里使用<code>docker</code>部署，而且我也非常推荐这种方式，方便简单</p>
<h2 id="拉取镜像">拉取镜像</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull apacherocketmq/rocketmq-dashboard:latest</span><br></pre></td></tr></table></figure>
<h2 id="启动">启动</h2>
<p>这里把<code>ip</code>修改为阿里云服务器的<code>ip</code>，因为我试了好多次总是存在<code>RemotingConnectException</code>异常，目前这样做是没问题的，而且要注意这里的<code>docker</code>内部端口不要改，因为这个镜像就是运行在<code>8080</code>端口的，外部无所谓</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name rocketmq-dashboard -e &quot;JAVA_OPTS=-Drocketmq.namesrv.addr=127.0.0.1:9876&quot; -p 8080:8080 -t apacherocketmq/rocketmq-dashboard:latest</span><br></pre></td></tr></table></figure>
<h1 id="防火墙与安全组">防火墙与安全组</h1>
<p>对于我们本地搭建的服务进程，本地访问是都是无感的，但是一旦用到了云服务器或是其他虚拟机不同ip服务进程，就要注意防火墙和安全组了。</p>
<h2 id="防火墙常用操作">防火墙常用操作</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent  （--permanent永久生效，没有此参数重启后失效）</span><br><span class="line"></span><br><span class="line">firewall-cmd --zone=public --list-ports  （查看所有开启的端口）</span><br><span class="line"> </span><br><span class="line">firewall-cmd --zone=public --remove-port=8080/tcp --permanent  （删除端口）</span><br><span class="line"></span><br><span class="line">firewall-cmd --reload （重启生效配置）</span><br></pre></td></tr></table></figure>
<h2 id="查看端口">查看端口</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -ntulp |grep 80</span><br></pre></td></tr></table></figure>
<h2 id="安全组">安全组</h2>
<p>安全组的话针对云服务器，我们开放了防火墙后还需要到对应的云服务管理台开放对应端口，我们才可以正常访问。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>RocketMQ</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM(新)</title>
    <url>/article/423c4963.html</url>
    <content><![CDATA[<p>第一次<a
href="https://wnhyang.github.io/article/254393f0.html">尝试</a>，是因为急于完成期末作业，赶着时间学的，参考了一些文章和视频配置的，对于其中的配置只是照猫画虎，理解只有一点点，现在趁着寒假，把整个又学习了一下，这次真的有了比上次深刻多了的理解。</p>
<h1 id="参考">参考</h1>
<p><a
href="https://www.bilibili.com/video/BV1aE41167Tu">【狂神说Java】SpringMVC最新教程IDEA版通俗易懂</a></p>
<span id="more"></span>
<h1 id="ssm整合">SSM整合</h1>
<h2 id="数据库创建">数据库创建</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE ssmbuild;</span><br><span class="line">USE ssmbuild;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `books`(</span><br><span class="line">`bookID` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;书id&#x27;</span>,</span><br><span class="line">`bookName` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;书名&#x27;</span>,</span><br><span class="line">`bookCounts` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;数量&#x27;</span>,</span><br><span class="line">`detail` <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;描述&#x27;</span>,</span><br><span class="line">KEY `bookID`(`bookID`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `books`(`bookID`,`bookName`,`bookCounts`,`detail`)<span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;从入门到放弃&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;MySQL&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;从删库到跑路&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;Linux&#x27;</span>,<span class="number">5</span>,<span class="string">&#x27;从进门到进牢&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="基本环境搭建">基本环境搭建</h2>
<p>创建普通 maven项目</p>
<h2 id="导包">导包</h2>
<h3 id="基础依赖"><strong>基础依赖</strong></h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- junit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Servlet JSP --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="maven-资源过滤问题">maven 资源过滤问题</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 资源过滤问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="连接数据库">连接数据库</h2>
<p>idea 操作即可</p>
<h2 id="建包和配置文件">建包和配置文件</h2>
<ul>
<li>pojo</li>
<li>dao</li>
<li>service</li>
<li>controller</li>
<li>utils</li>
</ul>
<h2 id="mybatis-config.xml">mybatis-config.xml</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="applicationconext.xml">applicationConext.xml</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="db.properties">db.properties</h2>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>
<h2 id="pojo-实体类"><strong>pojo 实体类</strong></h2>
<p>Books</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Books</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> bookID;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> bookCounts;</span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里用到了 lombok</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="dao">dao</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.wnh.dao.BookMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="bookmapper-接口">BookMapper 接口</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookMapper</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">addBook</span><span class="params">(Books books)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteBookById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateBook</span><span class="params">(Books books)</span>;</span><br><span class="line"></span><br><span class="line">    Books <span class="title function_">queryBookById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;Books&gt; <span class="title function_">queryAllBook</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="bookmapper.xml">BookMapper.xml</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.wnh.dao.BookMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">        insert into books(bookName, bookCounts, detail)</span><br><span class="line">        values (#&#123;bookName&#125;, #&#123;bookCounts&#125;, #&#123;detail&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">        update books</span><br><span class="line">        set bookName=#&#123;bookName&#125;,</span><br><span class="line">            bookCounts=#&#123;bookCounts&#125;,</span><br><span class="line">            detail=#&#123;detail&#125;</span><br><span class="line">        where bookID = #&#123;bookID&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBookById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete</span><br><span class="line">        from books</span><br><span class="line">        where bookID = #&#123;bookID&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBookById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from books</span><br><span class="line">        where bookID = #&#123;bookID&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAllBook&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">        select * from books</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="mybatis-config.xml-1">mybatis-config.xml</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源，交给 Spring 去做 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.wnh.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 后面加入包扫描后一定要去掉 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.wnh.dao.BookMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>mybatis-config.xml 只留下 typeAliases 和 setting 即可</p>
<h2 id="service">Service</h2>
<h3 id="bookservice-接口">BookService 接口</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">addBook</span><span class="params">(Books books)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteBookById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateBook</span><span class="params">(Books books)</span>;</span><br><span class="line"></span><br><span class="line">    Books <span class="title function_">queryBookById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;Books&gt; <span class="title function_">queryAllBook</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="bookserviceimpl-实现类">BookServiceImpl 实现类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器：测试加入 Service 注解后 构造器可直接注入 dao接口，而 set方法不行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookServiceImpl</span><span class="params">(BookMapper bookMapper)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookMapper = bookMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addBook</span><span class="params">(Books books)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.addBook(books);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteBookById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.deleteBookById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateBook</span><span class="params">(Books books)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.updateBook(books);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Books <span class="title function_">queryBookById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryBookById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Books&gt; <span class="title function_">queryAllBook</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryAllBook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="spring-dao.xml">spring-dao.xml</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.关联数据库配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:db.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.数据库连接池 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库连接池</span></span><br><span class="line"><span class="comment">        dbcp 半自动化操作 不能自动连接</span></span><br><span class="line"><span class="comment">        c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.sqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 绑定 Mybatis配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 dao 接口扫描包，可以动态的实现 dao接口注入到 Spring容器中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入 sqlSessionFactory --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描 dao包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.wnh.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="spring-service.xml">spring-service.xml</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.扫描 service包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wnh.service&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.将业务类注入 Spring 这里省略因为使用了注解方式</span></span><br><span class="line"><span class="comment">        service包下实现类注解 @Service</span></span><br><span class="line"><span class="comment">        若是构造方法注入 dao接口不用多余操作</span></span><br><span class="line"><span class="comment">        若是 set方法注入 需要再加上 @Autowired</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="增加-web-支持">增加 Web 支持</h2>
<p>右键项目 -&gt; Add Frameworks Support -&gt; 勾选 Web Application
-&gt; OK</p>
<p><img data-src="https://img.imgdb.cn/item/60334aea5f4313ce258c51b9.png" style="zoom:67%;" /></p>
<h2 id="web.xml">web.xml</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 DispatcherServlet：这是 SpringMVC 的核心： 请求分发器，前端控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 注意 classpath: 应指向总的 Spring配置，不然会导致 Controller注入 Service失败--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动级别 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- /：匹配所有请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 乱码过滤 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- session 过期时间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="springmvc.xml">springmvc.xml</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.静态资源过滤 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/view/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4.扫描包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wnh.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="需要的话可以加上">需要的话可以加上</h3>
<p>处理 JSON 配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jacksonMessageConverter&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>文件上传配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文件上传 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 编码格式与 JSP 的 PageEncoding 属性一致 默认为 ISO-8859-1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上传文件的最大上限，单位为字节 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSizePerFile&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5242880&quot;</span>/&gt;</span><span class="comment">&lt;!--5M--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;40960&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>拦截器配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置拦截器作用的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.wnh.interceptor.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>等</p>
<h2 id="注意">注意</h2>
<p>Project Structure -&gt; Project Settings -&gt; Artifacts -&gt;
WEB-INF目录下新建 lib目录，导入依赖</p>
<figure>
<img data-src="https://img.imgdb.cn/item/60334a5e5f4313ce258c0a3f.png"
alt="ssm" />
<figcaption aria-hidden="true">ssm</figcaption>
</figure>
<h1 id="测试">测试</h1>
]]></content>
      <tags>
        <tag>Spring Framework</tag>
        <tag>Mybatis/Mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM整合</title>
    <url>/article/254393f0.html</url>
    <content><![CDATA[<p>初学，很多知识不知道，只想简单记录一下</p>
<h1 id="参考">参考：</h1>
<p><a
href="https://mp.weixin.qq.com/s/SDxqGu_il3MUCTcN1EYrng">狂神说SpringMVC05：整合SSM框架</a></p>
<p><a
href="https://yichun.blog.csdn.net/article/details/100192558">史上最详细的IDEA优雅整合Maven+SSM框架（详细思路+附带源码）</a></p>
<span id="more"></span>
<h1 id="声明">声明</h1>
<p>这不是教程，简单的个人记录而已</p>
<blockquote>
<p>环境要求</p>
</blockquote>
<h1 id="环境">环境：</h1>
<ul>
<li>IDEA2019</li>
<li>MySQL5.5.27</li>
<li>Tomcat9</li>
<li>Maven3.6</li>
</ul>
<h2 id="数据库环境">数据库环境</h2>
<p>一个包含数据库表的数据库</p>
<h2 id="基本环境搭建">基本环境搭建</h2>
<h3 id="新建maven项目">1、新建Maven项目</h3>
<h3 id="pom.xml">2、pom.xml</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring版本号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.6.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatis版本号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log4j日志文件管理包版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.7.7<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mysql驱动版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring核心包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-oxm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入Mysql驱动jar包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入dbcp的jar包，用来在applicationContext.xml中配置数据库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatis核心包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatis/spring包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   json --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.41<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- jsp/servlet/EL/JSTL --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- log start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="项目结构">3、项目结构</h3>
<figure>
<img data-src="https://pic.downk.cc/item/5fd0d44e3ffa7d37b34bb7da.jpg"
alt="项目结构" />
<figcaption aria-hidden="true">项目结构</figcaption>
</figure>
<h3 id="基本结构和框架">4、基本结构和框架</h3>
<ul>
<li>mybatis-config.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">       <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>applicationContext.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="mybatis层">Mybatis层</h2>
<h3 id="数据库配置文件-db.properties">1、数据库配置文件
db.properties</h3>
<p>注意：MySQL版本大于8要在url加入时区配置（查资料吧）</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ex2?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.maxActive</span>=<span class="string">30</span></span><br><span class="line"><span class="attr">jdbc.maxIdle</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">jdbc.initialSize</span>=<span class="string">5</span></span><br></pre></td></tr></table></figure>
<h3 id="mybatis核心配置">2、MyBatis核心配置</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">       <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.xx.pojo&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/xx/dao/xxMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="数据库实体类com.xx.pojo.xx">3、数据库实体类com.xx.pojo.xx</h3>
<p>使用lombok插件，会简单一些，但只建议个人开发使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br></pre></td></tr></table></figure>
<h3 id="dao层的-mapper接口">4、Dao层的 Mapper接口</h3>
<h3 id="编写接口对应的-mapper.xml-文件">5、编写接口对应的 Mapper.xml
文件</h3>
<h3 id="编写service层的接口和实现类">6、编写Service层的接口和实现类</h3>
<p>接口：</p>
<p>实现类：</p>
<h2 id="spring层">Spring层</h2>
<h3
id="spring整合mybatis这里使用dbcp连接池">1、Spring整合MyBatis，这里使用dbcp连接池</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置整合mybatis --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1.关联数据库文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:dp.properties&quot;</span> <span class="attr">ignore-unresolvable</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.数据库连接池 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数据库连接池</span></span><br><span class="line"><span class="comment">    dbcp 半自动化操作 不能自动连接</span></span><br><span class="line"><span class="comment">    c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>&gt;</span><span class="comment">&lt;!--destroy-method=&quot;close&quot;,在销毁dataSource bean时，关闭所有链接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.maxIdle&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.maxActive&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.initialSize&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置log4j日志（可选）</p>
<p>log4j.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">log4j.rootLogger</span> = <span class="string">error,stdout</span></span><br><span class="line"></span><br><span class="line"><span class="attr">log4j.logger.com.test</span>=<span class="string">debug</span></span><br><span class="line"><span class="attr">log4j.appender.stdout</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout.ConversionPattern</span> = <span class="string">[%-5p] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%n%m%n</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置日志--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:log4j.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="spring整合service层">2、Spring整合service层</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  开启事务注解，注册事务管理器驱动  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启扫描--&gt;</span><span class="comment">&lt;!--将Spring的相关注解的类注册为Spring的bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;Dao,POJO,Service&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="springmvc层">SpringMVC层</h2>
<h3 id="web.xml">1、web.xml</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>View/login.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- contextConfigLocation参数用来指定Spring的配置文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置spring核心监听器，默认会以 /WEB-INF/applicationContext.xml作为配置文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--DispatcherServlet--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--一定要注意:我们这里加载的是总的配置文件，之前被这里坑了！--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--encodingFilter--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">      org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--Session过期时间--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="spring-mvc.xml">2、spring-mvc.xml</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">   https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置SpringMVC --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 2.静态资源默认servlet配置--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 4.扫描web相关的bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.controller&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用拦截器</p>
<p>继承HandlerInterceptor接口，实现三个方法</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 86183</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//拦截请求</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;拦截请求&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取 session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (obj != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 没有登录且不是登录页面，转发到登录页面，并给出提示错误信息</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;还没登录，请先登录！&quot;</span>);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/View/login.jsp&quot;</span>).forward(request, response);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//拦截响应</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;拦截响应&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//渲染完毕</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;渲染完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定拦截路径，基于ant风格--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定不拦截路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/verify&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/toLogin&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/View/login.jsp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;Util.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="applicationcontext.xml">3、applicationContext.xml</h3>
<p>因为我是将前面的Spring层配置Mybatis和Service放在这一个文件里的，所以比较乱，初学嘛，不是怎么规范，建议还是参考大佬们的配置方案。</p>
<p>这里就不展示代码了，就是前面的组合（比较乱、不规范）。</p>
<blockquote>
<p>配置暂时结束</p>
</blockquote>
<p>编写代码吧！</p>
<blockquote>
<p>Tomcat配置</p>
</blockquote>
<figure>
<img data-src="https://pic.downk.cc/item/5fd0de2b3ffa7d37b356d3e1.jpg"
alt="Tomcat" />
<figcaption aria-hidden="true">Tomcat</figcaption>
</figure>
<p>说明：</p>
<p>选项 On 'Update' action 和 On frame deactivation</p>
<p>前一个： 启动Tomcat后点击更新启动按钮时，首选项的位置 后一个：
当项目IDEA失去焦点时要做的（可设置成热部署）</p>
<p>Update resourse：更新资源</p>
<p>Update classes and reasourse：更新类和资源</p>
<p>Redeploy：重新部署</p>
<p>Restart server：重启服务</p>
<h1 id="小结">小结</h1>
<ul>
<li>这个学期学到的东西真不少，曾经那么陌生的东西，现在甚至未来还要继续用</li>
</ul>
<p>人生就是要开开心心</p>
<p>喜欢的话就要认认真真</p>
]]></content>
      <tags>
        <tag>Spring Framework</tag>
        <tag>Mybatis/Mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro学习</title>
    <url>/article/c0a48af9.html</url>
    <content><![CDATA[<h1 id="参考">参考</h1>
<p>B站：<a
href="https://www.bilibili.com/video/BV16C4y187S9">https://www.bilibili.com/video/BV16C4y187S9</a></p>
<p>官网：https://shiro.apache.org/</p>
<h1 id="简介">简介</h1>
<p>是一款主流的 Java 安全框架，不依赖任何容器，可以运行在 Java SE 和
Java EE
项目中，它的主要作用是对访问系统的用户进行身份认证、授权、会话管理、加密等操作。</p>
<p>Shiro 就是用来解决安全管理的系统化框架。</p>
<span id="more"></span>
<h1 id="shiro-核心组件">Shiro 核心组件</h1>
<p>用户、角色、权限</p>
<p>会给角色赋予权限，给用户赋予角色</p>
<p>1、UsernamePasswordToken，Shiro
用来封装用户登录信息，使用用户的登录信息来创建令牌 Token。</p>
<p>2、SecurityManager，Shiro 的核心部分，负责安全认证和授权。</p>
<p>3、Suject，Shiro 的一个抽象概念，包含了用户信息。</p>
<p>4、Realm，开发者自定义的模块，根据项目的需求，验证和授权的逻辑全部写在
Realm 中。</p>
<p>5、AuthenticationInfo，用户的角色信息集合，认证时使用。</p>
<p>6、AuthorzationInfo，角色的权限信息集合，授权时使用。</p>
<p>7、DefaultWebSecurityManager，安全管理器，开发者自定义的 Realm
需要注入到 DefaultWebSecurityManager 进行管理才能生效。</p>
<p>8、ShiroFilterFactoryBean，过滤器工厂，Shiro
的基本运行机制是开发者定制规则，Shiro 去执行，具体的执行操作就是由
ShiroFilterFactoryBean 创建的一个个 Filter 对象来完成。</p>
<h1 id="spring-boot-整合-shiro">Spring Boot 整合 Shiro</h1>
<h2 id="pom.xml">pom.xml</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="数据库准备">数据库准备</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `perms` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `role` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">4</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>
<p>为方便只有一张表，正常应有用户表、权限表、角色表。。</p>
<table>
<thead>
<tr class="header">
<th>id</th>
<th>username</th>
<th>password</th>
<th>perms</th>
<th>role</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>zs</td>
<td>123</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>2</td>
<td>ls</td>
<td>123</td>
<td>manage</td>
<td></td>
</tr>
<tr class="odd">
<td>3</td>
<td>ww</td>
<td>123</td>
<td>manage</td>
<td>administrator</td>
</tr>
</tbody>
</table>
<h2 id="application.yml">application.yml</h2>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/shiro</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.html</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>
<h2 id="entity">entity</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String perms;</span><br><span class="line">    <span class="keyword">private</span> String role;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="mapper">mapper</h2>
<p>使用了Mybatis-plus</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Account&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="service">Service</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Account <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Account <span class="title function_">findByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="type">QueryWrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">        <span class="keyword">return</span> accountMapper.selectOne(wrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以先test测试一下</p>
<p>编写认证和授权规则：</p>
<blockquote>
<p>认证过滤器</p>
</blockquote>
<p>anon：无需认证。</p>
<p>authc：必须认证。</p>
<p>authcBasic：需要通过 HTTPBasic 认证。</p>
<p>user：不一定通过认证，只要曾经被 Shiro 记录即可，比如：记住我。</p>
<blockquote>
<p>授权过滤器</p>
</blockquote>
<p>perms：必须拥有某个权限才能访问。</p>
<p>role：必须拥有某个角色才能访问。</p>
<p>port：请求的端口必须是指定值才可以。</p>
<p>rest：请求必须基于 RESTful，POST、PUT、GET、DELETE。</p>
<p>ssl：必须是安全的 URL 请求，协议 HTTPS。</p>
<p>创建 3 个页面，main.html、manage.html、administrator.html</p>
<p>访问权限如下：</p>
<p>1、必须登录才能访问 main.html</p>
<p>2、当前用户必须拥有 manage 授权才能访问 manage.html</p>
<p>3、当前用户必须拥有 administrator 角色才能访问 administrator.html</p>
<h2 id="realm">Realm</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principalCollection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取当前登录的用户信息</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> (Account) subject.getPrincipal();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置角色</span></span><br><span class="line">        Set&lt;String&gt; roles = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        roles.add(account.getRole());</span><br><span class="line">        <span class="type">SimpleAuthorizationInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>(roles);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置权限</span></span><br><span class="line">        info.addStringPermission(account.getPerms());</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authenticationToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> accountService.findByUsername(token.getUsername());</span><br><span class="line">        <span class="keyword">if</span> (account != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(account, account.getPassword(), getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="shiroconfig">ShiroConfig</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">shiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span> DefaultWebSecurityManager securityManager)</span> &#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        factoryBean.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 权限设置</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;/main&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/manage&quot;</span>, <span class="string">&quot;perms[manage]&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/administrator&quot;</span>, <span class="string">&quot;roles[administrator]&quot;</span>);</span><br><span class="line">        factoryBean.setFilterChainDefinitionMap(map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置登录界面</span></span><br><span class="line">        factoryBean.setLoginUrl(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置未授权页面</span></span><br><span class="line">        factoryBean.setUnauthorizedUrl(<span class="string">&quot;/unauth&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">securityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;accountRealm&quot;)</span> AccountRealm accountRealm)</span> &#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        manager.setRealm(accountRealm);</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AccountRealm <span class="title function_">accountRealm</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AccountRealm</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroDialect <span class="title function_">shiroDialect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiroDialect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="shiro整合thymeleaf">Shiro整合Thymeleaf</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span> <span class="attr">xmlns:shiro</span>=<span class="string">&quot;http://www.thymeleaf.org/thymeleaf-extras-shiro&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>index<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;session.account!=null&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.account.username&#125;+&#x27;欢迎回来！&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/logout&quot;</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/main&quot;</span>&gt;</span>main<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;manage&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/manage&quot;</span>&gt;</span>manage<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasRole</span>=<span class="string">&quot;administrator&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/administrator&quot;</span>&gt;</span>administrator<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>main.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>main<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>manage.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>manage<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>administrator.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>administrator<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>login.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>项目结构一览</p>
<p><img data-src="https://pic.imgdb.cn/item/60caf4d4844ef46bb20aa0ff.jpg" /></p>
<h1 id="总结">总结</h1>
<p>有点乱，但也没办法，毕竟视频讲解是动态的，最终的博客文字仅仅只静态的，所以效果不好</p>
]]></content>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Mybatis/Mybatis-plus</tag>
        <tag>Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL（一）</title>
    <url>/article/8d742da7.html</url>
    <content><![CDATA[<p>因为内容太多了，所以将其拆分为以下内容</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/8d742da7.html">MySQL(一)（当前）</a></li>
<li><a
href="https://wnhyang.github.io/article/bd62c17f.html">MySQL(二)</a></li>
<li><a
href="https://wnhyang.github.io/article/f07c622d.html">MySQL(三)</a></li>
<li><a
href="https://wnhyang.github.io/article/47517b48.html">MySQL(四)</a></li>
</ul>
<h1 id="参考">参考</h1>
<p><a
href="https://www.bilibili.com/video/BV1NJ411J79W">https://www.bilibili.com/video/BV1NJ411J79W</a></p>
<p><a
href="https://www.runoob.com/mysql/mysql-tutorial.html">https://www.runoob.com/mysql/mysql-tutorial.html</a></p>
<span id="more"></span>
<h1 id="什么是数据库">什么是数据库？</h1>
<p>数据库（Database）是按照数据结构来组织、存储和管理数据的仓库。</p>
<p>每个数据库都有一个或多个不同的 API
用于创建，访问，管理，搜索和复制所保存的数据。</p>
<p>我们也可以将数据存储在文件中，但是在文件中读写数据速度相对较慢。</p>
<p>所以，现在我们使用关系型数据库管理系统（RDBMS）来存储和管理大数据量。所谓的关系型数据库，是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。</p>
<p>RDBMS 即关系数据库管理系统(Relational Database Management
System)的特点：</p>
<ul>
<li>1.数据以表格的形式出现</li>
<li>2.每行为各种记录名称</li>
<li>3.每列为记录名称所对应的数据域</li>
<li>4.许多的行和列组成一张表单</li>
<li>5.若干的表单组成database</li>
</ul>
<h1 id="mysql-连接">MySQL 连接</h1>
<blockquote>
<p>命令行连接</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@host</span>]# mysql <span class="operator">-</span>u root <span class="operator">-</span>p	<span class="comment">--连接</span></span><br><span class="line">Enter password:<span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;	<span class="comment">-- 查看所有数据库</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> DATABASE 数据库名;	<span class="comment">-- 创建数据库</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">drop</span> database 数据库名;	<span class="comment">-- 删除数据库</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> use 数据库名;	<span class="comment">-- 选择数据库 </span></span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;	<span class="comment">-- 查看该数据库中所有表</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> exit	<span class="comment">-- 退出</span></span><br><span class="line">Bye</span><br></pre></td></tr></table></figure>
<p>CRUD
（增删改查）；增加（Create）、检索（Retrieve）、更新（Update）和删除（Delete）</p>
<p>数据库 xxx 语言</p>
<p>DDL （Data Definition Language）</p>
<p>DML（Data Manipulation Language）</p>
<p>DQL （Data QueryLanguage）</p>
<p>DCL （Data Control Language）</p>
<h1 id="操作数据库">操作数据库</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">EXISTS</span> test	<span class="comment">-- 创建数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> database if <span class="keyword">EXISTS</span> test	<span class="comment">-- 删除数据库</span></span><br><span class="line"></span><br><span class="line">。。。。。。</span><br></pre></td></tr></table></figure>
<h2 id="数值类型">数值类型</h2>
<p>MySQL支持所有标准SQL数值数据类型。</p>
<p>这些类型包括严格数值数据类型(INTEGER、SMALLINT、DECIMAL和NUMERIC)，以及近似数值数据类型(FLOAT、REAL和DOUBLE
PRECISION)。</p>
<p>关键字INT是INTEGER的同义词，关键字DEC是DECIMAL的同义词。</p>
<p>BIT数据类型保存位字段值，并且支持MyISAM、MEMORY、InnoDB和BDB表。</p>
<p>作为SQL标准的扩展，MySQL也支持整数类型TINYINT、MEDIUMINT和BIGINT。下面的表显示了需要的每个整数类型的存储和范围。</p>
<table style="width:100%;">
<colgroup>
<col style="width: 6%" />
<col style="width: 21%" />
<col style="width: 32%" />
<col style="width: 32%" />
<col style="width: 8%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">类型</th>
<th style="text-align: left;">大小</th>
<th style="text-align: left;">范围（有符号）</th>
<th style="text-align: left;">范围（无符号）</th>
<th style="text-align: left;">用途</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">TINYINT</td>
<td style="text-align: left;">1 byte</td>
<td style="text-align: left;">(-128，127)</td>
<td style="text-align: left;">(0，255)</td>
<td style="text-align: left;">小整数值</td>
</tr>
<tr class="even">
<td style="text-align: left;">SMALLINT</td>
<td style="text-align: left;">2 bytes</td>
<td style="text-align: left;">(-32 768，32 767)</td>
<td style="text-align: left;">(0，65 535)</td>
<td style="text-align: left;">大整数值</td>
</tr>
<tr class="odd">
<td style="text-align: left;">MEDIUMINT</td>
<td style="text-align: left;">3 bytes</td>
<td style="text-align: left;">(-8 388 608，8 388 607)</td>
<td style="text-align: left;">(0，16 777 215)</td>
<td style="text-align: left;">大整数值</td>
</tr>
<tr class="even">
<td style="text-align: left;">INT或INTEGER</td>
<td style="text-align: left;">4 bytes</td>
<td style="text-align: left;">(-2 147 483 648，2 147 483 647)</td>
<td style="text-align: left;">(0，4 294 967 295)</td>
<td style="text-align: left;">大整数值</td>
</tr>
<tr class="odd">
<td style="text-align: left;">BIGINT</td>
<td style="text-align: left;">8 bytes</td>
<td style="text-align: left;">(-9,223,372,036,854,775,808，9 223 372 036
854 775 807)</td>
<td style="text-align: left;">(0，18 446 744 073 709 551 615)</td>
<td style="text-align: left;">极大整数值</td>
</tr>
<tr class="even">
<td style="text-align: left;">FLOAT</td>
<td style="text-align: left;">4 bytes</td>
<td style="text-align: left;">(-3.402 823 466 E+38，-1.175 494 351
E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td>
<td style="text-align: left;">0，(1.175 494 351 E-38，3.402 823 466
E+38)</td>
<td style="text-align: left;">单精度 浮点数值</td>
</tr>
<tr class="odd">
<td style="text-align: left;">DOUBLE</td>
<td style="text-align: left;">8 bytes</td>
<td style="text-align: left;">(-1.797 693 134 862 315 7 E+308，-2.225
073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693
134 862 315 7 E+308)</td>
<td style="text-align: left;">0，(2.225 073 858 507 201 4 E-308，1.797
693 134 862 315 7 E+308)</td>
<td style="text-align: left;">双精度 浮点数值</td>
</tr>
<tr class="even">
<td style="text-align: left;">DECIMAL</td>
<td style="text-align: left;">对DECIMAL(M,D)
，如果M&gt;D，为M+2否则为D+2</td>
<td style="text-align: left;">依赖于M和D的值</td>
<td style="text-align: left;">依赖于M和D的值</td>
<td style="text-align: left;">小数值</td>
</tr>
</tbody>
</table>
<h2 id="日期和时间类型">日期和时间类型</h2>
<p>表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。</p>
<p>每个时间类型有一个有效值范围和一个"零"值，当指定不合法的MySQL不能表示的值时使用"零"值。</p>
<p>TIMESTAMP类型有专有的自动更新特性，将在后面描述。</p>
<table>
<colgroup>
<col style="width: 7%" />
<col style="width: 10%" />
<col style="width: 48%" />
<col style="width: 15%" />
<col style="width: 19%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">类型</th>
<th style="text-align: left;">大小 ( bytes)</th>
<th style="text-align: left;">范围</th>
<th style="text-align: left;">格式</th>
<th style="text-align: left;">用途</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">DATE</td>
<td style="text-align: left;">3</td>
<td style="text-align: left;">1000-01-01/9999-12-31</td>
<td style="text-align: left;">YYYY-MM-DD</td>
<td style="text-align: left;">日期值</td>
</tr>
<tr class="even">
<td style="text-align: left;">TIME</td>
<td style="text-align: left;">3</td>
<td style="text-align: left;">'-838:59:59'/'838:59:59'</td>
<td style="text-align: left;">HH:MM:SS</td>
<td style="text-align: left;">时间值或持续时间</td>
</tr>
<tr class="odd">
<td style="text-align: left;">YEAR</td>
<td style="text-align: left;">1</td>
<td style="text-align: left;">1901/2155</td>
<td style="text-align: left;">YYYY</td>
<td style="text-align: left;">年份值</td>
</tr>
<tr class="even">
<td style="text-align: left;">DATETIME</td>
<td style="text-align: left;">8</td>
<td style="text-align: left;">1000-01-01 00:00:00/9999-12-31
23:59:59</td>
<td style="text-align: left;">YYYY-MM-DD HH:MM:SS</td>
<td style="text-align: left;">混合日期和时间值</td>
</tr>
<tr class="odd">
<td style="text-align: left;">TIMESTAMP</td>
<td style="text-align: left;">4</td>
<td style="text-align: left;">1970-01-01 00:00:00/2038结束时间是第
<strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19
11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td>
<td style="text-align: left;">YYYYMMDD HHMMSS</td>
<td style="text-align: left;">混合日期和时间值，时间戳</td>
</tr>
</tbody>
</table>
<h2 id="字符串类型">字符串类型</h2>
<p>字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">类型</th>
<th style="text-align: left;">大小</th>
<th style="text-align: left;">用途</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">CHAR</td>
<td style="text-align: left;">0-255 bytes</td>
<td style="text-align: left;">定长字符串</td>
</tr>
<tr class="even">
<td style="text-align: left;">VARCHAR</td>
<td style="text-align: left;">0-65535 bytes</td>
<td style="text-align: left;">变长字符串</td>
</tr>
<tr class="odd">
<td style="text-align: left;">TINYBLOB</td>
<td style="text-align: left;">0-255 bytes</td>
<td style="text-align: left;">不超过 255 个字符的二进制字符串</td>
</tr>
<tr class="even">
<td style="text-align: left;">TINYTEXT</td>
<td style="text-align: left;">0-255 bytes</td>
<td style="text-align: left;">短文本字符串</td>
</tr>
<tr class="odd">
<td style="text-align: left;">BLOB</td>
<td style="text-align: left;">0-65 535 bytes</td>
<td style="text-align: left;">二进制形式的长文本数据</td>
</tr>
<tr class="even">
<td style="text-align: left;">TEXT</td>
<td style="text-align: left;">0-65 535 bytes</td>
<td style="text-align: left;">长文本数据</td>
</tr>
<tr class="odd">
<td style="text-align: left;">MEDIUMBLOB</td>
<td style="text-align: left;">0-16 777 215 bytes</td>
<td style="text-align: left;">二进制形式的中等长度文本数据</td>
</tr>
<tr class="even">
<td style="text-align: left;">MEDIUMTEXT</td>
<td style="text-align: left;">0-16 777 215 bytes</td>
<td style="text-align: left;">中等长度文本数据</td>
</tr>
<tr class="odd">
<td style="text-align: left;">LONGBLOB</td>
<td style="text-align: left;">0-4 294 967 295 bytes</td>
<td style="text-align: left;">二进制形式的极大文本数据</td>
</tr>
<tr class="even">
<td style="text-align: left;">LONGTEXT</td>
<td style="text-align: left;">0-4 294 967 295 bytes</td>
<td style="text-align: left;">极大文本数据</td>
</tr>
</tbody>
</table>
<p><strong>注意</strong>：char(n) 和 varchar(n) 中括号中 n
代表字符的个数，并不代表字节个数，比如 CHAR(30) 就可以存储 30
个字符。</p>
<p>CHAR 和 VARCHAR
类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p>
<p>BINARY 和 VARBINARY 类似于 CHAR 和
VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p>
<p>BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB
类型：TINYBLOB、BLOB、MEDIUMBLOB 和
LONGBLOB。它们区别在于可容纳存储范围不同。</p>
<p>有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4
种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。</p>
<h2 id="字段属性">字段属性</h2>
<table>
<thead>
<tr class="header">
<th>字段属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Unsigned（无符号）</td>
<td>声明该列不为负数</td>
</tr>
<tr class="even">
<td>zerofill（零填充）</td>
<td>长度不够 0 填充</td>
</tr>
<tr class="odd">
<td>AUTO_INCREMENT（自增）</td>
<td>主键自增</td>
</tr>
<tr class="even">
<td>not null（非空）</td>
<td>不为空</td>
</tr>
<tr class="odd">
<td>default（默认）</td>
<td>设置默认值</td>
</tr>
</tbody>
</table>
<h2 id="创建数据库表">创建数据库表</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `sex` <span class="type">varchar</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">  `birthday` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE test	<span class="comment">-- 查看创建数据库 test 语句</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span>	<span class="comment">-- 查看创建表 USER 语句</span></span><br><span class="line"><span class="keyword">desc</span> <span class="keyword">user</span>	<span class="comment">-- 查看 user 表结构</span></span><br></pre></td></tr></table></figure>
<h2 id="数据库表类型">数据库表类型</h2>
<blockquote>
<p>引擎</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ENGINE<span class="operator">=</span>InnoDB</span><br></pre></td></tr></table></figure>
<p>InnoDB</p>
<p>MyISAM</p>
<blockquote>
<p>字符集编码</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>
<h2 id="修改删除表">修改删除表</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 旧表名 rename <span class="keyword">as</span> 新表名	<span class="comment">-- 修改表名 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 列属性	<span class="comment">-- 添加新字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 字段名 列属性	<span class="comment">-- 修改约束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 旧名 新名 列属性	<span class="comment">-- 字段重命名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 字段名	<span class="comment">-- 删除字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> 表名</span><br></pre></td></tr></table></figure>
<p>因为内容太多了，所以将其拆分为以下内容</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/8d742da7.html">MySQL(一)（当前）</a></li>
<li><a
href="https://wnhyang.github.io/article/bd62c17f.html">MySQL(二)</a></li>
<li><a
href="https://wnhyang.github.io/article/f07c622d.html">MySQL(三)</a></li>
<li><a
href="https://wnhyang.github.io/article/47517b48.html">MySQL(四)</a></li>
</ul>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity学习</title>
    <url>/article/330297af.html</url>
    <content><![CDATA[<h1 id="参考">参考</h1>
<p>B站：<a
href="https://www.bilibili.com/video/BV15a411A7kP">https://www.bilibili.com/video/BV15a411A7kP</a></p>
<p>官网：<a
href="https://spring.io/projects/spring-security">https://spring.io/projects/spring-security</a></p>
<h1 id="简介">简介</h1>
<p>Spring 是非常流行和成功的 Java 应用开发框架，Spring Security 正是
Spring 家族中的 成员。Spring Security 基于 Spring 框架，提供了一套 Web
应用安全性的完整解决方 案。</p>
<p>正如你可能知道的关于安全方面的两个主要区域是“认证”和“授权”（或者访问控
制），一般来说，Web 应用的安全性包括用户认证（Authentication）和用户授权
（Authorization）两个部分，这两点也是 Spring Security 重要核心功能。</p>
<p>（1）用户认证指的是：验证某个用户是否为系统中的合法主体，也就是说用户能否访问
该系统。用户认证一般要求用户提供用户名和密码。系统通过校验用户名和密码来完成认
证过程。通俗点说就是系统认为用户是否能登录</p>
<p>（2）用户授权指的是验证某个用户是否有权限执行某个操作。在一个系统中，不同用户
所具有的权限是不同的。比如对一个文件来说，有的用户只能进行读取，而有的用户可以
进行修改。一般来说，系统会为不同的用户分配不同的角色，而每个角色则对应一系列的
权限。通俗点讲就是系统判断用户是否有权限去做某些事情。</p>
<p>SpringSecurity 特点：</p>
<ul>
<li>和 Spring 无缝整合。</li>
<li>全面的权限控制。</li>
<li>专门为 Web 开发而设计。
<ul>
<li>旧版本不能脱离 Web 环境使用。</li>
<li>新版本对整个框架进行了分层抽取，分成了核心模块和 Web 模块。单独
引入核心模块就可以脱离 Web 环境。</li>
</ul></li>
<li>重量级。</li>
</ul>
<span id="more"></span>
<h1 id="入门示例">入门示例</h1>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Controller测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello security&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动测试，需要密码登录，默认username为user，密码为控制台打印的内容</p>
<h1 id="启动流程原理">启动流程原理</h1>
<p>UserDetailsService</p>
<p>PasswordEncoder</p>
<h1 id="web">Web</h1>
<p>设置登录系统的账号、密码</p>
<p>方式一</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure>
<p>方式二</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">BCryptPasswordEncoder</span> <span class="variable">encoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> encoder.encode(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        auth.inMemoryAuthentication().withUser(<span class="string">&quot;root&quot;</span>).password(password).roles(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方式三</p>
<p>step1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfigTest</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>step2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userDetailsService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUserDetailsService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        List&lt;GrantedAuthority&gt; auths= AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;role&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;root&quot;</span>,<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(<span class="string">&quot;456&quot;</span>),auths);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="加入数据库">加入数据库</h1>
<p>建立数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> users(</span><br><span class="line"> id <span class="type">bigint</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">username <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">unique</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">password <span class="type">varchar</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 密码 atguigu</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> users <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;张</span></span><br><span class="line"><span class="string">san&#x27;</span>,<span class="string">&#x27;$2a$10$2R/M6iU3mCZt3ByG7kwYTeeW0w7/UqdeXrb27zkBIizBvAven0/na&#x27;</span>);</span><br><span class="line"><span class="comment">-- 密码 atguigu</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> users <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;李</span></span><br><span class="line"><span class="string">si&#x27;</span>,<span class="string">&#x27;$2a$10$2R/M6iU3mCZt3ByG7kwYTeeW0w7/UqdeXrb27zkBIizBvAven0/na&#x27;</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> role(</span><br><span class="line">id <span class="type">bigint</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);<span class="keyword">insert</span> <span class="keyword">into</span> role <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;管理员&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> role <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;普通用户&#x27;</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> role_user(</span><br><span class="line">uid <span class="type">bigint</span>,</span><br><span class="line">rid <span class="type">bigint</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> role_user <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> role_user <span class="keyword">values</span>(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> menu(</span><br><span class="line">id <span class="type">bigint</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">url <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">parentid <span class="type">bigint</span>,</span><br><span class="line">permission <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> menu <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;系统管理&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;menu:system&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> menu <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;用户管理&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;menu:user&#x27;</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> role_menu(</span><br><span class="line">mid <span class="type">bigint</span>,</span><br><span class="line">rid <span class="type">bigint</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> role_menu <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1</span>);<span class="keyword">insert</span> <span class="keyword">into</span> role_menu <span class="keyword">values</span>(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> role_menu <span class="keyword">values</span>(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/demo</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure>
<p>entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Users</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UsersMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Users&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>user配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userDetailsService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUserDetailsService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UsersMapper usersMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 调用usersMapper方法查询数据库</span></span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;Users&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// where username = ?</span></span><br><span class="line">        wrapper.eq(<span class="string">&quot;username&quot;</span>, s);</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> usersMapper.selectOne(wrapper);</span><br><span class="line">        <span class="comment">// 判断</span></span><br><span class="line">        <span class="keyword">if</span> (users == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名不存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;role&quot;</span>);</span><br><span class="line">        <span class="comment">// 从数据库返回users对象，得到用户名、密码，返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(users.getUsername(), <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(users.getPassword()), auths);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自定义登录</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 自定义登陆页面</span></span><br><span class="line">    http.formLogin()</span><br><span class="line">            .loginPage(<span class="string">&quot;/login.html&quot;</span>) <span class="comment">// 登录页面设置</span></span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>) <span class="comment">// 登录访问路径</span></span><br><span class="line">            .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>).permitAll() <span class="comment">// 登录成功跳转路径</span></span><br><span class="line">            .and().authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;/test/hello&quot;</span>).permitAll() <span class="comment">//设置哪些路径可以直接访问，不需要认证</span></span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and().csrf().disable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="基于角色或权限进行访问控制">基于角色或权限进行访问控制</h1>
<p>hasAuthority</p>
<p>hasAnyAuthority</p>
<p>hasRole</p>
<p>hasAnyRole</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 自定义登陆页面</span></span><br><span class="line">    http.formLogin()</span><br><span class="line">            .loginPage(<span class="string">&quot;/login.html&quot;</span>) <span class="comment">// 登录页面设置</span></span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>) <span class="comment">// 登录访问路径</span></span><br><span class="line">            .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>).permitAll() <span class="comment">// 登录成功跳转路径</span></span><br><span class="line">            .and().authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;/test/hello&quot;</span>).permitAll() <span class="comment">//设置哪些路径可以直接访问，不需要认证</span></span><br><span class="line">            <span class="comment">// 1.hasAuthority()</span></span><br><span class="line">            <span class="comment">// .antMatchers(&quot;/test/index&quot;).hasAuthority(&quot;admins&quot;)</span></span><br><span class="line">            <span class="comment">// 2.hasAnyAuthority()</span></span><br><span class="line">            <span class="comment">// .antMatchers(&quot;/test/index&quot;).hasAnyAuthority(&quot;admins,manager&quot;)</span></span><br><span class="line">            <span class="comment">// 3.hasRole() ROLE_</span></span><br><span class="line">            .antMatchers(<span class="string">&quot;/test/index&quot;</span>).hasRole(<span class="string">&quot;sale&quot;</span>)</span><br><span class="line">            <span class="comment">// 4.hasAnyRole()</span></span><br><span class="line">            .antMatchers(<span class="string">&quot;/test/index&quot;</span>).hasAnyRole(<span class="string">&quot;sale,dba&quot;</span>)</span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and().csrf().disable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">    <span class="comment">// 调用usersMapper方法查询数据库</span></span><br><span class="line"></span><br><span class="line">    QueryWrapper&lt;Users&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// where username = ?</span></span><br><span class="line">    wrapper.eq(<span class="string">&quot;username&quot;</span>, s);</span><br><span class="line">    <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> usersMapper.selectOne(wrapper);</span><br><span class="line">    <span class="comment">// 判断</span></span><br><span class="line">    <span class="keyword">if</span> (users == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名不存在！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;admins&quot;</span>);</span><br><span class="line">    <span class="comment">// 从数据库返回users对象，得到用户名、密码，返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(users.getUsername(), <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(users.getPassword()), auths);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="页面">403页面</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置403页面</span></span><br><span class="line">http.exceptionHandling().accessDeniedPage(<span class="string">&quot;/unauth.html&quot;</span>);</span><br></pre></td></tr></table></figure>
<h1 id="注解">注解</h1>
<p><span class="citation" data-cites="Secured">@Secured</span></p>
<p>判断是否具有角色，另外需要注意的是这里匹配的字符串需要添加前缀“ROLE_“。</p>
<p>使用注解先要开启注解功能！</p>
<blockquote>
<p><span class="citation"
data-cites="EnableGlobalMethodSecurity">@EnableGlobalMethodSecurity</span>(securedEnabled=true)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/update&quot;)</span></span><br><span class="line"><span class="meta">@Secured(&#123;&quot;ROLE_sale&quot;,&quot;ROLE_manager&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello update&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span class="citation"
data-cites="PreAuthorize">@PreAuthorize</span></p>
<p>注解适合进入方法前的权限验证， <span class="citation"
data-cites="PreAuthorize">@PreAuthorize</span> 可以将登录用 户的
roles/permissions 参数传到方法中。</p>
<p>先开启注解功能：</p>
<blockquote>
<p><span class="citation"
data-cites="EnableGlobalMethodSecurity">@EnableGlobalMethodSecurity</span>(prePostEnabled
= true)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/update&quot;)</span></span><br><span class="line"><span class="comment">// @Secured(&#123;&quot;ROLE_sale&quot;,&quot;ROLE_manager&quot;&#125;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;admins&#x27;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello update&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span class="citation"
data-cites="PostAuthorize">@PostAuthorize</span></p>
<p>使用并不多，在方法执行后再进行权限验证，适合验证带有返回值
的权限.</p>
<p>先开启注解功能：</p>
<blockquote>
<p><span class="citation"
data-cites="EnableGlobalMethodSecurity">@EnableGlobalMethodSecurity</span>(prePostEnabled
= true)</p>
</blockquote>
<p>先执行，后验证权限，虽无权限，但还是输出了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/update&quot;)</span></span><br><span class="line"><span class="comment">// @Secured(&#123;&quot;ROLE_sale&quot;,&quot;ROLE_manager&quot;&#125;)</span></span><br><span class="line"><span class="comment">// @PreAuthorize(&quot;hasAnyAuthority(&#x27;admins&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@PostAuthorize(&quot;hasAnyAuthority(&#x27;admin&#x27;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;update...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello update&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span class="citation" data-cites="PostFilter">@PostFilter</span></p>
<p>权限验证之后对数据进行过滤 留下用户名是 admin1 的数据 表达式中的
filterObject 引用的是方法返回值 List 中的某一个元素</p>
<p><span class="citation" data-cites="PreFilter">@PreFilter</span></p>
<p>进入控制器之前对数据进行过滤</p>
<h1 id="注销">注销</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// logout</span></span><br><span class="line">http.logout().logoutUrl(<span class="string">&quot;/logout&quot;</span>).logoutSuccessUrl(<span class="string">&quot;/test/hello&quot;</span>).permitAll();</span><br></pre></td></tr></table></figure>
<h1 id="记住我">记住我</h1>
<p>原理</p>
<p>建表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `persistent_logins` (</span><br><span class="line"> `username` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> `series` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> `token` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> `last_used` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> </span><br><span class="line"><span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY (`series`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PersistentTokenRepository <span class="title function_">persistentTokenRepository</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">JdbcTokenRepositoryImpl</span> <span class="variable">jdbcTokenRepository</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTokenRepositoryImpl</span>();</span><br><span class="line">    jdbcTokenRepository.setDataSource(dataSource);</span><br><span class="line">    <span class="comment">// 可自动建表</span></span><br><span class="line">    <span class="comment">// jdbcTokenRepository.setCreateTableOnStartup(true);</span></span><br><span class="line">    <span class="keyword">return</span> jdbcTokenRepository;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 记住我</span></span><br><span class="line">.and().rememberMe().tokenRepository(persistentTokenRepository())</span><br><span class="line">.tokenValiditySeconds(<span class="number">60</span>)</span><br><span class="line">.userDetailsService(userDetailsService)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember-me&quot;</span>/&gt;</span>自动登录<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;login&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="csrf">CSRF</h1>
<p>CSRF 理解</p>
<p><strong>跨站请求伪造</strong>（英语：Cross-site request
forgery），也被称为 one-click attack 或者 session riding，通常缩写为
CSRF 或者 XSRF， 是一种挟制用户在当前已 登录的 Web
应用程序上执行非本意的操作的攻击方法。跟跨网站脚本（XSS）相比，XSS
利用的是用户对指定网站的信任，CSRF
利用的是网站对用户网页浏览器的信任。</p>
<p>跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个
自己曾经认证过的网站并运行一些操作（如发邮件，发消息，甚至财产操作如转账和购买
商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去运行。
这利用了 web
中用户身份验证的一个漏洞：<strong>简单的身份验证只能保证请求发自某个用户的
浏览器，却不能保证请求本身是用户自愿发出的。</strong></p>
<p>从 Spring Security 4.0 开始，默认情况下会启用 CSRF 保护，以防止 CSRF
攻击应用 程序，Spring Security CSRF 会针对 PATCH，POST，PUT 和 DELETE
方法进行防护。</p>
<p>默认是开启的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http.csrf().disable();</span></span><br></pre></td></tr></table></figure>
<h1 id="总结">总结</h1>
<p>简单的学习，原理部分没有深究，还有部分不完整，如结合数据库权限，当然还有分布式没有学习，目前分布式还有太多前期知识为准备，所以没有太注重这方面</p>
]]></content>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Mybatis/Mybatis-plus</tag>
        <tag>Spring Security</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/article/ae0f95e0.html</url>
    <content><![CDATA[<h1 id="参考">参考</h1>
<p>官方文档：<a
href="https://docs.spring.io/spring-framework/docs/5.3.5-SNAPSHOT/reference/html/web.html#spring-web">https://docs.spring.io/spring-framework/docs/5.3.5-SNAPSHOT/reference/html/web.html#spring-web</a></p>
<p>其他：<a
href="https://blog.csdn.net/litianxiang_kaola/article/details/79169148">https://blog.csdn.net/litianxiang_kaola/article/details/79169148</a></p>
<p><a
href="https://www.bilibili.com/video/BV1aE41167Tu">【狂神说Java】SpringMVC最新教程IDEA版通俗易懂</a></p>
<span id="more"></span>
<h1 id="配置">配置</h1>
<p><del>继承 Controller方式</del></p>
<p>注解方式</p>
<h2 id="web.xml">web.xml</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 DispatcherServlet：这是 SpringMVC 的核心： 请求分发器，前端控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动级别 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- /：匹配所有请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="spring-servlet.xml">spring-servlet.xml</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Spring扫描机制，此处扫描SpringMVC控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wnh.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置静态资源映射,防止静态资源被拦截 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&amp;lt;!&amp;ndash; 处理器映射器 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean class=&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&amp;lt;!&amp;ndash; 处理器适配器 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean class=&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 替代了上面注释的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/module/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;helloSpringMVC&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="乱码问题">乱码问题</h2>
<p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="requestmapping"><span class="citation"
data-cites="RequestMapping">@RequestMapping</span></h1>
<p>RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p>
<p>RequestMapping注解有六个属性，下面我们把这些属性分成三类进行说明。</p>
<p><strong>1、value属性、method属性</strong></p>
<p>value：指定请求的实际地址，指定的地址可以是URI Template模式</p>
<p>method：指定请求的method类型，例如GET、POST、PUT、DELETE等；</p>
<p><strong>2、consumes属性、produces属性</strong></p>
<p>consumes：指定处理请求的提交内容类型（Content-Type），例如application/json、text/html等</p>
<p>produces：指定返回的内容类型，仅当Request请求头中的(Accept)类型中包含该指定类型才返回</p>
<p><strong>3、params属性、headers属性</strong></p>
<p>params：指定request中必须包含某些参数值是，才让该方法处理</p>
<p>headers：指定request中必须包含某些指定的header值，才能让该方法处理请求</p>
<h2 id="restful风格">RestFul风格</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,a+b+<span class="string">&quot;的结果为&quot;</span>+(a+b));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/add/&#123;a&#125;/&#123;b&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">add0</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> a,<span class="meta">@PathVariable</span> <span class="type">int</span> b, Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;结果为&quot;</span>+(a+b));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原本url：<code>http://localhost:8080/springmvc/add?a=1&amp;b=2</code></p>
<p>RestFul：<code>http://localhost:8080/springmvc/add/3/4</code></p>
<h2 id="requestparam"><span class="citation"
data-cites="RequestParam">@RequestParam</span></h2>
<p>接受前端传递的参数，只有符合@RequestParam()配置才接收，若是对象可直接传入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/t1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test1</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name)</span> &#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="转发与重定向">转发与重定向</h1>
<p>配置视图解析器默认转发</p>
<ul>
<li>forward: //请求转发</li>
<li>redirect: //重定向</li>
</ul>
<p>重定向</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;redirect&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">redirect</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:must.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="ajax-与-json">AJAX 与 JSON</h1>
<h2 id="jackson">jackson</h2>
<p><strong>导包</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="实体类对象">实体类对象</h3>
<p><strong>Controller</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">```java</span><br><span class="line">@RequestMapping(value = &quot;j1&quot;,produces = &quot;text/json;charset=UTF-8&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String json1() throws JsonProcessingException &#123;</span><br><span class="line">    // jackson ObjectMapper</span><br><span class="line">    ObjectMapper mapper=new ObjectMapper();</span><br><span class="line"></span><br><span class="line">    User user=new User(1,&quot;小王&quot;,&quot;dbfd&quot;);</span><br><span class="line"></span><br><span class="line">    return mapper.writeValueAsString(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>SpringMVC 配置解决</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jacksonMessageConverter&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>结果</strong></p>
<p><code>&#123;"id":1,"name":"小王","pwd":"dbfd"&#125;</code></p>
<h3 id="简单集合">简单集合</h3>
<p><strong>Controller</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;j1&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    <span class="comment">// jackson ObjectMapper</span></span><br><span class="line">    ObjectMapper mapper=<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    List&lt;User&gt; userList=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    User user1=<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>,<span class="string">&quot;小王&quot;</span>,<span class="string">&quot;dbfd&quot;</span>);</span><br><span class="line">    User user2=<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>,<span class="string">&quot;大王&quot;</span>,<span class="string">&quot;55vgh&quot;</span>);</span><br><span class="line">    User user3=<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>,<span class="string">&quot;老王&quot;</span>,<span class="string">&quot;d785d&quot;</span>);</span><br><span class="line">    User user4=<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4</span>,<span class="string">&quot;少王&quot;</span>,<span class="string">&quot;86fd&quot;</span>);</span><br><span class="line"></span><br><span class="line">    userList.add(user1);</span><br><span class="line">    userList.add(user2);</span><br><span class="line">    userList.add(user3);</span><br><span class="line">    userList.add(user4);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mapper.writeValueAsString(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>结果</strong></p>
<p><code>[&#123;"id":1,"name":"小王","pwd":"dbfd"&#125;,&#123;"id":2,"name":"大王","pwd":"55vgh"&#125;,&#123;"id":3,"name":"老王","pwd":"d785d"&#125;,&#123;"id":4,"name":"少王","pwd":"86fd"&#125;]</code></p>
<h3 id="时间对象">时间对象</h3>
<p><strong>Controller</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;j2&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">json2</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    Date data=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>结果</strong></p>
<p><code>1613656289365</code></p>
<p>ObjectMapper 时间解析默认格式为：Timetamp：时间戳</p>
<p><strong>格式化</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;j2&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">json2</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    Date data=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line">    SimpleDateFormat sdf=<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(sdf.format(data));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>结果</strong></p>
<p><code>"2021-02-18 21:55:51"</code></p>
<p><strong>ObjectMapper 解决</strong></p>
<p>.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS,false)
关闭默认时间戳方式</p>
<p>.setDateFormat(sdf) 自定义时间格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value = &quot;j2&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String json2() throws JsonProcessingException &#123;</span><br><span class="line">    Date data=new Date();</span><br><span class="line"></span><br><span class="line">    // SimpleDateFormat sdf=new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">    //</span><br><span class="line">    // return new ObjectMapper().writeValueAsString(sdf.format(data));</span><br><span class="line"></span><br><span class="line">    return new ObjectMapper().configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS,false).writeValueAsString(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>结果</strong></p>
<p><code>"2021-02-18T14:00:26.890+0000"</code></p>
<p><strong>JsonUtil</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJson</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getJson(object, <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJson</span><span class="params">(Object object, String dataFormat)</span> &#123;</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭默认时间戳方式</span></span><br><span class="line">        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 自定义时间格式</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(dataFormat);</span><br><span class="line">        mapper.setDateFormat(sdf);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mapper.writeValueAsString(object);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="fastjson">fastjson</h2>
<p><strong>导包</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.41<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="测试"><strong>测试</strong></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;j4&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">json4</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;小王&quot;</span>, <span class="string">&quot;dbfd&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>, <span class="string">&quot;大王&quot;</span>, <span class="string">&quot;55vgh&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>, <span class="string">&quot;老王&quot;</span>, <span class="string">&quot;d785d&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4</span>, <span class="string">&quot;少王&quot;</span>, <span class="string">&quot;86fd&quot;</span>);</span><br><span class="line"></span><br><span class="line">    userList.add(user1);</span><br><span class="line">    userList.add(user2);</span><br><span class="line">    userList.add(user3);</span><br><span class="line">    userList.add(user4);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******Java对象 转 JSON字符*******&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> JSON.toJSONString(userList);</span><br><span class="line">    System.out.println(<span class="string">&quot;JSON.toJS0NString(list)==&gt;&quot;</span> + str1);</span><br><span class="line">    <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> JSON.toJSONString(user1);</span><br><span class="line">    System.out.println(<span class="string">&quot;JSON.toJS0NString(user1)==&gt;&quot;</span> + str2);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;\n****** JSON字符串 转 Java对象*******&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">jp_user1</span> <span class="operator">=</span> JSON.parseObject(str2, User.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;JSON. parseObject(str2,User.class)==&gt;&quot;</span> + jp_user1);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;\n****** Java对象 转 JSON对象*****&quot;</span>);</span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">jsonObject1</span> <span class="operator">=</span> (JSONObject) JSON.toJSON(user2);</span><br><span class="line">    System.out.println(<span class="string">&quot;(JSONObject) JSON. toJSON(user2)==&gt; &quot;</span> + jsonObject1.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;\n****** JSON对象 转 Java对象*****&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">to_java_user</span> <span class="operator">=</span> JSON.toJavaObject(jsonObject1, User.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;JSON. toJavaObject(jsonObject1, User.class)==&gt;&quot;</span> + to_java_user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*******Java对象 转 JSON字符*******</span><br><span class="line">JSON.toJS0NString(list)==&gt;[&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;小王&quot;,&quot;pwd&quot;:&quot;dbfd&quot;&#125;,&#123;&quot;id&quot;:2,&quot;name&quot;:&quot;大王&quot;,&quot;pwd&quot;:&quot;55vgh&quot;&#125;,&#123;&quot;id&quot;:3,&quot;name&quot;:&quot;老王&quot;,&quot;pwd&quot;:&quot;d785d&quot;&#125;,&#123;&quot;id&quot;:4,&quot;name&quot;:&quot;少王&quot;,&quot;pwd&quot;:&quot;86fd&quot;&#125;]</span><br><span class="line">JSON.toJS0NString(user1)==&gt;&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;小王&quot;,&quot;pwd&quot;:&quot;dbfd&quot;&#125;</span><br><span class="line"></span><br><span class="line">****** JSON字符串 转 Java对象*******</span><br><span class="line">JSON. parseObject(str2,User.class)==&gt;User(id=1, name=小王, pwd=dbfd)</span><br><span class="line"></span><br><span class="line">****** Java对象 转 JSON对象*****</span><br><span class="line">(JSONObject) JSON. toJSON(user2)==&gt; 大王</span><br><span class="line"></span><br><span class="line">****** JSON对象 转 Java对象*****</span><br><span class="line">JSON. toJavaObject(jsonObject1, User.class)==&gt;User(id=2, name=大王, pwd=55vgh)</span><br></pre></td></tr></table></figure>
<h3 id="实例">实例</h3>
<p><strong>后端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;addComment&quot;, produces = &quot;text/json;charset=UTF-8&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addComment</span><span class="params">(Comment comment)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> frontService.AddComment(comment);</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">    <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">LastId</span> <span class="operator">=</span> comment.getComment_id();</span><br><span class="line">        map.put(<span class="string">&quot;result&quot;</span>, <span class="string">&quot;success&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;cid&quot;</span>, LastId);</span><br><span class="line">        System.out.println(<span class="string">&quot;评论成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        map.put(<span class="string">&quot;result&quot;</span>, <span class="string">&quot;fail&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;评论失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> JSON.toJSONString(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>前端</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> css = &#123;</span><br><span class="line">        <span class="attr">marginLeft</span>: <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">        <span class="attr">marginRight</span>: <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="string">&#x27;70%&#x27;</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    $(<span class="string">&quot;#show&quot;</span>).<span class="title function_">css</span>(css);</span><br><span class="line">    $(<span class="string">&quot;#sendTo&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//获取值</span></span><br><span class="line">        <span class="keyword">var</span> uid = <span class="string">&#x27;$&#123;sessionScope.userS.userId&#125;&#x27;</span>;</span><br><span class="line">        <span class="keyword">var</span> uname = <span class="string">&#x27;$&#123;sessionScope.userS.userName&#125;&#x27;</span>;</span><br><span class="line">        <span class="keyword">var</span> nid = <span class="string">&#x27;$&#123;news.newsId&#125;&#x27;</span>;</span><br><span class="line">        <span class="keyword">var</span> content = $(<span class="string">&quot;#content&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">        <span class="keyword">var</span> uIcon = <span class="string">&#x27;$&#123;sessionScope.userS.userIcon&#125;&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (content !== <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">                <span class="attr">url</span>: <span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/addComment&quot;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">                <span class="comment">//注意序列化的值一定要放在最前面,并且不需要头部变量,不然获取的值得格式会有问题</span></span><br><span class="line">                <span class="attr">data</span>: &#123;<span class="attr">user_id</span>: uid, <span class="attr">news_id</span>: nid, <span class="attr">content</span>: content&#125;,</span><br><span class="line">                <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (data.<span class="property">result</span> === <span class="string">&#x27;success&#x27;</span>) &#123;</span><br><span class="line">                        <span class="title function_">alert</span>(<span class="string">&quot;评论成功&quot;</span>);</span><br><span class="line">                        <span class="keyword">var</span> iconSrc=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/Static/img/userIcon.png&quot;</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">&quot;&quot;</span> !== uIcon)&#123;</span><br><span class="line">                            iconSrc=uIcon;</span><br><span class="line">                        &#125;</span><br><span class="line">                        $(<span class="string">&quot;#content&quot;</span>).<span class="title function_">val</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">                        <span class="keyword">var</span> s = <span class="string">&#x27;&lt;div class=&quot;layui-card&quot; id=&quot;div_&#x27;</span> + data.<span class="property">cid</span> + <span class="string">&#x27;&quot;&gt;&#x27;</span> +</span><br><span class="line">                            <span class="string">&#x27;&lt;div class=&quot;layui-card-body&quot;&gt;&#x27;</span> +</span><br><span class="line">                            <span class="string">&#x27;&lt;div align=&quot;left&quot;&gt;&#x27;</span> +</span><br><span class="line">                            <span class="string">&#x27;&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/queryUserById?uid=&#x27;</span>+uid+<span class="string">&#x27;&quot;&gt;&#x27;</span> +</span><br><span class="line">                            <span class="string">&#x27;&lt;img class=&quot;layui-nav-img&quot; src=&quot;&#x27;</span> + iconSrc + <span class="string">&#x27;&quot;/&gt;&#x27;</span> +</span><br><span class="line">                            uname + <span class="string">&#x27;&lt;/a&gt;&#x27;</span> +</span><br><span class="line">                            <span class="string">&#x27; &lt;/div&gt;&#x27;</span> +</span><br><span class="line">                            content +</span><br><span class="line">                            <span class="string">&#x27;&lt;div align=&quot;right&quot;&gt;&#x27;</span> +</span><br><span class="line">                            <span class="string">&#x27;&lt;a href=&quot;javascript:void(0);&quot; onclick=&quot;delComment(&#x27;</span> + data.<span class="property">cid</span> + <span class="string">&#x27;)&quot;&gt;删除&lt;/a&gt;&#x27;</span> +</span><br><span class="line">                            <span class="string">&#x27;&lt;/div&gt;&#x27;</span> +</span><br><span class="line">                            <span class="string">&#x27;&lt;div align=&quot;right&quot;&gt;&#x27;</span> +</span><br><span class="line">                            <span class="title function_">getCurrentDate</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()) +</span><br><span class="line">                            <span class="string">&#x27;&lt;/div&gt;&#x27;</span> +</span><br><span class="line">                            <span class="string">&#x27;&lt;/div&gt;&#x27;</span> +</span><br><span class="line">                            <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">                        $(<span class="string">&quot;#newComment&quot;</span>).<span class="title function_">prepend</span>(s);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="title function_">alert</span>(<span class="string">&quot;评论失败&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;评论不能为空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="拦截器">拦截器</h1>
<p>Spring
MVC中的拦截器（Interceptor）类似于Servlet中的过滤器（Filter），它主要用于拦截用户请求并作相应的处理。例如通过拦截器可以进行权限验证、记录请求信息的日志、判断用户是否登录等。
要使用Spring MVC中的拦截器，就需要对拦截器类进行定义和配置。</p>
<p><strong>通过实现HandlerInterceptor接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return true 放行</span></span><br><span class="line">    <span class="comment">// return false 拦截</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自定义拦截器实现了HandlerInterceptor接口，并实现了接口中的三个方法：</p>
<ul>
<li>preHandle()
方法：该方法会在控制器方法前执行，其返回值表示是否中断后续操作。当其返回值为true时，表示继续向下执行；
当其返回值为false时，会中断后续的所有操作（包括调用下一个拦截器和控制器类中的方法执行等）。</li>
<li>postHandle()方法：该方法会在控制器方法调用之后，且解析视图之前执行。可以通过此方法对请求域中的模型和视图做出进一步的修改。</li>
<li>afterCompletion()方法：该方法会在整个请求完成，即视图渲染结束之后执行。可以通过此方法实现一些资源清理、记录日志信息等工作。</li>
</ul>
<p><strong>配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置拦截器作用的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.wnh.interceptor.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>path 的属性值“/**” 表示拦截所有路径，“/hello” 表示拦截所有以 “/hello”
结尾的路径。</p>
<p><strong>注意：<mvc:interceptor>中的子元素必须按照上述代码中的配置顺序进行编写，即<mvc:mapping>
<mvc:exclude-mapping> <bean>，否则文件会报错。</strong></p>
<h1 id="文件上传下载">文件上传下载</h1>
<h2 id="上传">上传</h2>
<p><strong>导包</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文件上传 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 编码格式与 JSP 的 PageEncoding 属性一致 默认为 ISO-8859-1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上传文件的最大上限，单位为字节 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSizePerFile&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5242880&quot;</span>/&gt;</span><span class="comment">&lt;!--5M--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;40960&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>前端</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;h3&gt;文件上传&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/upload&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span> method=<span class="string">&quot;post&quot;</span>  &gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span> /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<p><strong>后端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (file.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;failed&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取原文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    System.out.println(<span class="string">&quot;上传文件名：&quot;</span>+fileName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取上传的目录路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getSession().getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">File</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">    <span class="keyword">if</span> (!filePath.exists())&#123;</span><br><span class="line">        <span class="comment">// 创建目录或子目录</span></span><br><span class="line">        filePath.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;上传保存地址：&quot;</span>+filePath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// InputStream in = file.getInputStream() ;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// OutputStream out = new FileOutputStream(new File(filePath,fileName)) ;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// byte[] bs = new byte[1024];</span></span><br><span class="line">    <span class="comment">// int len = -1;</span></span><br><span class="line">    <span class="comment">// while(( len = in.read(bs)) !=-1 ) &#123;</span></span><br><span class="line">    <span class="comment">//     out.write(bs, 0, len);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// out.close();</span></span><br><span class="line">    <span class="comment">// in.close();</span></span><br><span class="line"></span><br><span class="line">    file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(filePath+<span class="string">&quot;/&quot;</span>+fileName));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="下载">下载</h2>
<p><strong>前端</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;h3&gt;文件下载&lt;/h3&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/download&quot;</span>&gt;下载&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p><strong>后端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">download</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">    String fileName=<span class="string">&quot;wnhyang.jpg&quot;</span>;</span><br><span class="line">    <span class="comment">//1、设置response 响应头</span></span><br><span class="line">    response.reset();</span><br><span class="line">    response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>);</span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,</span><br><span class="line">            <span class="string">&quot;attachment;fileName=&quot;</span>+ URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path,fileName);</span><br><span class="line">    <span class="comment">//2、 读取文件--输入流</span></span><br><span class="line">    InputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">    <span class="comment">//3、 写出文件--输出流</span></span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] bs = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(( len = in.read(bs)) !=-<span class="number">1</span> ) &#123;</span><br><span class="line">        out.write(bs, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">    out.close();</span><br><span class="line">    in.close();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="注意">注意</h2>
<p>将之前依赖改了，因为只有 servlet-api 3以上才有
getServletContext()方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Spring Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring（一）</title>
    <url>/article/1d2ccb18.html</url>
    <content><![CDATA[<p>共两部分</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/1d2ccb18.html">Spring（一）（当前）</a></li>
<li><a
href="https://wnhyang.github.io/article/2d3a27c0.html">Spring（二）</a></li>
</ul>
<h1 id="参考">参考</h1>
<p><a
href="https://www.bilibili.com/video/BV1WE411d7Dv">https://www.bilibili.com/video/BV1WE411d7Dv</a></p>
<p><a
href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#spring-core">https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#spring-core</a></p>
<span id="more"></span>
<h1 id="spring">Spring</h1>
<h1 id="简介">简介</h1>
<p>Spring框架是由于<a
href="https://baike.baidu.com/item/软件开发/3448966">软件开发</a>的复杂性而创建的。Spring使用的是基本的JavaBean来完成以前只可能由<a
href="https://baike.baidu.com/item/EJB/144195">EJB</a>完成的事情。然而，Spring的用途不仅仅限于服务器端的开发。从简单性、可测试性和松耦合性角度而言，绝大部分Java应用都可以从Spring中受益。</p>
<p>◆目的：解决企业应用开发的复杂性</p>
<p>◆功能：使用基本的JavaBean代替EJB，并提供了更多的企业应用功能</p>
<p>◆范围：任何Java应用</p>
<p>Spring是一个轻量级控制反转(IoC)和面向切面(AOP)的容器框架。</p>
<p>官网：https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#spring-core</p>
<p>下载：https://repo.spring.io/release/org/springframework/spring/</p>
<p>Github：https://github.com/spring-projects/spring-framework</p>
<p>Spring总结起来优点如下：</p>
<ul>
<li>低侵入式设计，代码的污染极低。</li>
<li>独立于各种应用服务器，基于Spring框架的应用，可以真正实现Write
Once，Run Anywhere的承诺。</li>
<li>Spring的IoC容器降低了业务对象替换的复杂性，提高了组件之间的解耦。</li>
<li>Spring的AOP支持允许将一些通用任务如安全、事务、日志等进行集中式管理，从而提供了更好的复用。</li>
<li>Spring的ORM和DAO提供了与第三方持久层框架的良好整合，并简化了底层的数据库访问。</li>
<li>Spring的高度开放性，并不强制应用完全依赖于Spring，开发者可自由选用Spring框架的部分或全部。</li>
</ul>
<h1 id="spring配置">Spring配置</h1>
<p><strong>别名</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;dgsdfgfdg&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>Bean 配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	id 唯一标识符</span></span><br><span class="line"><span class="comment">	class bean 对象的全限定包 包名 + 类名</span></span><br><span class="line"><span class="comment">	name 别名，可以有多个</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wnh.pojo.User&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user1,user2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;老杨&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>import</strong></p>
<p>一般用于团队开发，将多个配置文件导入合并</p>
<h1 id="ioc">IOC</h1>
<p>IoC也称为依赖注入（DI）。在此过程中，对象仅通过构造函数参数，工厂方法的参数或在构造或从工厂方法返回后在对象实例上设置的属性来定义其依赖项（即，与它们一起使用的其他对象）
。然后，容器在创建bean时注入那些依赖项。此过程从根本上讲是通过使用类的直接构造或诸如服务定位器模式之类的控件来控制其依赖项的实例化或位置的bean本身的逆过程（因此称为Control
Inversion）。</p>
<p>Spring的工作原理的高级视图</p>
<p><img data-src="https://docs.spring.io/spring-framework/docs/current/reference/html/images/container-magic.png" /></p>
<h2 id="感受ioc">感受IOC</h2>
<p>导入下面这个会依赖地导入一些必要包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>传统开发过程</p>
<ul>
<li>UserDao接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>UserImpl实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;默认获取用户数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>UserService接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>UserService实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">        userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若这时加入新的 dao 实现类</p>
<p>UserMysqlImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMysqlImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MySQL获取&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UserOracleImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserOracleImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Oracle获取&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们必须修改 Service 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// private UserDao userDao = new UserDaoImpl();</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserMysqlImpl</span>();</span><br><span class="line">    <span class="comment">// private UserDao userDao = new UserOracleImpl();</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但这样会加大开发难度，而且不能专心的在一方面搞下去</p>
<p>这时我们可以这样处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 SET 动态实现值的注入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改后测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">UserServiceImpl</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">        userService.setUserDao(<span class="keyword">new</span> <span class="title class_">UserOracleImpl</span>());</span><br><span class="line"></span><br><span class="line">        userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的话我们就可以动态实现值的注入</p>
<h2 id="配置元数据">配置元数据</h2>
<p>以下示例显示了基于XML的配置元数据的基本结构：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- more bean definitions go here --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>IOC容器赋值：如果是简单类型（8个基本+String），value；如果是对象，ref=“需要引入的id值”</p>
<p>该<code>id</code>属性是标识单个bean定义的字符串。</p>
<p>该<code>class</code>属性定义Bean的类型，并使用完全限定的类名。</p>
<h2 id="实例化容器">实例化容器</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// create and configure beans</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;services.xml&quot;</span>, <span class="string">&quot;daos.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// retrieve configured instance</span></span><br><span class="line"><span class="type">PetStoreService</span> <span class="variable">service</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;petStore&quot;</span>, PetStoreService.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// use configured instance</span></span><br><span class="line">List&lt;String&gt; userList = service.getUsernameList();</span><br></pre></td></tr></table></figure>
<h2 id="bean命名约定">Bean命名约定</h2>
<p>约定是在命名bean时将标准Java约定用于实例字段名称。也就是说，bean名称以小写字母开头，并从那里用驼峰式大小写。这样的名字的例子包括<code>accountManager</code>，
<code>accountService</code>，<code>userDao</code>，<code>loginController</code>，等等。</p>
<p>一致地命名Bean使您的配置更易于阅读和理解。另外，如果您使用Spring
AOP，则在将建议应用于名称相关的一组bean时，它会很有帮助。</p>
<p>示例：</p>
<p>pojo.Hello.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStr</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStr</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;str=&#x27;&quot;</span> + str + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  使用 Spring 来创建对象，在 Spring 中这些都成为 Bean  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wnh.pojo.Hello&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取 Spring 上下文对象</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 对象都交由 Spring 管理，我们要使用，直接去取</span></span><br><span class="line">        <span class="type">Hello</span> <span class="variable">hello</span> <span class="operator">=</span> (Hello) context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(hello.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将上面 User dao Service 修改</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  使用 Spring 来创建对象，在 Spring 中这些都成为 Bean  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wnh.pojo.Hello&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mysqlImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wnh.dao.UserMysqlImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;oracleImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wnh.dao.UserOracleImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wnh.service.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;mysqlImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>再测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取 Spring 上下文对象</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 对象都交由 Spring 管理，我们要使用，直接去取</span></span><br><span class="line">        <span class="type">Hello</span> <span class="variable">hello</span> <span class="operator">=</span> (Hello) context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(hello.toString());</span><br><span class="line">        <span class="type">UserServiceImpl</span> <span class="variable">userServiceImpl</span> <span class="operator">=</span> (UserServiceImpl) context.getBean(<span class="string">&quot;userServiceImpl&quot;</span>);</span><br><span class="line">        userServiceImpl.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="依赖注入">依赖注入</h1>
<h2 id="基于构造函数的依赖注入">基于构造函数的依赖注入</h2>
<p>1、无参构造创建对象，默认</p>
<p>2、有参构造方式</p>
<p>Spring无法确定值的类型，因此在没有帮助的情况下无法按类型进行匹配。考虑以下类别：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> examples;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Number of years to calculate the Ultimate Answer</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> years;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The Answer to Life, the Universe, and Everything</span></span><br><span class="line">    <span class="keyword">private</span> String ultimateAnswer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExampleBean</span><span class="params">(<span class="type">int</span> years, String ultimateAnswer)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.years = years;</span><br><span class="line">        <span class="built_in">this</span>.ultimateAnswer = ultimateAnswer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>构造函数参数类型匹配</strong></p>
<p>在上述情况下，如果通过使用<code>type</code>属性显式指定构造函数参数的类型，则容器可以使用简单类型的类型匹配。如下例所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;exampleBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.ExampleBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">value</span>=<span class="string">&quot;7500000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;42&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>构造函数参数索引</strong></p>
<p>您可以使用该<code>index</code>属性来明确指定构造函数参数的索引，如以下示例所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;exampleBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.ExampleBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;7500000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;42&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>除了解决多个简单值的歧义性之外，指定索引还可以解决歧义，其中构造函数具有两个相同类型的参数。</p>
<p><strong>构造函数参数名称</strong></p>
<p>您还可以使用构造函数参数名称来消除歧义，如以下示例所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;exampleBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.ExampleBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;years&quot;</span> <span class="attr">value</span>=<span class="string">&quot;7500000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;ultimateAnswer&quot;</span> <span class="attr">value</span>=<span class="string">&quot;42&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>请记住，要立即使用该功能，必须在启用调试标志的情况下编译代码，以便Spring可以从构造函数中查找参数名称。如果您不能或不想使用debug标志编译代码，则可以使用
<a
href="https://download.oracle.com/javase/8/docs/api/java/beans/ConstructorProperties.html"><span
class="citation"
data-cites="ConstructorProperties">@ConstructorProperties</span></a>
JDK批注显式命名构造函数参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> examples;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fields omitted</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConstructorProperties(&#123;&quot;years&quot;, &quot;ultimateAnswer&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExampleBean</span><span class="params">(<span class="type">int</span> years, String ultimateAnswer)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.years = years;</span><br><span class="line">        <span class="built_in">this</span>.ultimateAnswer = ultimateAnswer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="基于setter的依赖注入">基于Setter的依赖注入</h2>
<p>复杂类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; cards;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line">    </span><br><span class="line">    。。。</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>beans.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wnh.pojo.Address&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wnh.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 普通注入 value --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;老杨&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Bean 注入 ref --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数组注入 array --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- list注入 list --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>玩游戏<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>看手机<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>听音乐<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- map注入 map --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cards&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;124&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;校园卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;125&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;手机卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;126&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;银行卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;127&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- set注入 set --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>CS<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>CF<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 空值注入 null --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 属性注入 props --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;学号&quot;</span>&gt;</span>112<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;性别&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;宿舍&quot;</span>&gt;</span>101<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="扩展方式注入">扩展方式注入</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- p命名空间注入，可以直接注入属性值 property --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wnh.pojo.Hello&quot;</span> <span class="attr">p:str</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- c命名空间注入，通过构造器注入 constructor-args --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wnh.pojo.Hello&quot;</span> <span class="attr">c:str</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取 Spring 上下文对象</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 对象都交由 Spring 管理，我们要使用，直接去取</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Hello</span> <span class="variable">hello</span> <span class="operator">=</span> (Hello) context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="type">Hello</span> <span class="variable">hello0</span> <span class="operator">=</span> (Hello) context.getBean(<span class="string">&quot;hello0&quot;</span>);</span><br><span class="line">        System.out.println(hello);</span><br><span class="line">        System.out.println(hello0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要导入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br></pre></td></tr></table></figure>
<p>共两部分</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/1d2ccb18.html">Spring（一）（当前）</a></li>
<li><a
href="https://wnhyang.github.io/article/2d3a27c0.html">Spring（二）</a></li>
</ul>
]]></content>
      <tags>
        <tag>Spring Framework</tag>
        <tag>Mybatis/Mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring（二）</title>
    <url>/article/2d3a27c0.html</url>
    <content><![CDATA[<p>共两部分</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/1d2ccb18.html">Spring（一）</a></li>
<li><a
href="https://wnhyang.github.io/article/2d3a27c0.html">Spring（二）（当前）</a></li>
</ul>
<h1 id="参考">参考</h1>
<p><a
href="https://www.bilibili.com/video/BV1WE411d7Dv">https://www.bilibili.com/video/BV1WE411d7Dv</a></p>
<p><a
href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#spring-core">https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#spring-core</a></p>
<span id="more"></span>
<h1 id="bean作用域">Bean作用域</h1>
<p>he following table describes the supported scopes:</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Scope</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><a
href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-singleton">singleton</a></td>
<td style="text-align: left;">(Default) Scopes a single bean definition
to a single object instance for each Spring IoC container.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-prototype">prototype</a></td>
<td style="text-align: left;">Scopes a single bean definition to any
number of object instances.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-request">request</a></td>
<td style="text-align: left;">Scopes a single bean definition to the
lifecycle of a single HTTP request. That is, each HTTP request has its
own instance of a bean created off the back of a single bean definition.
Only valid in the context of a web-aware Spring
<code>ApplicationContext</code>.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-session">session</a></td>
<td style="text-align: left;">Scopes a single bean definition to the
lifecycle of an HTTP <code>Session</code>. Only valid in the context of
a web-aware Spring <code>ApplicationContext</code>.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-application">application</a></td>
<td style="text-align: left;">Scopes a single bean definition to the
lifecycle of a <code>ServletContext</code>. Only valid in the context of
a web-aware Spring <code>ApplicationContext</code>.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#websocket-stomp-websocket-scope">websocket</a></td>
<td style="text-align: left;">Scopes a single bean definition to the
lifecycle of a <code>WebSocket</code>. Only valid in the context of a
web-aware Spring <code>ApplicationContext</code>.</td>
</tr>
</tbody>
</table>
<p>1、单例模式</p>
<p><img data-src="https://docs.spring.io/spring-framework/docs/current/reference/html/images/singleton.png" /></p>
<p>2、原型模式</p>
<p><img data-src="https://docs.spring.io/spring-framework/docs/current/reference/html/images/prototype.png" /></p>
<p>3、其余 request、session、application 在 web 开发使用</p>
<h1 id="bean自动装配">Bean自动装配</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    </span><br><span class="line">    。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="byname自动装配">ByName自动装配</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wnh.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wnh.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 属性与 bean 中已配置id一致 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wnh.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小杨&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="bytype自动装配">ByType自动装配</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wnh.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wnh.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 属性与 bean 中已配置类型一致 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wnh.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小杨&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="noconstructor">no/constructor</h2>
<h2 id="注解实现自动装配">注解实现自动装配</h2>
<p>JDK1.5支持注解，Spring2.5支持注解</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="autowried"><span class="citation"
data-cites="Autowried">@Autowried</span></h3>
<p>直接在属性前使用，也可在 set 方法上使用</p>
<p>使用 Autowried 就不用编写 set 方法了，前提是这个装配的属性在 IOC
容器中存在，且符合 ByName</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span> 表明字段可为空</span><br></pre></td></tr></table></figure>
<p>Autowired 默认required为 true（非空，不接受空）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>设置 false 则可空</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired(required = false)</span></span><br></pre></td></tr></table></figure>
<p><code>@Primary</code></p>
<p><a
href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-autowired-annotation-primary">https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-autowired-annotation-primary</a></p>
<p><code>@Qualifier</code></p>
<p>限定符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MovieRecommender</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;main&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> MovieCatalog movieCatalog;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a
href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-autowired-annotation-qualifiers">https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-autowired-annotation-qualifiers</a></p>
<p><strong><span class="citation"
data-cites="Resource注解">@Resource注解</span></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;dog2&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    </span><br><span class="line">    。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><span class="citation" data-cites="Resource">@Resource</span>
和@Autowried 区别：</strong></p>
<ul>
<li>都用来自动装配，都用在属性字段上</li>
<li><span class="citation" data-cites="Autowried">@Autowried</span> 通过
ByName 的方式实现</li>
<li><span class="citation" data-cites="Resource">@Resource</span>
默认通过 ByName 的方式实现，如果找不到名字，则通过 ByType
实现，如果都找不到报错</li>
</ul>
<h1 id="注解开发">注解开发</h1>
<p>必须保证 aop 的包导入</p>
<p>使用注解需要导入 context 约束，增加注解支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="包扫描">包扫描</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定要扫描的包，这个包下的注解就会生效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wnh.pojo&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>属性注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等价于 &lt;property name=&quot;name&quot; value=&quot;老杨&quot;/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Value(&quot;老杨&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><span class="citation"
data-cites="Component">@Component</span> 衍生注解，根据 web
分层：</strong></p>
<ul>
<li><p>dao层注解：<span class="citation"
data-cites="Repository">@Repository</span></p></li>
<li><p>service层注解：<span class="citation"
data-cites="Service">@Service</span></p></li>
<li><p>控制器层注解：<span class="citation"
data-cites="Controller">@Controller</span></p></li>
</ul>
<h2 id="作用域">作用域</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等价于 &lt;property name=&quot;name&quot; value=&quot;老杨&quot;/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Value(&quot;老杨&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="xml-与注解">xml 与注解</h2>
<ul>
<li>xml 更万能，使用任何场合，维护方便</li>
<li>注解维护复杂</li>
</ul>
<h1 id="java-方式配置-spring">Java 方式配置 Spring</h1>
<p><a
href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-java">https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-java</a></p>
<h1 id="aop">AOP</h1>
<h2 id="代理模式">代理模式</h2>
<p><a
href="https://www.cnblogs.com/daniels/p/8242592.html">https://www.cnblogs.com/daniels/p/8242592.html</a></p>
<p><a
href="http://c.biancheng.net/view/1359.html">http://c.biancheng.net/view/1359.html</a></p>
<p>代理模式的定义：由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。</p>
<p>代理模式的主要优点有：</p>
<ul>
<li>代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用；</li>
<li>代理对象可以扩展目标对象的功能；</li>
<li>代理模式能将客户端与目标对象分离，在一定程度上降低了系统的耦合度，增加了程序的可扩展性</li>
</ul>
<p>其主要缺点是：</p>
<ul>
<li>代理模式会造成系统设计中类的数量增加</li>
<li>在客户端和目标对象之间增加一个代理对象，会造成请求处理速度变慢；</li>
<li>增加了系统的复杂度；</li>
</ul>
<p><strong>静态代理</strong></p>
<p><strong>静态代理总结：</strong></p>
<p>优点：可以做到在符合开闭原则的情况下对目标对象进行功能扩展。</p>
<p>缺点：我们得为每一个服务都得创建代理类，工作量太大，不易管理。同时接口一旦发生改变，代理类也得相应修改。</p>
<p><strong>动态代理</strong></p>
<p>需要两个类：Proxy：代理，InvocationHandler：调用处理程序</p>
<p><strong>接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BuyHouse</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buyHouse</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>实现类</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class BuyHouseImpl implements BuyHouse&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void buyHouse() &#123;</span><br><span class="line">        System.out.println(&quot;buyHouse&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>动态代理</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicProxyHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DynamicProxyHandler</span><span class="params">(<span class="keyword">final</span> Object object)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.object=object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">        Object result=method.invoke(object,args);</span><br><span class="line">        System.out.println(<span class="string">&quot;after&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BuyHouse</span> <span class="variable">buyHouse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BuyHouseImpl</span>();</span><br><span class="line">        <span class="type">BuyHouse</span> <span class="variable">proxyBuyHouse</span> <span class="operator">=</span> (BuyHouse) Proxy.newProxyInstance(BuyHouse.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;BuyHouse.class&#125;, <span class="keyword">new</span> <span class="title class_">DynamicProxyHandler</span>(buyHouse));</span><br><span class="line">        proxyBuyHouse.buyHouse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="aop实现">AOP实现</h2>
<p>导入依赖包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="方式一">方式一</h3>
<p>原生 Spring API接口</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wnh.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;beforeLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wnh.log.BeforeLog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wnh.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 方式一：使用原生 Spring API 接口 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 aop 需要导入 aop 的约束 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 切入点 execution：表达式 execution(要执行的位置 修饰词 返回值 类名 方法名 参数)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.wnh.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 执行环绕 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;beforeLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>UserService 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UserServiceImpl 实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;delete&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;update&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;select&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>BeforeLog</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeforeLog</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 要执行的目标对象的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 目标对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(target.getClass().getName()+<span class="string">&quot;的&quot;</span>+method.getName()+<span class="string">&quot;被执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AfterLog</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AfterLog</span> <span class="keyword">implements</span> <span class="title class_">AfterReturningAdvice</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> returnValue 返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了&quot;</span>+ method.getName()+<span class="string">&quot;方法，返回值为：&quot;</span>+returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">    userService.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方式二">方式二</h3>
<p>自定义类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiyPointCut</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方式二：自定义类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wnh.diy.DiyPointCut&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自定义切面，ref 要引用的类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 切入点 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;point&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.wnh.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通知 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试同上</p>
<h3 id="方式三">方式三</h3>
<p>注解</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方式三：注解 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationPoint&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wnh.diy.AnnotationPoint&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启注解支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>类注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 标注为切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationPoint</span> &#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.wnh.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.wnh.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 可以给定一个参数，代表我们要获取的切入点</span></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.wnh.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;be-around&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> jp.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;signature：&quot;</span>+signature);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> jp.proceed();</span><br><span class="line"></span><br><span class="line">        System.out.println(proceed);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;af-around&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试同上</p>
<h1 id="整合-mybatis">整合 Mybatis</h1>
<p><a
href="https://mybatis.org/spring/zh/index.html">https://mybatis.org/spring/zh/index.html</a></p>
<h2 id="mybatis-spring">Mybatis-Spring</h2>
<p>在开始使用 MyBatis-Spring 之前，你需要先熟悉 Spring 和 MyBatis
这两个框架和有关它们的术语。这很重要——因为本手册中不会提供二者的基本内容，安装和配置教程。</p>
<p>MyBatis-Spring 需要以下版本：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">MyBatis-Spring</th>
<th style="text-align: left;">MyBatis</th>
<th style="text-align: left;">Spring Framework</th>
<th style="text-align: left;">Spring Batch</th>
<th style="text-align: left;">Java</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>2.0</strong></td>
<td style="text-align: left;">3.5+</td>
<td style="text-align: left;">5.0+</td>
<td style="text-align: left;">4.0+</td>
<td style="text-align: left;">Java 8+</td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>1.3</strong></td>
<td style="text-align: left;">3.4+</td>
<td style="text-align: left;">3.2.2+</td>
<td style="text-align: left;">2.1+</td>
<td style="text-align: left;">Java 6+</td>
</tr>
</tbody>
</table>
<p><strong>安装</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>mybatis-config.xml 只留下 typeAliases 和 setting 即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.wnh.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="sqlsessiontemplate">SqlSessionTemplate</h2>
<p>1、编写数据源</p>
<p>2、sqlSessionFactory</p>
<p>3、sqlSessionTemplate</p>
<p>4、接口实现类</p>
<p>UserMapperImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在原来所有操作都使用 sqlSession 来操作，现在使用 SqlSessionTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.selectUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、将实现类注入 Spring</p>
<p>spring-dao.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- DataSource：使用 spring 的数据源替换 mybatis 的配置 cp30 dbcp druid --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- sqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 绑定 Mybatis 配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/wnh/mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- SqlSessionTemplate 就是我们使用的 SqlSession --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>applicationConext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wnh.mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>6、测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    List&lt;User&gt; users = mapper.selectUser();</span><br><span class="line">    <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>  &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-dao.xml&quot;</span>);</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userMapper&quot;</span>,UserMapper.class);</span><br><span class="line">    List&lt;User&gt; users = mapper.selectUser();</span><br><span class="line">    <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>  &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userMapper&quot;</span>,UserMapper.class);</span><br><span class="line">    List&lt;User&gt; users = mapper.selectUser();</span><br><span class="line">    <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="sqlsessiondaosupport">SqlSessionDaoSupport</h2>
<p>UserMapperImpl2 继承 SqlSessionDaoSupport</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperImpl2</span> <span class="keyword">extends</span> <span class="title class_">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectUser</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getSqlSession().getMapper(UserMapper.class).selectUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wnh.mapper.UserMapperImpl2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>  &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userMapper2&quot;</span>,UserMapper.class);</span><br><span class="line">    List&lt;User&gt; users = mapper.selectUser();</span><br><span class="line">    <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="事务transaction">事务（transaction）</h1>
<h2 id="标准配置">标准配置</h2>
<p>要开启 Spring 的事务处理功能，在 Spring 的配置文件中创建一个
<code>DataSourceTransactionManager</code> 对象：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>共两部分</p>
<ul>
<li><a
href="https://wnhyang.github.io/article/1d2ccb18.html">Spring（一）</a></li>
<li><a
href="https://wnhyang.github.io/article/2d3a27c0.html">Spring（二）（当前）</a></li>
</ul>
]]></content>
      <tags>
        <tag>Spring Framework</tag>
        <tag>Mybatis/Mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>ThreadLocal理解</title>
    <url>/article/362db54f.html</url>
    <content><![CDATA[<p>相信熟悉<code>JUC</code>（<code>java.util.concurrent</code>）的，都应该知道<code>ThreadLocal</code>，尤其是在各种面试题库中经常遇到。谈起这个的主要原因还是在项目中遇到了“利用<code>ThreadLocal</code>传递参数”的案例，有点好奇。所以就此查看了一些资料。人家写的已经很棒了，这里做个记录吧！🥱</p>
<p><a
href="https://blog.csdn.net/z394642048/article/details/105382603">ThreadLocal用于传递参数及优势</a></p>
<p><a
href="https://www.pdai.tech/md/java/thread/java-thread-x-threadlocal.html">Java
并发 - ThreadLocal详解</a></p>
<p>就此一提，不管是写代码还是日常生活工作，很多事情可以多想想：</p>
<ul>
<li><p>XXX为什么出现？解决了什么问题吗？</p></li>
<li><p>XXX是怎么吗做到了？</p></li>
<li><p>XXX有什么缺陷吗？</p></li>
<li><p>联想。。。</p></li>
</ul>
]]></content>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue入门</title>
    <url>/article/df7b5028.html</url>
    <content><![CDATA[<p>一心想做后端，对于前端是不太乐意去做的，但基本的了解还是需要的。去年<code>Java Web</code>课程作业项目，就是前后端全包，不过那时前端用的还是传统的<code>JSP</code>，着实感觉不太舒服，学过<code>SpringBoot</code>了，使用了<code>Thymeleaf</code>，体会到开发的便捷，认识到了前后端分离，越发感到之前的开发模式是该被取代了。</p>
<p>终于有机会认识前端的一些东西了，本来我的这个博客框架就与前端脱不开关系，<code>Node.js</code>、<code>npm</code>这些都是我博客搭建的基础，这次来简单入门<code>Vue</code>。</p>
<span id="more"></span>
<h1 id="参考">参考</h1>
<ul>
<li>B站视频：<a
href="https://www.bilibili.com/video/BV12J411m7MG">https://www.bilibili.com/video/BV12J411m7MG</a></li>
<li>Vue官网：<a
href="https://cn.vuejs.org/">https://cn.vuejs.org/</a></li>
<li>axios中文文档：<a
href="http://axios-js.com/zh-cn/docs/">http://axios-js.com/zh-cn/docs/</a></li>
</ul>
<h1 id="提要">提要</h1>
<p>必要知识：前端三剑客（HTML、CSS、JS）+ Ajax</p>
<p>开发环境：VSCode + Live Server、Chrome</p>
<p>推荐VSCode插件：Auto Close Tag、Auto Rename Tag、Vetur、根据需要参考
<a
href="https://www.jianshu.com/p/3eebde5748a6">VScode插件推荐（全面）</a></p>
<p>Live Server 简单使用说明：使用Live
Server主要原因是开启本地服务并在保存时刷新页面，方便调试，在VSCode需要使用Live
Server
页面右键选择<code>Open with Live Server</code>或<code>Stop Live Server</code>。</p>
<p>最后会放上我的全部源码链接，希望有帮助。</p>
<h1 id="安装">安装</h1>
<p>官方说的非常清楚了新手入门使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticaly.com/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticaly.com/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="认识vue">认识Vue</h1>
<p>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM
的系统：</p>
<p>官方示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr />
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>注意上面是在html中，下面在js中</p>
<p>简单理解，声明<code>app</code>通过<code>el</code>与<code>div-app</code>绑定，这时<code>div-app</code>与<code>app-Vue</code>同属于一个域，<code>data</code>类似声明数据（key-value），通过<code>&#123;&#123;x&#125;&#125;</code>，取值</p>
<h1 id="基本">基本</h1>
<p><strong>v-text：</strong>显示文本，替换问题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">&quot;message+&#x27;!&#x27;&quot;</span>&gt;</span>测试拼接<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> <span class="comment">&lt;!-- 结果：message！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">&quot;info+&#x27;?&#x27;&quot;</span>&gt;</span>测试拼接<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>	<span class="comment">&lt;!-- 结果：info？ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>拼接&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> <span class="comment">&lt;!-- 结果：拼接message --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticaly.com/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> text=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&quot;#text&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">message</span>:<span class="string">&quot;text显示&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">info</span>:<span class="string">&quot;信息展示&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>v-html：</strong>显示文本，若是html元素则解析</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;html&quot;</span>&gt;</span>	<span class="comment">&lt;!-- content为&lt;a&gt;超链接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>	<span class="comment">&lt;!-- 解析成超链接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>	<span class="comment">&lt;!-- 解析成超链接文本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticaly.com/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> html=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&quot;#html&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">content</span>:<span class="string">&quot;&lt;a href=&#x27;https:/wnhyang.github.io&#x27;&gt;博客&lt;/a&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>v-on：</strong>事件处理，可用@代替，函数如下methods部分，在Chrome检查控制台查看</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;on&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;v-on指令&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doIt&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;@指令&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doIt&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;双击&quot;</span> @<span class="attr">dblclick</span>=<span class="string">&quot;doIt&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> @<span class="attr">click</span>=<span class="string">&quot;changeFood&quot;</span>&gt;</span>&#123;&#123;food&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticaly.com/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> on=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&quot;#on&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">food</span>:<span class="string">&quot;西红柿&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">doIt</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;doit&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">changeFood</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">food</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">food</span>+=<span class="string">&quot;如果！&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>v-show：</strong>状态，本质改变了显示状态</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;show&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;切换显示状态&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeIsShow&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;累加年龄&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;addAge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./img/123.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-show</span>=<span class="string">&quot;age&gt;=18&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./img/123.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticaly.com/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> show=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&quot;#show&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">isShow</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>:<span class="number">17</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">changeIsShow</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">isShow</span>=!<span class="variable language_">this</span>.<span class="property">isShow</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">addAge</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">age</span>++;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>v-if：</strong>状态，直接在或不在，区分与v-show，发现v-if直接影响整个元素，不是v-show改变状态</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;ifapp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;切换显示&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;toggleIsShow&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>v-if好吗<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>v-show好吗<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;temperature&gt;=35&quot;</span>&gt;</span>热死了<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticaly.com/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ifapp=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&quot;#ifapp&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">isShow</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">temperature</span>:<span class="number">40</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">toggleIsShow</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">isShow</span>=!<span class="variable language_">this</span>.<span class="property">isShow</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>v-bind：</strong>绑定，作用于元素属性，可简写为:属性，三元表达式或"{active:isActive}"，推荐后者</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.active</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;bind&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imgSrc&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;imgSrc&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;imgTitle+&#x27;!!!&#x27;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;isActive?&#x27;active&#x27;:&#x27;&#x27;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;toggleActive&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;imgSrc&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;imgTitle+&#x27;!!!&#x27;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;active:isActive&#125;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;toggleActive&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticaly.com/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> bind=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&quot;#bind&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">imgSrc</span>:<span class="string">&quot;https://cn.vuejs.org/images/logo.png&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">imgTitle</span>:<span class="string">&quot;Vue&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">isActive</span>:<span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">toggleActive</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">isActive</span>=!<span class="variable language_">this</span>.<span class="property">isActive</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>v-for：</strong>循环，看下示例即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;forapp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加数据&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;移除数据&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;remove&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in arr&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;index&#125;&#125;Vue:&#123;&#123;item&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-for</span>=<span class="string">&quot;item in vegetables&quot;</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;item.name&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;item.name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticaly.com/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> forapp=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&quot;#forapp&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">arr</span>:[<span class="string">&quot;北京&quot;</span>,<span class="string">&quot;上海&quot;</span>,<span class="string">&quot;广州&quot;</span>,<span class="string">&quot;深圳&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">vegetables</span>:[</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">name</span>:<span class="string">&quot;西红柿炒鸡蛋&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">name</span>:<span class="string">&quot;凉拌黄瓜&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">add</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">vegetables</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&quot;炒土豆丝&quot;</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">remove</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">vegetables</span>.<span class="title function_">shift</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>v-model：</strong>双向绑定，如下，div-modelapp与modelapp-Vue域同步改变</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">modelapp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;修改message&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;setM&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;getM&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticaly.com/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> modelapp=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&quot;#modelapp&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">message</span>:<span class="string">&quot;Vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">getM</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">message</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">setM</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">message</span>=<span class="string">&quot;VueDemo&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="实例">实例</h1>
<h2 id="计数器">计数器</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;counter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticaly.com/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> counter=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&quot;#counter&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">num</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">add</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;add&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">num</span>&lt;<span class="number">10</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">num</span>++;</span></span><br><span class="line"><span class="language-javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&#x27;别点了，最大了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">sub</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sub&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">num</span>&gt;<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">num</span>--;</span></span><br><span class="line"><span class="language-javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&#x27;别点了，最小了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="记事本">记事本</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;todoapp&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">               Vue记事本</span><br><span class="line">           <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;inputValue&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;add&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;index+1&#125;&#125;.<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;remove(index)&quot;</span>&gt;</span>x<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                   </span><br><span class="line">               <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;list.length!=0&quot;</span>&gt;</span>总数：&#123;&#123;list.length&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;clear&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;list.length!=0&quot;</span>&gt;</span>Clear<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticaly.com/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">var</span> todoapp=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">el</span>:<span class="string">&quot;#todoapp&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">list</span>:[<span class="string">&quot;写代码&quot;</span>,<span class="string">&quot;吃饭&quot;</span>,<span class="string">&quot;睡觉&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">inputValue</span>:<span class="string">&quot;content&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">           &#125;,</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">add</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                   <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">inputValue</span>);</span></span><br><span class="line"><span class="language-javascript">               &#125;,</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">remove</span>:<span class="keyword">function</span>(<span class="params">index</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;删除&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                   <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span></span><br><span class="line"><span class="language-javascript">                   <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">splice</span>(index,<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">               &#125;,</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">clear</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                   <span class="variable language_">this</span>.<span class="property">list</span>=[];</span></span><br><span class="line"><span class="language-javascript">               &#125;</span></span><br><span class="line"><span class="language-javascript">           &#125;</span></span><br><span class="line"><span class="language-javascript">       &#125;)</span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="axios">axios</h1>
<p>简单的说：Ajax的封装版，简单实用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;get&quot;</span> <span class="attr">class</span>=<span class="string">&quot;get&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;post&quot;</span> <span class="attr">class</span>=<span class="string">&quot;post&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 用的是js呢</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.get&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                axios.<span class="title function_">get</span>(<span class="string">&#x27;https://autumnfish.cn/api/joke/list?num=6&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>); <span class="comment">//好像是data吧</span></span></span><br><span class="line"><span class="language-javascript">                &#125;, <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.post&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            axios.<span class="title function_">post</span>(<span class="string">&#x27;https://autumnfish.cn/api/user/reg&#x27;</span>,&#123;<span class="attr">username</span>:<span class="string">&quot;西兰花10&quot;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">            .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span><br><span class="line"><span class="language-javascript">            &#125;,<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>用到在线API：https://autumnfish.cn/api/joke/list?num=6
获取6条笑话，https://autumnfish.cn/api/user/reg 注册用户</p>
<h1 id="vue-axios">vue-axios</h1>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;获取笑话&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;getJoke&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;joke&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticaly.com/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> app=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">joke</span>:<span class="string">&quot;笑话&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">getJoke</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">joke</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> that=<span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">                    axios.<span class="title function_">get</span>(<span class="string">&#x27;https://autumnfish.cn/api/joke&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                    .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">                        that.<span class="property">joke</span>=response.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// this.joke=response.data;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,<span class="keyword">function</span>(<span class="params">error</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span></span><br><span class="line"><span class="language-javascript">                    &#125;)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>仔细看：this，that</p>
<h1 id="实例-1">实例</h1>
<h2 id="查天气">查天气</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;searchWeather&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;city&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入地区查天气&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;searchWeather&quot;</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeCity(&#x27;北京&#x27;)&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeCity(&#x27;上海&#x27;)&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeCity(&#x27;广州&#x27;)&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeCity(&#x27;深圳&#x27;)&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in weatherList&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;item.type&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123;item.low&#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">            ~</span><br><span class="line">            <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123;item.high&#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item.date&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticaly.com/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue-weather.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr />
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">city</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">weatherList</span>:[],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="attr">searchWeather</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">// console.log(&#x27;天气查询&#x27;);</span></span><br><span class="line">            <span class="comment">// console.log(this.city);</span></span><br><span class="line">            <span class="keyword">var</span> that=<span class="variable language_">this</span>;</span><br><span class="line">            axios.<span class="title function_">get</span>(<span class="string">&#x27;http://wthrcdn.etouch.cn/weather_mini?city=&#x27;</span>+<span class="variable language_">this</span>.<span class="property">city</span>)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>.<span class="property">data</span>.<span class="property">forecast</span>);</span><br><span class="line">                that.<span class="property">weatherList</span>=response.<span class="property">data</span>.<span class="property">data</span>.<span class="property">forecast</span>;</span><br><span class="line">            &#125;,<span class="keyword">function</span>(<span class="params">error</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">changeCity</span>:<span class="keyword">function</span>(<span class="params">city</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">city</span>=city;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">searchWeather</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>用到API：http://wthrcdn.etouch.cn/weather_mini?city=
查某地近几天天气，通过console.log()，查看返回数据，找到需要的数据</p>
<h2 id="音乐播放器">音乐播放器</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;!isShow&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;searchMusic&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;query&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;searchMusic&quot;</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in musicList&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;playMusic(item.id)&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;item.mvid!=0&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;playMV(item.mvid)&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>mv<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">b</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;playing:isPlaying&#125;&quot;</span>&gt;</span>播放中<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;musicCover&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">audio</span> <span class="attr">ref</span>=<span class="string">&#x27;audio&#x27;</span> <span class="attr">:src</span>=<span class="string">&quot;musicUrl&quot;</span> @<span class="attr">play</span>=<span class="string">&quot;play&quot;</span> @<span class="attr">pause</span>=<span class="string">&quot;pause&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">loop</span> &gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dl</span> <span class="attr">v-for</span>=<span class="string">&quot;item in hotComments&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">&quot;50&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;item.user.avatarUrl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123;item.user.nickname&#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dd</span>&gt;</span>&#123;&#123;item.content&#125;&#125;<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">video</span> <span class="attr">:src</span>=<span class="string">&quot;mvUrl&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;hide&quot;</span>&gt;</span>hide<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticaly.com/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue-music.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr />
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="comment">// 查询关键字</span></span><br><span class="line">        <span class="attr">query</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="comment">// 歌曲数据</span></span><br><span class="line">        <span class="attr">musicList</span>:[],</span><br><span class="line">        <span class="comment">// 歌曲地址</span></span><br><span class="line">        <span class="attr">musicUrl</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="comment">// 歌曲图片</span></span><br><span class="line">        <span class="attr">musicCover</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="comment">// 歌曲评论</span></span><br><span class="line">        <span class="attr">hotComments</span>:[],</span><br><span class="line">        <span class="comment">// 动画播放状态</span></span><br><span class="line">        <span class="attr">isPlaying</span>:<span class="literal">false</span>,</span><br><span class="line">        <span class="comment">// 遮罩层显示状态</span></span><br><span class="line">        <span class="attr">isShow</span>:<span class="literal">false</span>,</span><br><span class="line">        <span class="comment">// MV地址</span></span><br><span class="line">        <span class="attr">mvUrl</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="attr">searchMusic</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">// console.log(this.query);</span></span><br><span class="line">            <span class="keyword">var</span> that=<span class="variable language_">this</span>;</span><br><span class="line">            axios.<span class="title function_">get</span>(<span class="string">&#x27;https://autumnfish.cn/search?keywords=&#x27;</span>+<span class="variable language_">this</span>.<span class="property">query</span>)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>)&#123;</span><br><span class="line">                <span class="comment">// console.log(response);</span></span><br><span class="line">                that.<span class="property">musicList</span>=response.<span class="property">data</span>.<span class="property">result</span>.<span class="property">songs</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>.<span class="property">result</span>.<span class="property">songs</span>)</span><br><span class="line">            &#125;,<span class="keyword">function</span>(<span class="params">error</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">playMusic</span>:<span class="keyword">function</span>(<span class="params">musicId</span>)&#123;</span><br><span class="line">            <span class="comment">// console.log(musicId);</span></span><br><span class="line">            <span class="keyword">var</span> that=<span class="variable language_">this</span>;</span><br><span class="line">            <span class="comment">// 歌曲地址</span></span><br><span class="line">            axios.<span class="title function_">get</span>(<span class="string">&#x27;https://autumnfish.cn/song/url?id=&#x27;</span>+musicId)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>)&#123;</span><br><span class="line">                <span class="comment">// console.log(response);</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>.<span class="property">data</span>[<span class="number">0</span>].<span class="property">url</span>);</span><br><span class="line">                that.<span class="property">musicUrl</span>=response.<span class="property">data</span>.<span class="property">data</span>[<span class="number">0</span>].<span class="property">url</span>;</span><br><span class="line">            &#125;,<span class="keyword">function</span>(<span class="params">error</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 歌曲图片</span></span><br><span class="line">            axios.<span class="title function_">get</span>(<span class="string">&#x27;https://autumnfish.cn/song/detail?ids=&#x27;</span>+musicId)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>)&#123;</span><br><span class="line">                <span class="comment">// console.log(response);</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>.<span class="property">songs</span>[<span class="number">0</span>].<span class="property">al</span>.<span class="property">picUrl</span>);</span><br><span class="line">                that.<span class="property">musicCover</span>=response.<span class="property">data</span>.<span class="property">songs</span>[<span class="number">0</span>].<span class="property">al</span>.<span class="property">picUrl</span>;</span><br><span class="line">            &#125;,<span class="keyword">function</span>(<span class="params">error</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 歌曲评论</span></span><br><span class="line">            axios.<span class="title function_">get</span>(<span class="string">&#x27;https://autumnfish.cn/comment/hot?type=0&amp;id=&#x27;</span>+musicId)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>)&#123;</span><br><span class="line">                <span class="comment">// console.log(response);</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>.<span class="property">hotComments</span>);</span><br><span class="line">                that.<span class="property">hotComments</span>=response.<span class="property">data</span>.<span class="property">hotComments</span>;</span><br><span class="line">            &#125;,<span class="keyword">function</span>(<span class="params">error</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">play</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;play&quot;</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">isPlaying</span>=<span class="literal">true</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">pause</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">isPlaying</span>=<span class="literal">false</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">playMV</span>:<span class="keyword">function</span>(<span class="params">mvid</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> that=<span class="variable language_">this</span>;</span><br><span class="line">            axios.<span class="title function_">get</span>(<span class="string">&#x27;https://autumnfish.cn/mv/url?id=&#x27;</span>+mvid)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>)&#123;</span><br><span class="line">                <span class="comment">// console.log(response);</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>.<span class="property">data</span>.<span class="property">url</span>);</span><br><span class="line">                that.<span class="property">isShow</span>=<span class="literal">true</span>;</span><br><span class="line">                that.<span class="property">mvUrl</span>=response.<span class="property">data</span>.<span class="property">data</span>.<span class="property">url</span>;</span><br><span class="line">            &#125;,<span class="keyword">function</span>(<span class="params">error</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">hide</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">isShow</span>=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>用到API：</p>
<ul>
<li>https://autumnfish.cn/search?keywords= 根据关键词查询</li>
<li>https://autumnfish.cn/song/url?id= 根据歌曲id查询具体歌曲Url</li>
<li>https://autumnfish.cn/song/detail?ids=
根据歌曲id查询具体歌曲信息</li>
<li>https://autumnfish.cn/comment/hot?type=0&amp;id=
根据歌曲id查询具体歌曲热门评论</li>
<li>https://autumnfish.cn/mv/url?id= 根据歌曲mvid查询具体歌曲mvUrl</li>
</ul>
<p>以上皆为网易云提供的API，感觉还是很奇妙的，使用那些在线开放的API即可实现看似很复杂的东西，让我对前端的印象有点改观</p>
<h1 id="源码链接">源码链接</h1>
<ul>
<li><a
href="https://gitee.com/wnhyang/vue-demo">https://gitee.com/wnhyang/vue-demo</a></li>
<li><a
href="https://github.com/wnhyang/vueDemo">https://github.com/wnhyang/vueDemo</a></li>
</ul>
<h1 id="总结">总结</h1>
<p>学了就是为了用，目前几乎所有开源的优秀项目，总是在readme中写明自己用到了那些技术，前后端分离项目也多的很，往往都会看到自己没有学过甚至是没有了解和听说的，对于学习那些优秀项目阻碍还是很大了，终于算是入门Vue了吧，接下来可能会做一些有趣的项目。</p>
]]></content>
      <tags>
        <tag>Git/GitHub/Gitee</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ学习</title>
    <url>/article/54e979b4.html</url>
    <content><![CDATA[<h1 id="参考">参考</h1>
<p>官网：<a
href="https://www.rabbitmq.com/tutorials/tutorial-one-javascript.html">https://www.rabbitmq.com/tutorials/tutorial-one-javascript.html</a></p>
<p>B站：<a
href="https://www.bilibili.com/video/BV1dE411K7MG">https://www.bilibili.com/video/BV1dE411K7MG</a></p>
<p>CSDN：<a
href="https://blog.csdn.net/kavito/article/details/91403659">https://blog.csdn.net/kavito/article/details/91403659</a></p>
<h1 id="安装">安装</h1>
<p>https://blog.csdn.net/qq_44767162/article/details/114531509</p>
<span id="more"></span>
<h1 id="简介">简介</h1>
<p><strong>消息</strong>指的是两个应用间传递的数据。数据的类型有很多种形式，可能只包含文本字符串，也可能包含嵌入对象。</p>
<p><strong>“消息队列(Message
Queue)”是在消息的传输过程中保存消息的容器</strong>。在消息队列中，通常有生产者和消费者两个角色。生产者只负责发送数据到消息队列，谁从消息队列中取出数据处理，他不管。消费者只负责从消息队列中取出数据处理，他不管这是谁发送的数据。</p>
<figure>
<img data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC83LzE5LzE3MzY3NTNjNDc1M2M2Zjk?x-oss-process=image/format,png"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<p>主要有三个作用：</p>
<ul>
<li><strong>解耦</strong>。如图所示。假设有系统B、C、D都需要系统A的数据，于是系统A调用三个方法发送数据到B、C、D。这时，系统D不需要了，那就需要在系统A把相关的代码删掉。假设这时有个新的系统E需要数据，这时系统A又要增加调用系统E的代码。为了降低这种强耦合，就可以使用MQ，<strong>系统A只需要把数据发送到MQ，其他系统如果需要数据，则从MQ中获取即可</strong>。</li>
</ul>
<figure>
<img data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC83LzE5LzE3MzY3OGM3YTgxY2MxYzA?x-oss-process=image/format,png"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<ul>
<li>异步。如图所示。一个客户端请求发送进来，系统A会调用系统B、C、D三个系统，同步请求的话，响应时间就是系统A、B、C、D的总和，也就是800ms。<strong>如果使用MQ，系统A发送数据到MQ，然后就可以返回响应给客户端，不需要再等待系统B、C、D的响应，可以大大地提高性能</strong>。对于一些非必要的业务，比如发送短信，发送邮件等等，就可以采用MQ。</li>
</ul>
<figure>
<img data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC83LzE5LzE3MzY3OTQ1YThjNGRmNzM?x-oss-process=image/format,png"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<ul>
<li>削峰。如图所示。这其实是MQ一个很重要的应用。假设系统A在某一段时间请求数暴增，有5000个请求发送过来，系统A这时就会发送5000条SQL进入MySQL进行执行，MySQL对于如此庞大的请求当然处理不过来，MySQL就会崩溃，导致系统瘫痪。<strong>如果使用MQ，系统A不再是直接发送SQL到数据库，而是把数据发送到MQ，MQ短时间积压数据是可以接受的，然后由消费者每次拉取2000条进行处理，防止在请求峰值时期大量的请求直接发送到MySQL导致系统崩溃</strong>。</li>
</ul>
<figure>
<img data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC83LzE5LzE3MzY3YTlkOTAyY2NhNGY?x-oss-process=image/format,png"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<h1 id="rabbitmq的特点">RabbitMQ的特点</h1>
<p>RabbitMQ是一款使用Erlang语言开发的，实现AMQP(高级消息队列协议)的开源消息中间件。首先要知道一些RabbitMQ的特点，<a
href="https://www.rabbitmq.com/">官网</a>可查：</p>
<ul>
<li>可靠性。支持持久化，传输确认，发布确认等保证了MQ的可靠性。</li>
<li>灵活的分发消息策略。这应该是RabbitMQ的一大特点。在消息进入MQ前由Exchange(交换机)进行路由消息。分发消息策略有：简单模式、工作队列模式、发布订阅模式、路由模式、通配符模式。</li>
<li>支持集群。多台RabbitMQ服务器可以组成一个集群，形成一个逻辑Broker。</li>
<li>多种协议。RabbitMQ支持多种消息队列协议，比如 STOMP、MQTT 等等。</li>
<li>支持多种语言客户端。RabbitMQ几乎支持所有常用编程语言，包括
Java、.NET、Ruby 等等。</li>
<li>可视化管理界面。RabbitMQ提供了一个易用的用户界面，使得用户可以监控和管理消息
Broker。</li>
<li>插件机制。RabbitMQ提供了许多插件，可以通过插件进行扩展，也可以编写自己的插件。</li>
</ul>
<h1 id="准备">准备</h1>
<p>maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.rabbitmq/amqp-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>RabbitMQUtils</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义连接工厂</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConnectionFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 重量级资源 类加载执行</span></span><br><span class="line">        factory = <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// 主机地址</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.1.107&quot;</span>);</span><br><span class="line">        <span class="comment">// 端口</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">// 设置虚拟主机</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/ems&quot;</span>);</span><br><span class="line">        <span class="comment">// 账号密码</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;ems&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立 RabbitMQ 连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> factory.newConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Channel channel, Connection connection)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="literal">null</span>) &#123;</span><br><span class="line">                channel.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="细节">细节</h1>
<p>生产者消费者队列要严格对应，消费者退出自动删除才生效</p>
<h1 id="基本消息模型">①基本消息模型：</h1>
<figure>
<img data-src="https://img-blog.csdnimg.cn/20190610232537261.png"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<p>在上图的模型中，有以下概念：</p>
<ul>
<li>P：生产者，也就是要发送消息的程序</li>
<li>C：消费者：消息的接受者，会一直等待消息到来。</li>
<li>queue：消息队列，图中红色部分。可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</li>
</ul>
<h2 id="生产者">生产者</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Send</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;simple_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1、获取到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="comment">// 2、从连接中创建通道，使用通道才能完成消息相关的操作</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">// 3、声明（创建）队列</span></span><br><span class="line">        <span class="comment">// 参数：String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数明细</span></span><br><span class="line"><span class="comment">         * 1、queue 队列名称</span></span><br><span class="line"><span class="comment">         * 2、durable 是否持久化，如果持久化，mq重启后队列还在</span></span><br><span class="line"><span class="comment">         * 3、exclusive 是否独占连接，队列只允许在该连接中访问，如果connection连接关闭队列则自动删除,如果将此参数设置true可用于临时队列的创建</span></span><br><span class="line"><span class="comment">         * 4、autoDelete 自动删除，队列不再使用时是否自动删除此队列，如果将此参数和exclusive参数设置为true就可以实现临时队列（队列不用了就自动删除）</span></span><br><span class="line"><span class="comment">         * 5、arguments 参数，可以设置一个队列的扩展参数，比如：可设置存活时间</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、消息内容</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        <span class="comment">// 向指定的队列中发送消息</span></span><br><span class="line">        <span class="comment">//参数：String exchange, String routingKey, BasicProperties props, byte[] body</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数明细：</span></span><br><span class="line"><span class="comment">         * 1、exchange，交换机，如果不指定将使用mq的默认交换机（设置为&quot;&quot;）</span></span><br><span class="line"><span class="comment">         * 2、routingKey，路由key，交换机根据路由key来将消息转发到指定的队列，如果使用默认交换机，routingKey设置为队列的名称</span></span><br><span class="line"><span class="comment">         * 3、props，消息的属性</span></span><br><span class="line"><span class="comment">         * 4、body，消息内容</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, <span class="literal">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;Send &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭通道和连接(资源关闭最好用try-catch-finally语句处理)</span></span><br><span class="line">        RabbitMQUtils.close(channel, connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="消费者">消费者</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Recv</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;simple_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1、获取到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="comment">// 2、从连接中创建通道，使用通道才能完成消息相关的操作</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">// 3、声明（创建）队列</span></span><br><span class="line">        <span class="comment">// 参数：String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数明细</span></span><br><span class="line"><span class="comment">         * 1、queue 队列名称</span></span><br><span class="line"><span class="comment">         * 2、durable 是否持久化，如果持久化，mq重启后队列还在</span></span><br><span class="line"><span class="comment">         * 3、exclusive 是否独占连接，队列只允许在该连接中访问，如果connection连接关闭队列则自动删除,如果将此参数设置true可用于临时队列的创建</span></span><br><span class="line"><span class="comment">         * 4、autoDelete 自动删除，队列不再使用时是否自动删除此队列，如果将此参数和exclusive参数设置为true就可以实现临时队列（队列不用了就自动删除）</span></span><br><span class="line"><span class="comment">         * 5、arguments 参数，可以设置一个队列的扩展参数，比如：可设置存活时间</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监听队列，第二个参数：是否自动进行消息确认。</span></span><br><span class="line">        <span class="comment">//参数：String queue, boolean autoAck, Consumer callback</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数明细：</span></span><br><span class="line"><span class="comment">         * 1、queue 队列名称</span></span><br><span class="line"><span class="comment">         * 2、autoAck 自动回复，当消费者接收到消息后要告诉mq消息已接收，如果将此参数设置为tru表示会自动回复mq，如果设置为false要通过编程实现回复</span></span><br><span class="line"><span class="comment">         * 3、callback，消费方法，当消费者接收到消息要执行的方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 当接收到消息后此方法将被调用</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> consumerTag  消费者标签，用来标识消费者的，在监听队列时设置channel.basicConsume</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> envelope 信封，通过envelope</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> properties 消息属性</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> body 消息内容</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Recv &#x27;&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body) + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不用关闭，使其处于监听状态</span></span><br><span class="line">        <span class="comment">// abbitMQUtils.close(channel, connection);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="work消息模型">②work消息模型</h1>
<p>工作队列或者<strong>竞争消费者</strong>模式</p>
<figure>
<img data-src="https://img-blog.csdnimg.cn/20190611201227139.png"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<p>work
queues与入门程序相比，多了一个消费端，两个消费端共同消费同一个队列中的消息，但是一个消息只能被一个消费者获取。</p>
<p>这个消息模型在Web应用程序中特别有用，可以处理短的HTTP请求窗口中无法处理复杂的任务。</p>
<h2 id="生产者-1">生产者</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">provider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;work_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, <span class="literal">null</span>, (<span class="string">&quot;你好hello work queue &quot;</span>+i).getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        RabbitMQUtils.close(channel, connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="消费者1">消费者1</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;work_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="comment">// 测试处理速度不同问题</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;Customer1：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="消费者2">消费者2</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;work_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Customer2：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="能者多劳">能者多劳</h2>
<p>需要了解确认机制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;work_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 这样RabbitMQ就会使得每个Consumer在同一个时间点最多处理1个Message</span></span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="literal">false</span>, <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Customer1：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 关闭了自动确认则手动设置确认</span></span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(),<span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Customer1 处理得慢设置为手动确认，Customer2
处理的快设置为自动确认</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;work_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        </span><br><span class="line">		<span class="comment">// 这样RabbitMQ就会使得每个Consumer在同一个时间点最多处理1个Message</span></span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Customer2：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1
id="publishsubscribe交换机类型fanout也称为广播">③<strong>Publish/subscribe（交换机类型：</strong>Fanout，也称为广播
<strong>）</strong></h1>
<p>Publish/subscribe模型示意图 ：</p>
<figure>
<img data-src="https://img-blog.csdnimg.cn/20190611200955466.png"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<h2 id="生产者-2">生产者</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Provider</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;fanout_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;fanout&quot;</span>);</span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, <span class="string">&quot;&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;fanout type message&quot;</span>.getBytes());</span><br><span class="line">        RabbitMQUtils.close(channel, connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="消费者三个">消费者（三个）</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;fanout_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;fanout&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> channel.queueDeclare().getQueue();</span><br><span class="line">        channel.queueBind(queueName, EXCHANGE_NAME, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        channel.basicConsume(queueName, <span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Customer1：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Customer1，Customer2，Customer3几乎相同</p>
<h1 id="routing-路由模型交换机类型direct">④Routing
路由模型（交换机类型：direct）</h1>
<p>Routing模型示意图：</p>
<figure>
<img data-src="https://img-blog.csdnimg.cn/20190611151532501.png"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<p>P：生产者，向Exchange发送消息，发送消息时，会指定一个routing
key。</p>
<p>X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing
key完全匹配的队列</p>
<p>C1：消费者，其所在队列指定了需要routing key 为 error 的消息</p>
<p>C2：消费者，其所在队列指定了需要routing key 为 info、error、warning
的消息</p>
<h2 id="生产者-3">生产者</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Provider</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;direct_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line">        <span class="comment">// 测试 info error warning        </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, routingKey, <span class="literal">null</span>, (<span class="string">&quot;direct type 基于routingKey：[&quot;</span> + routingKey + <span class="string">&quot;] message &quot;</span>).getBytes());</span><br><span class="line">        RabbitMQUtils.close(channel, connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="消费者1-1">消费者1</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;direct_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">queue</span> <span class="operator">=</span> channel.queueDeclare().getQueue();</span><br><span class="line">        channel.queueBind(queue, EXCHANGE_NAME, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">        channel.basicConsume(queue, <span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Customer1：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="消费者2-1">消费者2</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;direct_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">queue</span> <span class="operator">=</span> channel.queueDeclare().getQueue();</span><br><span class="line">        channel.queueBind(queue, EXCHANGE_NAME, <span class="string">&quot;info&quot;</span>);</span><br><span class="line">        channel.queueBind(queue, EXCHANGE_NAME, <span class="string">&quot;warning&quot;</span>);</span><br><span class="line">        channel.queueBind(queue, EXCHANGE_NAME, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">        channel.basicConsume(queue, <span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Customer2：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>direct 下</p>
<p>Customer1 直接收 error</p>
<p>Customer2 接收 info、warning、error</p>
<h1 id="topics-通配符模式交换机类型topics">⑤Topics
通配符模式（交换机类型：topics）</h1>
<p>Topics模型示意图：</p>
<figure>
<img data-src="https://img-blog.csdnimg.cn/20190611154905286.png"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<p>每个消费者监听自己的队列，并且设置带统配符的routingkey,生产者将消息发给broker，由交换机根据routingkey来转发消息到指定的队列。</p>
<p>Routingkey一般都是有一个或者多个单词组成，多个单词之间以“.”分割，例如：inform.sms</p>
<p>通配符规则：</p>
<p>#：匹配一个或多个词</p>
<p>*：匹配不多不少恰好1个词</p>
<h2 id="生产者-4">生产者</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Provider</span> &#123;    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;topic_exchange&quot;</span>;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC);        <span class="comment">// 测试 * #        String routingKey = &quot;user.save.find&quot;;        channel.basicPublish(EXCHANGE_NAME, routingKey, null, (&quot;topic type 基于routingKey：[&quot; + routingKey + &quot;] message &quot;).getBytes());        RabbitMQUtils.close(channel, connection);    &#125;&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="消费者1-2">消费者1</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;topic_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME,BuiltinExchangeType.TOPIC);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">queue</span> <span class="operator">=</span> channel.queueDeclare().getQueue();</span><br><span class="line"></span><br><span class="line">        channel.queueBind(queue,EXCHANGE_NAME,<span class="string">&quot;user.*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        channel.basicConsume(queue,<span class="literal">true</span>,<span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Customer1：&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="消费者4">消费者4</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;topic_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">queue</span> <span class="operator">=</span> channel.queueDeclare().getQueue();</span><br><span class="line"></span><br><span class="line">        channel.queueBind(queue,EXCHANGE_NAME,<span class="string">&quot;user.#&quot;</span>);</span><br><span class="line"></span><br><span class="line">        channel.basicConsume(queue,<span class="literal">true</span>,<span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Customer1：&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="rpc">⑥RPC</h1>
<p>RPC模型示意图：</p>
<figure>
<img data-src="https://img-blog.csdnimg.cn/20190611200118579.png"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<p>基本概念：</p>
<p>Callback queue
回调队列，客户端向服务器发送请求，服务器端处理请求后，将其处理结果保存在一个存储体中。而客户端为了获得处理结果，那么客户在向服务器发送请求时，同时发送一个回调队列地址reply_to。</p>
<p>Correlation id
关联标识，客户端可能会发送多个请求给服务器，当服务器处理完后，客户端无法辨别在回调队列中的响应具体和那个请求时对应的。为了处理这种情况，客户端在发送每个请求时，同时会附带一个独有correlation_id属性，这样客户端在回调队列中根据correlation_id字段的值就可以分辨此响应属于哪个请求。</p>
<p>流程说明：</p>
<p>当客户端启动的时候，它创建一个匿名独享的回调队列。 在 RPC
请求中，客户端发送带有两个属性的消息：一个是设置回调队列的 reply_to
属性，另一个是设置唯一值的 correlation_id 属性。 将请求发送到一个
rpc_queue 队列中。
服务器等待请求发送到这个队列中来。当请求出现的时候，它执行他的工作并且将带有执行结果的消息发送给
reply_to 字段指定的队列。
客户端等待回调队列里的数据。当有消息出现的时候，它会检查 correlation_id
属性。如果此属性的值与请求匹配，将它返回给应用 分享两道面试题：
面试题：</p>
<p>避免消息堆积？</p>
<p>1） 采用workqueue，多个消费者监听同一队列。</p>
<p>2）接收到消息以后，而是通过线程池，异步消费。</p>
<p>如何避免消息丢失？</p>
<p>1） 消费者的ACK机制。可以防止消费者丢失消息。</p>
<p>但是，如果在消费者消费之前，MQ就宕机了，消息就没了？</p>
<p>2）可以将消息进行持久化。要将消息持久化，前提是：队列、Exchange都持久化</p>
<h1 id="spring整合ribbitmq">Spring整合RibbitMQ</h1>
<p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>application</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rabbitmq-springboot</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.107</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">ems</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/ems</span></span><br></pre></td></tr></table></figure>
<p>RabbitTemplate</p>
<h1 id="simple">Simple</h1>
<p>生产者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RabbitmqStringbootApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// simple</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testHello</span><span class="params">()</span> &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>消费者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queuesToDeclare = @Queue(value = &quot;hello&quot;,declare = &quot;true&quot;))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloCustomer</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="work">Work</h1>
<p>生产者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// work</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testWork</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;work&quot;</span>, <span class="string">&quot;work模型&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>消费者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkCustomer</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queuesToDeclare = @Queue(&quot;work&quot;))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive1</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message1 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queuesToDeclare = @Queue(&quot;work&quot;))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive2</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message2 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="fanout">Fanout</h1>
<p>生产者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fanout</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testFanout</span><span class="params">()</span> &#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;logs&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;Fanout的模型发送消息&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>消费者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutCustomer</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(value = @Queue, exchange = @Exchange(value = &quot;logs&quot;, type = &quot;fanout&quot;))</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive1</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message1 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(value = @Queue, exchange = @Exchange(value = &quot;logs&quot;, type = &quot;fanout&quot;))</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive2</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message2 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="direct">Direct</h1>
<p>生产者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// direct</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDirect</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 修改 error info warn 测试</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;direct&quot;</span>, <span class="string">&quot;error&quot;</span>, <span class="string">&quot;Direct的模型发送info消息&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>消费者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectCustomer</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(value = @Queue, exchange = @Exchange(value = &quot;direct&quot;, type = &quot;direct&quot;), key = &#123;&quot;info&quot;, &quot;warn&quot;, &quot;error&quot;&#125;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive1</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message1 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(value = @Queue, exchange = @Exchange(value = &quot;direct&quot;, type = &quot;direct&quot;), key = &#123;&quot;error&quot;&#125;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive2</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message2 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="topic">Topic</h1>
<p>生产者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// topic</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testTopic</span><span class="params">()</span> &#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;topic&quot;</span>, <span class="string">&quot;product.save&quot;</span>, <span class="string">&quot;Topic的模型发送product.save消息&quot;</span>);</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;topic&quot;</span>, <span class="string">&quot;user.save&quot;</span>, <span class="string">&quot;Topic的模型发送user.save消息&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>消费者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicCustomer</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(value = @Queue, exchange = @Exchange(value = &quot;topic&quot;, type = &quot;topic&quot;), key = &#123;&quot;user.save&quot;, &quot;user.*&quot;&#125;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive1</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message1 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(value = @Queue, exchange = @Exchange(value = &quot;topic&quot;, type = &quot;topic&quot;), key = &#123;&quot;user.#&quot;,&quot;product.#&quot;&#125;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive2</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message2 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="应用场景">应用场景</h1>
<h2 id="异步处理">异步处理</h2>
<p><code>场景说明：用户注册后，需要发注册邮件和注册短信,传统的做法有两种 1.串行的方式 2.并行的方式</code></p>
<p><code>串行方式:</code>将注册信息写入数据库后,发送注册邮件,再发送注册短信,以上三个任务全部完成后才返回给客户端。
这有一个问题是,邮件,短信并不是必须的,它只是一个通知,而这种做法让客户端等待没有必要等待的东西.</p>
<p><img data-src="https://img-blog.csdn.net/20170209145852454?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2hvYW1peWFuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" /></p>
<p><code>并行方式:</code>将注册信息写入数据库后,发送邮件的同时,发送短信,以上三个任务完成后,返回给客户端,并行的方式能提高处理的时间。</p>
<p><img data-src="https://img-blog.csdn.net/20170209150218755?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2hvYW1peWFuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" /></p>
<p><code>消息队列:</code>假设三个业务节点分别使用50ms,串行方式使用时间150ms,并行使用时间100ms。虽然并行已经提高的处理时间,但是,前面说过,邮件和短信对我正常的使用网站没有任何影响，客户端没有必要等着其发送完成才显示注册成功,应该是写入数据库后就返回.
消息队列: 引入消息队列后，把发送邮件,短信不是必须的业务逻辑异步处理</p>
<p><img data-src="https://img-blog.csdn.net/20170209150824008?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2hvYW1peWFuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" /></p>
<p>由此可以看出,引入消息队列后，用户的响应时间就等于写入数据库的时间+写入消息队列的时间(可以忽略不计),引入消息队列后处理后,响应时间是串行的3倍,是并行的2倍。</p>
<h2 id="应用解耦">应用解耦</h2>
<p><code>场景：双11是购物狂节,用户下单后,订单系统需要通知库存系统,传统的做法就是订单系统调用库存系统的接口.</code></p>
<p><img data-src="https://img-blog.csdn.net/20170209151602258?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2hvYW1peWFuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" /></p>
<p>这种做法有一个缺点: 当库存系统出现故障时,订单就会失败。
订单系统和库存系统高耦合. 引入消息队列</p>
<p><img data-src="https://img-blog.csdn.net/20170209152116530?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2hvYW1peWFuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" /></p>
<p><code>订单系统:</code>用户下单后,订单系统完成持久化处理,将消息写入消息队列,返回用户订单下单成功。</p>
<p><code>库存系统:</code>订阅下单的消息,获取下单消息,进行库操作。
就算库存系统出现故障,消息队列也能保证消息的可靠投递,不会导致消息丢失.</p>
<h2 id="流量削峰">流量削峰</h2>
<p><code>场景: 秒杀活动，一般会因为流量过大，导致应用挂掉,为了解决这个问题，一般在应用前端加入消息队列。</code></p>
<p><code>作用:</code></p>
<p>1.可以控制活动人数，超过此一定阀值的订单直接丢弃(我为什么秒杀一次都没有成功过呢^^)</p>
<p>2.可以缓解短时间的高流量压垮应用(应用程序按自己的最大处理能力获取订单)</p>
<p><img data-src="https://img-blog.csdnimg.cn/20201030225837502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70#pic_center" /></p>
<p>1.用户的请求,服务器收到之后,首先写入消息队列,加入消息队列长度超过最大值,则直接抛弃用户请求或跳转到错误页面.</p>
<p>2.秒杀业务根据消息队列中的请求信息，再做后续处理.</p>
<h1 id="rabbitmq集群">RabbitMQ集群</h1>
<h2 id="普通集群副本集群">普通集群(副本集群)</h2>
<blockquote>
<p>All data/state required for the operation of a RabbitMQ broker is
replicated across all nodes. An exception to this are message queues,
which by default reside on one node, though they are visible and
reachable from all nodes. To replicate queues across nodes in a cluster
--摘自官网</p>
</blockquote>
<p><code>默认情况下:RabbitMQ代理操作所需的所有数据/状态都将跨所有节点复制。这方面的一个例外是消息队列，默认情况下，消息队列位于一个节点上，尽管它们可以从所有节点看到和访问</code></p>
<p><strong>架构图</strong></p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.6au4m3q1jqk0.png"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>核心解决问题:
<code>当集群中某一时刻master节点宕机,可以对Quene中信息,进行备份</code></p>
<p><strong>集群搭建</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">0.集群规划</span></span><br><span class="line">	node1: 10.15.0.3  mq1  master 主节点</span><br><span class="line">	node2: 10.15.0.4  mq2  repl1  副本节点</span><br><span class="line">	node3: 10.15.0.5  mq3  repl2  副本节点</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.克隆三台机器主机名和ip映射</span></span><br><span class="line">	vim /etc/hosts加入:</span><br><span class="line">		 10.15.0.3 mq1</span><br><span class="line">    	10.15.0.4 mq2</span><br><span class="line">    	10.15.0.5 mq3</span><br><span class="line">	node1: vim /etc/hostname 加入:  mq1</span><br><span class="line">	node2: vim /etc/hostname 加入:  mq2</span><br><span class="line">	node3: vim /etc/hostname 加入:  mq3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.三个机器安装rabbitmq,并同步cookie文件,在node1上执行:</span></span><br><span class="line">	scp /var/lib/rabbitmq/.erlang.cookie root@mq2:/var/lib/rabbitmq/</span><br><span class="line">	scp /var/lib/rabbitmq/.erlang.cookie root@mq3:/var/lib/rabbitmq/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3.查看cookie是否一致:</span></span><br><span class="line">	node1: cat /var/lib/rabbitmq/.erlang.cookie </span><br><span class="line">	node2: cat /var/lib/rabbitmq/.erlang.cookie </span><br><span class="line">	node3: cat /var/lib/rabbitmq/.erlang.cookie </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4.后台启动rabbitmq所有节点执行如下命令,启动成功访问管理界面:</span></span><br><span class="line">	rabbitmq-server -detached </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5.在node2和node3执行加入集群命令:</span></span><br><span class="line">	1.关闭       rabbitmqctl stop_app</span><br><span class="line">	2.加入集群    rabbitmqctl join_cluster rabbit@mq1</span><br><span class="line">	3.启动服务    rabbitmqctl start_app</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6.查看集群状态,任意节点执行:</span></span><br><span class="line">	rabbitmqctl cluster_status</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">7.如果出现如下显示,集群搭建成功:</span></span><br><span class="line">	Cluster status of node rabbit@mq3 ...</span><br><span class="line">	[&#123;nodes,[&#123;disc,[rabbit@mq1,rabbit@mq2,rabbit@mq3]&#125;]&#125;,</span><br><span class="line">	&#123;running_nodes,[rabbit@mq1,rabbit@mq2,rabbit@mq3]&#125;,</span><br><span class="line">	&#123;cluster_name,&lt;&lt;&quot;rabbit@mq1&quot;&gt;&gt;&#125;,</span><br><span class="line">	&#123;partitions,[]&#125;,</span><br><span class="line">	&#123;alarms,[&#123;rabbit@mq1,[]&#125;,&#123;rabbit@mq2,[]&#125;,&#123;rabbit@mq3,[]&#125;]&#125;]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">8.登录管理界面,展示如下状态:</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.1uf0mjfngcgw.png"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">9.测试集群在node1上,创建队列</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.541gmm21ikw0.png"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">10.查看node2和node3节点:</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.6gi58obfb1w0.png"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">11.关闭node1节点,执行如下命令,查看node2和node3:</span></span><br><span class="line">	rabbitmqctl stop_app</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="镜像集群">镜像集群</h2>
<blockquote>
<p>This guide covers mirroring (queue contents replication) of classic
queues --摘自官网</p>
<p>By default, contents of a queue within a RabbitMQ cluster are located
on a single node (the node on which the queue was declared). This is in
contrast to exchanges and bindings, which can always be considered to be
on all nodes. Queues can optionally be made <em>mirrored</em> across
multiple nodes. --摘自官网</p>
</blockquote>
<p>镜像队列机制就是将队列在三个节点之间设置主从关系，消息会在三个节点之间进行自动同步，且如果其中一个节点不可用，并不会导致消息丢失或服务不可用的情况，提升MQ集群的整体高可用性。</p>
<p><strong>集群架构图</strong></p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.1z5nljizwmlc.png"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p><strong>配置集群架构</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">0.策略说明</span></span><br><span class="line">rabbitmqctl set_policy [-p &lt;vhost&gt;] [--priority &lt;priority&gt;] [--apply-to &lt;apply-to&gt;] &lt;name&gt; &lt;pattern&gt;  &lt;definition&gt;</span><br><span class="line">-p Vhost： 可选参数，针对指定vhost下的queue进行设置</span><br><span class="line">Name:     policy的名称</span><br><span class="line">Pattern: queue的匹配模式(正则表达式)</span><br><span class="line">Definition：镜像定义，包括三个部分ha-mode, ha-params, ha-sync-mode</span><br><span class="line">         		ha-mode:指明镜像队列的模式，有效值为 all/exactly/nodes</span><br><span class="line">                      all：表示在集群中所有的节点上进行镜像</span><br><span class="line">                      exactly：表示在指定个数的节点上进行镜像，节点的个数由ha-params指定</span><br><span class="line">                      nodes：表示在指定的节点上进行镜像，节点名称通过ha-params指定</span><br><span class="line">          	 ha-params：ha-mode模式需要用到的参数</span><br><span class="line">              ha-sync-mode：进行队列中消息的同步方式，有效值为automatic和manual</span><br><span class="line">              priority：可选参数，policy的优先级</span><br><span class="line">              </span><br><span class="line">               </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.查看当前策略</span></span><br><span class="line">rabbitmqctl list_policies</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.添加策略</span></span><br><span class="line">rabbitmqctl set_policy ha-all &#x27;^hello&#x27; &#x27;&#123;&quot;ha-mode&quot;:&quot;all&quot;,&quot;ha-sync-mode&quot;:&quot;automatic&quot;&#125;&#x27; </span><br><span class="line">说明:策略正则表达式为 “^” 表示所有匹配所有队列名称  ^hello:匹配hello开头队列</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3.删除策略</span></span><br><span class="line">rabbitmqctl clear_policy ha-all</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4.测试集群</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="总结">总结</h1>
<p>前面的除了集群部分没有完全实际操作外，其他的都是实际操作过的目前中间件消息队列部分只了解了这一个RabbitMQ，还是希望能学到更多，更重要的是实际操作应用</p>
]]></content>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Linux</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Win11初体验</title>
    <url>/article/176feceb.html</url>
    <content><![CDATA[<h1 id="声明">声明</h1>
<p>2021/11/17我的笔记本向我推送了Win11，早之前Win10已经提示我的硬件满足升级Win11的要求，果然升级推送马上就到了。</p>
<p>我还是算比较关心这种科技的新闻的，Win11刚刚发布时，也看过一些体验分享视频，了解到一些。所以当天还是很激动的，期待Win11能给我带来一些惊喜。从我看到的一些体验视频来说Win11的变化还是很大的，不仅仅是UI的变化，当然还有其他（非专业我的也说不清楚）。我是属于那种激进又不冒进的那种，很想体验升级给我带来的新鲜感，但又怕升级带来的不稳定性。所以我总是等待正式版（稳定版）才会尝试，不会直接使用尝新版（测试版）。受到一部分体验视频的影响，有些胆怯不敢尝试，但到第二天还是忍不住升级了，毕竟小马过河嘛，你不试试怎么知道水深不深呢？</p>
<p>在这里声明：此体验感受完全是非专业体验分享，切勿认真，我是想从一个普通的用户角度展示Win11带给我的感受，我会尽量从我的日常使用角度出发，不会那么全面详细，体验时间较短可能之后会再补充</p>
<span id="more"></span>
<h1 id="升级">升级</h1>
<h2 id="任务栏">任务栏</h2>
<p>下面展示升级win11后，自己整理过后的界面</p>
<p><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.6tt9ryf3adk0.png" alt="image" style="zoom:80%;" /></p>
<p>怎么样，是不是神似MacOS，的确太像了。</p>
<p>居中的任务栏+新升级的UI+iTunes（微软商店下载的），简直了</p>
<p><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.1p2aouh5q5j.png" alt="image" style="zoom: 80%;" /></p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.70u4krk1k440.png"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.5ndss495muw0.png"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>任务栏最右边（右下角）分块了，包括时间日期+通知+专注助手设置为一块如上展示，这里应该是是显示问题，使得日期显示在任务栏上导致遮挡问题，这是因为我设置的任务栏默认隐藏，如果设置任务栏常在的话就不会有这样的问题；另外网络+音量+电池为一块，点入可以设置蓝牙、飞行模式、节电模式等，最后一块就是输入法了（我使用的就是默认的微软输入法），可以看到最右边多了一个图标，点开后如下，也可以之间用快捷键<code>Win+.</code>直接调出，它包括表情符号，GIF，颜文字，符号，剪切板历史记录，里面的内容很丰富，可以自己探索一下，个人感觉剪切板历史很有用</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.3u2rvoj8kuq0.png"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>接着我们来关注任务栏中央</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.4ug1t78l5ew0.png"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>左边的四个是默认固定的，分别是开始（所有Win必备的），搜索（可以快速找到一些应用、文档、网页等），任务视图（包括进行中应用和其他桌面），小组件（Win11新加入的，不过我没有固定，原因就是自定义性太差，后面说）</p>
<p><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.2xb6bob181o0.png" alt="image" style="zoom:80%;" /></p>
<p>其实升级完系统，我首先打开的就是设置，大致将总体按自己的想法设置好，这里先将任务栏，后面设置会再说</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.5ib1t5yo2zk0.png"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>开始，主要有搜索（会直接跳到搜索）、固定应用（需要自己设置，默认的都是微软的一堆应用，像是过去的磁贴，都是为了快速启动，可以从右边的所有应用查看其它）、推荐项目（通常就是最近安装的应用和经常使用的）</p>
<p>搜索、任务视图就不用怎么讲了，没什么变化</p>
<p><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.3ubxjcmy4eo0.png" alt="image" style="zoom:80%;" /></p>
<p>这次重点更新的是这个小组件，目前可以自定义的组件非常少，组件下是一些资讯新闻，可以设置自己的偏好</p>
<p>目前最大的问题的就是这部分个性化不足，没有一些更加实用的功能，而且下面的资讯新闻不能自定义来源满足我们的喜好的话，就会成为垃圾广告，就目前来说，我是选择关闭的✕</p>
<p>简单总结一下，仅从任务栏出发，就会发现这次升级变化还是很大的，不管是UI的圆角化，还是组件的模块化，还包括动画(这里展示不出来)，都能很明显感受到果味十足，不，开玩笑的😂，正经的说，能感受到微软在向触屏交互方向的努力，这次带来的升级改变很像我们使用的平板与手机了，只能说期待微软的新动作吧</p>
<h2 id="设置">设置</h2>
<p><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.5q9z2t5orao0.png" alt="image" style="zoom:80%;" /></p>
<p>相比于Win10，设置变化的很大</p>
<p>原来的Win10，设置分为几大模块放在一个页面，每点进一个就只能回退找回另一个模块的设置，简直不堪其忧</p>
<p>现在的Win11，以左右两块来展示，左边是主要分类模块，右边是具体内容，清新自然，看起来就是很明快的。还有当跳入某个具体的设置，还可以通过上面跳转，非常方便</p>
<p><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.5e21c8ioids0.png" alt="image" style="zoom:80%;" /></p>
<p>设置里的内容太多，而我的关注点没那么多，可能原来就有的设置，我还以为是新升级的，所以这个我不会那么细致每个都说，我仅从个性化设置出发说一下UI的变化吧</p>
<p><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.32yb1rh1aua0.png" alt="image" style="zoom:80%;" /></p>
<p>这次Win11有了6中主题可选，分别是浅色、深色、日出、流畅、发光、捕获的动作？</p>
<p>主要关注一下深色和浅色即可，其他的就是这两个的变种</p>
<p><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/截屏2.62nfbi8vqgw0.jpg" alt="截屏2" style="zoom:80%;" /></p>
<p><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/截屏1.ivpo8dqozf4.jpg" alt="截屏1" style="zoom:80%;" /></p>
<p><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.40sel0wk6bk0.png" alt="image" style="zoom:80%;" /></p>
<p>可以看到这次UI的整体变化，右键变化，简介好看，缺少的内容都包含在“显示更多选项”中，还有文件UI变化，也更加好看了，这次所有的UI都变为这个风格，包括win经典音效都变得更加悦耳了</p>
<p>这里要谈一谈深色主题了，因为我目前展示都是浅色主题</p>
<p>我之所以不选择深色主题的原因就是</p>
<p>1、深色会同时改变一些应用（当然不是全部，但其中包括Edge和Chrome），这会有什么结果呢？神色主题下，浏览器顶部软件本身是深色，然而大部分网页还是浅色，这样对比起来我受不了</p>
<p>2、上图文件在深色主题下，颜色过于深，使得一些图片等内容展示效果不好</p>
<p>3、可能还有其他原因吧。。。</p>
<h2 id="商店">商店</h2>
<p>提到微软商店，不知道是否还有人记得我们的Windows电脑中还有一个这样的一个应用商店呢？</p>
<p>微软商店存在感一直很低，非常低。所以这次微软也是做出了改变，没有具体了解过的我只能简单描述一下。</p>
<p>升级包括，UI、软件库、性能等</p>
<p>前面的iTunes就是通过微软商店下载安装的，可能是我孤陋寡闻了，没想到Windows还能装这个，当时还特别激动。</p>
<p>顺便提一下，这次Win11可以安装Android应用，而且性能由于传统的模拟器，不过现在我还不会搞🤔</p>
<h2 id="wt">WT</h2>
<p><a href="https://docs.microsoft.com/zh-cn/windows/terminal/">Windows
Terminal（WT）</a>，这个应该不是Win11升级带的吧，好像之前就有，不过这次升级让我认识到了</p>
<div class="embeddedvideo">
<iframe src="https://www.microsoft.com/zh-cn/videoplayer/embed/RWHAdS?autoCaptions=zh-cn" frameborder="0" allowfullscreen="true" data-linktype="external">
</iframe>
</div>
<p><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.7sfwbju3hb8.png" alt="image" style="zoom:80%;" /></p>
<p><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.6y07t3785kc0.png" alt="image" style="zoom:80%;" /></p>
<p>在wt中可以进行很多设置，包括自定义配色方案、新的终端等，还可以通过修改JSON文件进行深度自定义。</p>
<p>在官方展示中还包括其他基于Linux的终端，不过我还没有摸索到</p>
<h1 id="总结">总结</h1>
<p>有时候我们面临升级，会出现一些尴尬的场景，一些之前版本就有我们才发现，一些新升级的我们视而不见</p>
<p>究其原因</p>
<p>1、原有的，与我们关系不大，根本感受不到</p>
<p>2、原有的，难用，我们无法从中优化我们使用体验（如微软商店）</p>
<p>3、同1，换成升级的</p>
<p>4、同2，换成升级的（目前如小组件）</p>
<p>总结来说就是升级要体现出升级，不能说稍微一改就算升级了，那样的话还不如叫Win10
序号xxx呢？</p>
<p>就我目前的体验来说，升级的还是很成功的！</p>
]]></content>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>maven与npm使用镜像</title>
    <url>/article/f5984dab.html</url>
    <content><![CDATA[<p>使用maven和npm从远程仓库下文件常常出现速度极慢的问题，下面我们使用阿里镜像解决问题！</p>
<span id="more"></span>
<h1 id="配置maven">配置maven</h1>
<p>打开 Maven
的配置文件(windows机器一般在maven安装目录的conf/settings.xml)，在
<mirrors></mirrors> 标签中添加 mirror 子节点:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://developer.aliyun.com/mirror/maven">详细请看</a></p>
<h1 id="配置npm">配置npm</h1>
<p>用set命令换成阿里的镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.aliyun.com/mirror/npm">详细请看</a></p>
]]></content>
      <tags>
        <tag>记录</tag>
        <tag>Maven</tag>
        <tag>NPM</tag>
      </tags>
  </entry>
  <entry>
    <title>docker部署nacos</title>
    <url>/article/604142d6.html</url>
    <content><![CDATA[<h1 id="参考">参考</h1>
<p>https://nacos.io/zh-cn/docs/v2/quickstart/quick-start-docker.html</p>
<p>https://nacos.io/zh-cn/docs/v2/guide/admin/monitor-guide.html</p>
<h1 id="简介">简介</h1>
<p>最近以优惠价购买了云服务器，想着不能浪费资源，打算做点东西，玩一玩。可还是高估了我的经济实力，<code>1C2G</code>是真的不够用，我在这台机器上装了<code>JDK</code>、<code>Maven</code>、<code>RocketMQ、Docker</code>、<code>Docker-compose</code>，同时在<code>Docker</code>下运行了<code>MySQL</code>、<code>Redis</code>、<code>Nginx</code>、<code>RocketMQ-Dashboard</code>，到这里其实都还好，在修改启动参数的情况下勉强够用。</p>
<p>但为了学习微服务，向<code>Spring Cloud Alibaba</code>靠，准备搭建<code>Nacos</code>作为注册中心和配置中心，这下问题来了，按照官网的部署方案，出了问题，在这里记录一下，为他人学习提供一下参考。</p>
<span id="more"></span>
<h1 id="部署">部署</h1>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nacos/nacos-server:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nacos-standalone</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">PREFER_HOST_MODE=hostname</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MODE=standalone</span></span><br><span class="line">    <span class="comment"># 加上了启动参数配置</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">JVM_XMS=256m</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">JVM_XMX=256m</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">JVM_XMN=128m</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="comment"># 挂载nacos配置文件</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./init.d/application.properties:/home/nacos/conf/application.properties</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./standalone-logs/:/home/nacos/logs</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./init.d/custom.properties:/home/nacos/init.d/custom.properties</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;8848:8848&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;9848:9848&quot;</span></span><br><span class="line">  <span class="attr">prometheus:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/prometheus:latest</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus/prometheus-standalone.yaml:/etc/prometheus/prometheus.yml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9090:9090&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line">  <span class="attr">grafana:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">grafana</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/grafana:latest</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="comment"># 挂载grafana配置文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./grafana/config/grafana.ini:/etc/grafana/grafana.ini</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3000</span><span class="string">:3000</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br></pre></td></tr></table></figure>
<p><code>docker-compose</code>如上，其中注释是我在原有上加的，自己部署时可以参考官网再做改动。</p>
<p>启动时注意这些端口有没有被占用，有的就改一下映射。</p>
<h2 id="nacos启动参数配置">nacos启动参数配置</h2>
<p>主要是我的机器太拉了，不然还是使用默认配置就好</p>
<table>
<thead>
<tr class="header">
<th>属性</th>
<th>说明</th>
<th>默认</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>JVM_XMS</code></td>
<td><code>-Xms</code></td>
<td>默认 :<code>1g</code></td>
</tr>
<tr class="even">
<td><code>JVM_XMX</code></td>
<td><code>-Xms</code></td>
<td>默认 :<code>1g</code></td>
</tr>
<tr class="odd">
<td><code>JVM_XMN</code></td>
<td><code>-Xms</code></td>
<td>默认 :<code>512m</code></td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="挂载nacos配置文件">挂载nacos配置文件</h2>
<p>之所以挂载<code>nacos</code>配置文件，是因为之后接入<code>Prometheus</code>需要这个配置项打开，而在<code>docker</code>容器内配置实在有些麻烦。</p>
<p>application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">### Metrics for prometheus</span></span><br><span class="line"><span class="attr">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br></pre></td></tr></table></figure>
<h2 id="挂载grafana配置文件">挂载grafana配置文件</h2>
<p>这个我的问题还没解决，就是关于<code>grafana.init</code>配置文件，明明改了<code>domain</code>配置，可配置钉钉通知后，链接仍然是<code>localhost</code>，导致访问链接一直是错误的。</p>
<h1 id="启动">启动</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose -f example/standalone-derby.yaml up -d</span><br></pre></td></tr></table></figure>
<p>加上<code>-d</code>后台启动方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看启动情况</span></span><br><span class="line">docker-compose -f example/standalone-derby.yaml ps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CONTAINER ID   IMAGE                       COMMAND                  CREATED         STATUS         PORTS                                                                                  NAMES</span><br><span class="line">4ca1c13e6a6b   prom/prometheus:latest      &quot;/bin/prometheus --c…&quot;   2 minutes ago   Up 2 minutes   0.0.0.0:9090-&gt;9090/tcp, :::9090-&gt;9090/tcp                                              prometheus</span><br><span class="line">05fc4410bbd5   grafana/grafana:latest      &quot;/run.sh&quot;                2 minutes ago   Up 2 minutes   0.0.0.0:3000-&gt;3000/tcp, :::3000-&gt;3000/tcp                                              grafana</span><br><span class="line">35ae7aae1e09   nacos/nacos-server:latest   &quot;bin/docker-startup.…&quot;   2 minutes ago   Up 2 minutes   0.0.0.0:8848-&gt;8848/tcp, :::8848-&gt;8848/tcp, 0.0.0.0:9848-&gt;9848/tcp, :::9848-&gt;9848/tcp   nacos-standalone</span><br></pre></td></tr></table></figure>
<h2 id="控制台检查">控制台检查</h2>
<p>这里注意提前把网络开通，防火墙、安全组这些</p>
<h3 id="nacos">nacos</h3>
<p>http://ip:8848/nacos</p>
<p>用户名密码：<code>nacos/nacos</code></p>
<h3 id="prometheus">prometheus</h3>
<p>http://ip:9090/</p>
<p>搜索：<code>nacos_monitor</code>，检查<code>prometheus</code>有没有采集到<code>nacos</code>数据</p>
<h3 id="grafana">grafana</h3>
<p>http://ip:3000/</p>
<p>用户名密码：<code>admin/admin</code></p>
<p>首次登录需要修改密码</p>
<h2 id="grafana配置">grafana配置</h2>
<p><code>Configuration</code>-&gt;<code>Datassources</code>-&gt;选择<code>Prometheus</code></p>
<p>这里要注意了，按照官方说的说法确实没错，但是很容易出错，因为官网配置的的<code>prometheus</code>而Grafana默认配置的的是<code>Prometheus</code>，就是因为这一个字母大小小写，为之后从官网导入配置埋下伏笔。</p>
<p><code>Create</code>-&gt;<code>Import</code>-&gt;<code>Upload JSON file</code></p>
<p>倒入官网配置文件即可</p>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>Spring Cloud Alibaba</tag>
        <tag>Grafana</tag>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>maven项目的小问题</title>
    <url>/article/93353eaf.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p>我的秋招基本结束了，最忙碌的时间段是8、9月，10月基本没有什么笔试/面试了，或是自己真的累了，不想再继续秋招了，想躺了，一些确实是自己主动结束流程的</p>
<p>因为有了秋招的经历，现在更加了解自己的知识体系，明白自己需要补充哪些内容，因为秋招实在是很煎熬，一下子从那样的状态转换过来，确实很不适，很空虚。</p>
<p>所有偶尔会花些时间继续之前的学习，比如我要说的<a
href="https://www.bilibili.com/video/BV1np4y1C7Yf">谷粒商城</a>，这里就记录一下困扰了我好久的一个问题</p>
<span id="more"></span>
<h1 id="说明">说明</h1>
<p>关于项目下面有两个链接可以了解一下</p>
<p>B站：https://www.bilibili.com/video/BV1np4y1C7Yf</p>
<p>笔记：https://www.yuque.com/zhangshuaiyin/guli-mall/wrbzgy</p>
<h1 id="问题">问题</h1>
<p>我遇到问题是<code>p125</code>的<code>SpringBoot</code>整合<code>ElasticSearch</code>出现的子项目<code>&lt;properties&gt;</code>标签指定版本不生效问题。</p>
<p>需要引入的是<code>elasticsearch-rest-high-level-client</code>，版本根据自己的<code>ES</code>定</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.11.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>直接引入出现的问题是<code>SpringBoot</code>自带的<code>ES</code>组件版本与我们需要的不同，会产生一些问题（如下图是我们期望的结果，但之前却是红框中是<code>SpringBoot</code>自带的ES版本），在使用一些api会有问题</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.1t7w1sncjbsw.png"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>按照视频里的做法是配置<code>&lt;properties&gt;</code>标签，加上<code>ES</code>版本</p>
<p><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.27gzi460dpz4.png" alt="image" style="zoom:67%;" /></p>
<p>在我使用的<code>SpringBoot</code>中找到<code>ES</code>版本配置，根据就近原则，我们只需在项目中做如下配置即可（这也是视频中的方法）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.11.1<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是却没有我期待的结果，试了很多次，怎么都不对，虽然可以暴力引入对应包解决（也就是加入如下代码），但不觉得那是最好的方案</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;elasticsearch.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;elasticsearch.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="哪里出了问题">哪里出了问题</h1>
<p>就近原则不对？IDEA有bug？</p>
<p>各种想法都出现了，但始终无法解决</p>
<p>这时想到我虽然是照着视频学习的，代码都是自己敲的，但自己也并非是一成不变的，比如整个项目架构，因为自己有一定基础，我会对父子项目进行小重构，会通过父项目管理一些公共的版本依赖等</p>
<p>所以我拿了一个新项目做实验，完全按照视频里那样，也就是<code>SpringBoot</code>项目，引入<code>elasticsearch-rest-high-level-client</code>，并配置<code>&lt;properties&gt;</code>版本</p>
<p>果然就是我期望的结果，那么现在问题很明显了，问题就在我的search子项目的父项目是我配置的大的父项目，里面包含了很多其他的依赖，可能是这里的问题</p>
<h1 id="最终解决方案">最终解决方案</h1>
<p>父pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wnh.gulimall<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gulimall<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>gulimall<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>gulimall-coupon<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>gulimall-member<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>gulimall-order<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>gulimall-product<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>gulimall-ware<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>renren-fast<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>gulimall-common<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>gulimall-gateway<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>gulimall-third-part<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>renren-generator<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>gulimall-search<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 统一管理jar包版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.11.1<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 子模块继承之后，提供作用：锁定版本+子modlue不用写groupId和version --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">           ...</span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;elasticsearch.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;elasticsearch.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;elasticsearch.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 一些公共依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>子pom就很简单了，直接引入即可不用版本</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="补充">补充</h1>
<p>在解决问题中还发现了项目中一些依赖冲突问题，推荐使用IDEA的插件<code>Maven Helper</code>解决</p>
<p>我也是早就下了这个插件，但一直没有使用，正好在这里实践了</p>
<p><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.6ucdg4ujw4s0.png" alt="image" style="zoom:67%;" /></p>
<p>如上，pom下有<code>Text</code>和<code>Dependency Analyzer</code>两个选项</p>
<p><code>Text</code>显示pom内容</p>
<p><code>Dependency Analyzer</code>依赖分析，它会分析pom依赖之间存在的问题，冲突项会展示出来</p>
<p>如果觉得依赖关系不清晰的还可以，通过右侧<code>Maven</code>工具栏找到<code>Show Dependencies...</code>展示依赖图，其中冲突会以红色标识，非常方便</p>
<p>可以通过排除某些依赖解决冲突</p>
<h1 id="总结">总结</h1>
<p>近期学习状态不行，秋招结束躺了很久了，状态确实不如之前，希望能慢慢恢复吧，找到一种适应自己的Balance</p>
]]></content>
      <tags>
        <tag>记录</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/article/4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very
first post. Check <a href="https://hexo.io/docs/">documentation</a> for
more info. If you get any problems when using Hexo, you can find the
answer in <a
href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or
you can ask me on <a
href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h1 id="quick-start">Quick Start</h1>
<h1 id="create-a-new-post">Create a new post</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/writing.html">Writing</a></p>
<h1 id="run-server">Run server</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h1 id="generate-static-files">Generate static files</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/generating.html">Generating</a></p>
<h1 id="deploy-to-remote-sites">Deploy to remote sites</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>python pip使用国内源（转载）</title>
    <url>/article/f551fc56.html</url>
    <content><![CDATA[<h1 id="参考">参考</h1>
<p><a href="https://www.jianshu.com/p/dfbb90995a2c">原文</a></p>
<span id="more"></span>
<h1 id="国内源">国内源</h1>
<ul>
<li>清华：https://pypi.tuna.tsinghua.edu.cn/simple/</li>
<li>阿里云：http://mirrors.aliyun.com/pypi/simple/</li>
<li>中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/</li>
<li>华中理工大学：http://pypi.hustunique.com/</li>
<li>山东理工大学：http://pypi.sdutlinux.org/</li>
<li>豆瓣：http://pypi.douban.com/simple/</li>
</ul>
<blockquote>
<p>新版ubuntu要求使用https源，要注意。</p>
</blockquote>
<h1 id="临时使用">临时使用</h1>
<p>可以在使用pip的时候加参数
<code>-i https://pypi.tuna.tsinghua.edu.cn/simple</code>
例如：<code>pip install -i http://mirrors.aliyun.com/pypi/simple/ tensorflow</code>，这样就会从阿里云这边的镜像去安装tensorflow库。</p>
<h1 id="永久使用">永久使用</h1>
<p>请参考<a href="https://www.jianshu.com/p/dfbb90995a2c">原文</a></p>
]]></content>
      <tags>
        <tag>记录</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python数据分析数据源</title>
    <url>/article/74f926a1.html</url>
    <content><![CDATA[<h1 id="两个数据社区">两个数据社区</h1>
<p><a href="https://www.kaggle.com/">kaggle</a></p>
<p><a href="https://www.kesci.com/">和鲸社区Kesci</a></p>
<p>在用python做数据分析时可以从这找到想要的数据源，当然更重要的是社区交流学习。</p>
]]></content>
      <tags>
        <tag>记录</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python最后的作业</title>
    <url>/article/bfa801bc.html</url>
    <content><![CDATA[<h1 id="课程论文">课程论文</h1>
<p>Python课程最终考核方式是课程论文，要求就是做一个数据分析，提交文档、源码及数据源。</p>
<span id="more"></span>
<h2 id="数据源">数据源</h2>
<p>我的数据源来自<a href="https://www.kesci.com/">和鲸社区</a>的<a
href="https://www.kesci.com/mw/dataset/5d91aa61037db3002d3b5d53/file">世界幸福报告</a>。</p>
<h2 id="目标">目标</h2>
<p>分析的主要目标有，本次调查所有国家或地区的全世界区域数量分布状况，由此展开区域整体幸福感对比，如各大地区幸福指数对比，各大地区幸福指数区间分布，2020年世界幸福报告前10名和后10名，最后通过可视化，如热力图分布，直观体现幸福指数与调查项目中相关关系，幸福地图，直观体现各国家地区幸福指数对比。</p>
<h2 id="方法及类库">方法及类库</h2>
<p>其中主要分析方法是Python的numpy和pandas的相关数据分析方法，再加上一些可视化库方法主要有matplotlib和seaborn，更重要的是pyecharts的各种工具，库里的很多可视化都非常漂亮，尤其是世界地图。经过分析数据和可视化，得出分析结论。</p>
<h2 id="参考">参考</h2>
<p><a
href="https://www.kesci.com/mw/project/5fb78386cced1800302a94f9">世界幸福指数分析哪个国家最幸福</a></p>
<p><a
href="https://blog.csdn.net/qq_31468321/article/details/84593604">数据可视化--世界幸福指数报告</a></p>
<p><a
href="https://edu.cda.cn/group/19/thread/279">世界幸福报告数据分析</a></p>
<h1 id="开始">开始</h1>
<p>类库导入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar, Map, Line, Page, Pie, Grid</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">import</span> statsmodels.api <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">import</span> statsmodels.formula.api <span class="keyword">as</span> smf</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示负号</span></span><br></pre></td></tr></table></figure>
<p>读取数据及数据处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读入数据与数据处理</span></span><br><span class="line">s = <span class="string">r&#x27;C:\Users\86183\Desktop\课程论文\data&#x27;</span></span><br><span class="line">df_2018 = pd.read_csv(s+<span class="string">&#x27;/2018.csv&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">df_2019 = pd.read_csv(s+<span class="string">&#x27;/2019.csv&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">df_2020 = pd.read_csv(s+<span class="string">&#x27;/2020.csv&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除不必要的信息</span></span><br><span class="line">df_2020 = df_2020.iloc[:, :<span class="number">12</span>]</span><br><span class="line">columns = [<span class="string">&#x27;Standard error of ladder score&#x27;</span>, <span class="string">&#x27;upperwhisker&#x27;</span>, <span class="string">&#x27;lowerwhisker&#x27;</span>]</span><br><span class="line">df_2020.drop(columns, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">data_info</span>():</span><br><span class="line">    <span class="built_in">print</span>(df_2020.info())</span><br><span class="line">    <span class="built_in">print</span>(df_2020.describe())</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://img.imgdb.cn/item/6000fad23ffa7d37b3151887.jpg"
alt="数据信息" />
<figcaption aria-hidden="true">数据信息</figcaption>
</figure>
<p>主体 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 幸福地图</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">HappinessMap</span>():</span><br><span class="line">    x_data = df_2020[<span class="string">&#x27;Country name&#x27;</span>].tolist()</span><br><span class="line">    y_data = df_2020[<span class="string">&#x27;Ladder score&#x27;</span>].<span class="built_in">round</span>(<span class="number">2</span>).tolist()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 地图</span></span><br><span class="line">    map1 = Map()</span><br><span class="line">    map1.add(<span class="string">&#x27;&#x27;</span>, [<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>(x_data, y_data)], maptype=<span class="string">&#x27;world&#x27;</span>,)</span><br><span class="line">    map1.set_series_opts(label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>))</span><br><span class="line">    map1.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;Happiness Score&#x27;</span>),</span><br><span class="line">    visualmap_opts=opts.VisualMapOpts(max_=<span class="number">8</span>, is_piecewise=<span class="literal">True</span>,</span><br><span class="line">        pieces=[&#123;<span class="string">&#x27;max&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;min&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;0-3&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;max&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;min&#x27;</span>: <span class="number">3.1</span>,</span><br><span class="line">                    <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;3-4&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;max&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;min&#x27;</span>: <span class="number">4.1</span>,</span><br><span class="line">                    <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;4-5&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;max&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;min&#x27;</span>: <span class="number">5.1</span>,</span><br><span class="line">                    <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;5-6&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;max&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;min&#x27;</span>: <span class="number">6.1</span>,</span><br><span class="line">                    <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;6-7&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;max&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;min&#x27;</span>: <span class="number">7.1</span>, <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;7-8&#x27;</span>&#125;]</span><br><span class="line">        ),</span><br><span class="line">                        )</span><br><span class="line">    map1.render(<span class="string">&quot;幸福地图.html&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<figure>
<img data-src="https://img.imgdb.cn/item/6000f3943ffa7d37b3111a15.jpg"
alt="幸福地图" />
<figcaption aria-hidden="true">幸福地图</figcaption>
</figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 各大地区的平均幸福指数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">country_score_of_every_region</span>():</span><br><span class="line">    df_m = df_2020.groupby(<span class="string">&#x27;Regional indicator&#x27;</span>)[<span class="string">&#x27;Ladder score&#x27;</span>].mean().sort_values()</span><br><span class="line">    x_data = df_m .index.tolist()</span><br><span class="line">    y_data = df_m .values.<span class="built_in">round</span>(<span class="number">2</span>).tolist()</span><br><span class="line">    grid = Grid()</span><br><span class="line">    bar1 = Bar()</span><br><span class="line">    bar1.add_yaxis(<span class="string">&#x27;&#x27;</span>,y_data) </span><br><span class="line">    bar1.add_xaxis(x_data)</span><br><span class="line">    bar1.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;Average Happiness Score by Regional Indicator&#x27;</span>))</span><br><span class="line">    bar1.set_series_opts(label_opts=opts.LabelOpts(is_show=<span class="literal">True</span>, position=<span class="string">&#x27;right&#x27;</span>),</span><br><span class="line">            markline_opts=opts.MarkLineOpts(</span><br><span class="line">            data=[opts.MarkLineItem(type_=<span class="string">&quot;average&quot;</span>, name=<span class="string">&quot;平均值&quot;</span>)])) </span><br><span class="line">    bar1.set_colors(<span class="string">&#x27;CadetBlue&#x27;</span>)</span><br><span class="line">    bar1.reversal_axis()</span><br><span class="line"></span><br><span class="line">    grid.add(bar1, grid_opts=opts.GridOpts(pos_left=<span class="string">&quot;20%&quot;</span>))</span><br><span class="line"></span><br><span class="line">    grid.render(<span class="string">&quot;各大地区的平均幸福指数.html&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://img.imgdb.cn/item/6000f3ec3ffa7d37b31156a6.jpg"
alt="得分" />
<figcaption aria-hidden="true">得分</figcaption>
</figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 各幸福区间的百分比</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">regions_country_pie</span>():</span><br><span class="line">    df2 = df_2020.iloc[:,:<span class="number">3</span>]</span><br><span class="line">    df2[<span class="string">&#x27;score_group&#x27;</span>] = pd.cut(x=df2[<span class="string">&#x27;Ladder score&#x27;</span>],bins=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]).astype(<span class="string">&#x27;str&#x27;</span>)</span><br><span class="line">    c = (</span><br><span class="line">        Pie()</span><br><span class="line">        .add(</span><br><span class="line">        <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        [<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>(df2.groupby(<span class="string">&#x27;score_group&#x27;</span>).score_group.count().index.tolist(),df2.groupby(<span class="string">&#x27;score_group&#x27;</span>).score_group.count().values.tolist())],</span><br><span class="line">            radius=[<span class="string">&quot;30%&quot;</span>, <span class="string">&quot;75%&quot;</span>],</span><br><span class="line">            rosetype=<span class="string">&quot;area&quot;</span>,</span><br><span class="line">        label_opts = opts.LabelOpts(position=<span class="string">&#x27;right&#x27;</span>),</span><br><span class="line">        )</span><br><span class="line">        .set_global_opts(</span><br><span class="line">        title_opts=opts.TitleOpts(title=<span class="string">&#x27;Number of Countries by Happiness Score Categories&#x27;</span>),</span><br><span class="line">        legend_opts=opts.LegendOpts(is_show=<span class="literal">False</span>),</span><br><span class="line">        )</span><br><span class="line">        .set_series_opts(label_opts=opts.LabelOpts(formatter=<span class="string">&quot;&#123;b&#125;:\n &#123;c&#125; (&#123;d&#125;%)&quot;</span>))</span><br><span class="line">    )</span><br><span class="line">    c.render(<span class="string">&quot;各幸福区间的百分比.html&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://img.imgdb.cn/item/6000f4073ffa7d37b3116694.jpg"
alt="比例" />
<figcaption aria-hidden="true">比例</figcaption>
</figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有国家在不同区域内的分部</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">every_regions_country_num</span>():</span><br><span class="line">    plt_cols = [<span class="string">&#x27;Regional indicator&#x27;</span>, <span class="string">&#x27;Ladder score&#x27;</span>, <span class="string">&#x27;Country name&#x27;</span>]</span><br><span class="line">    plt_da = df_2020[plt_cols]</span><br><span class="line">    plt.figure()</span><br><span class="line">    sns.countplot(x=<span class="string">&#x27;Regional indicator&#x27;</span>, data=plt_da)</span><br><span class="line">    plt.xticks(rotation=<span class="string">&#x27;vertical&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;Country name count of Regional indicator&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://img.imgdb.cn/item/6000f3c13ffa7d37b31136e3.jpg"
alt="分布" />
<figcaption aria-hidden="true">分布</figcaption>
</figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2020前10后10</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Top_and_Bottem_10_country_happiness</span>():</span><br><span class="line">    rank_top10 = df_2020.head(</span><br><span class="line">        <span class="number">10</span>)[[<span class="string">&#x27;Country name&#x27;</span>, <span class="string">&#x27;Ladder score&#x27;</span>]]</span><br><span class="line">    last_top10 = df_2020.tail(</span><br><span class="line">        <span class="number">10</span>)[[<span class="string">&#x27;Country name&#x27;</span>, <span class="string">&#x27;Ladder score&#x27;</span>]]</span><br><span class="line">    plt.figure()</span><br><span class="line">    ax = plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">    sns.barplot(x=<span class="string">&#x27;Country name&#x27;</span>, y=<span class="string">&#x27;Ladder score&#x27;</span>, data=rank_top10)</span><br><span class="line">    plt.xticks(rotation=<span class="string">&#x27;vertical&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;Top 10 Country name&#x27;</span>)</span><br><span class="line">    ax = plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, sharey=ax)</span><br><span class="line">    sns.barplot(x=<span class="string">&#x27;Country name&#x27;</span>, y=<span class="string">&#x27;Ladder score&#x27;</span>, data=last_top10)</span><br><span class="line">    plt.xticks(rotation=<span class="string">&#x27;vertical&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;Bottem 10 Country name&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://img.imgdb.cn/item/6000f41b3ffa7d37b3117070.jpg"
alt="10" />
<figcaption aria-hidden="true">10</figcaption>
</figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 幸福指数相关性热力图</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Heat_map</span>():</span><br><span class="line">    cor = df_2020.corr()</span><br><span class="line">    plt.figure(figsize=(<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line">    plt.title(<span class="string">&#x27;Correlation between numeric variables&#x27;</span>, fontsize=<span class="number">18</span>)</span><br><span class="line">    sns.heatmap(cor, square=<span class="literal">True</span>, cmap=<span class="string">&quot;vlag&quot;</span>, annot=<span class="literal">True</span>, linewidths=<span class="number">0.5</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://img.imgdb.cn/item/6000f4333ffa7d37b3117aae.jpg"
alt="热力图" />
<figcaption aria-hidden="true">热力图</figcaption>
</figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">XXX_Score</span>(<span class="params">x</span>):</span><br><span class="line">    plt.figure()</span><br><span class="line">    ax = plt.subplot(<span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    fm_2018 = sm.OLS(df_2018[<span class="string">&#x27;Score&#x27;</span>], sm.add_constant(</span><br><span class="line">        df_2018[x])).fit()</span><br><span class="line">    plt.scatter(df_2018[x], df_2018[<span class="string">&#x27;Score&#x27;</span>])</span><br><span class="line">    plt.plot(df_2018[x], fm_2018.fittedvalues)</span><br><span class="line">    plt.title(<span class="string">&#x27;2018-2020 &#x27;</span>+x+<span class="string">&#x27; and Ladder score&#x27;</span>, fontsize=<span class="number">18</span>)</span><br><span class="line">    ax = plt.subplot(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    fm_2019 = sm.OLS(df_2019[<span class="string">&#x27;Score&#x27;</span>], sm.add_constant(</span><br><span class="line">        df_2019[x])).fit()</span><br><span class="line">    plt.scatter(df_2019[x], df_2019[<span class="string">&#x27;Score&#x27;</span>])</span><br><span class="line">    plt.plot(df_2019[x], fm_2019.fittedvalues)</span><br><span class="line">    ax = plt.subplot(<span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">    fm = sm.OLS(df_2020[<span class="string">&#x27;Ladder score&#x27;</span>], sm.add_constant(</span><br><span class="line">        df_2020[x])).fit()</span><br><span class="line">    plt.scatter(df_2020[x], df_2020[<span class="string">&#x27;Ladder score&#x27;</span>])</span><br><span class="line">    plt.plot(df_2020[x], fm.fittedvalues)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># GDP和幸福得分</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GDP_Score</span>():</span><br><span class="line">    plt.figure()</span><br><span class="line">    ax = plt.subplot(<span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    fm_2018 = sm.OLS(df_2018[<span class="string">&#x27;Score&#x27;</span>], sm.add_constant(</span><br><span class="line">        df_2018[<span class="string">&#x27;GDP per capita&#x27;</span>])).fit()</span><br><span class="line">    plt.scatter(df_2018[<span class="string">&#x27;GDP per capita&#x27;</span>], df_2018[<span class="string">&#x27;Score&#x27;</span>])</span><br><span class="line">    plt.plot(df_2018[<span class="string">&#x27;GDP per capita&#x27;</span>], fm_2018.fittedvalues)</span><br><span class="line">    plt.title(<span class="string">&#x27;2018-2020 GDP per capita and Ladder score&#x27;</span>, fontsize=<span class="number">18</span>)</span><br><span class="line">    ax = plt.subplot(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    fm_2019 = sm.OLS(df_2019[<span class="string">&#x27;Score&#x27;</span>], sm.add_constant(</span><br><span class="line">        df_2019[<span class="string">&#x27;GDP per capita&#x27;</span>])).fit()</span><br><span class="line">    plt.scatter(df_2019[<span class="string">&#x27;GDP per capita&#x27;</span>], df_2019[<span class="string">&#x27;Score&#x27;</span>])</span><br><span class="line">    plt.plot(df_2019[<span class="string">&#x27;GDP per capita&#x27;</span>], fm_2019.fittedvalues)</span><br><span class="line">    ax = plt.subplot(<span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">    fm_2020 = sm.OLS(df_2020[<span class="string">&#x27;Ladder score&#x27;</span>], sm.add_constant(</span><br><span class="line">        df_2020[<span class="string">&#x27;Logged GDP per capita&#x27;</span>])).fit()</span><br><span class="line">    plt.scatter(df_2020[<span class="string">&#x27;Logged GDP per capita&#x27;</span>], df_2020[<span class="string">&#x27;Ladder score&#x27;</span>])</span><br><span class="line">    plt.plot(df_2020[<span class="string">&#x27;Logged GDP per capita&#x27;</span>], fm_2020.fittedvalues)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Healthy和幸福得分</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Healthy_Score</span>():</span><br><span class="line">    XXX_Score(<span class="string">&#x27;Healthy life expectancy&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Socialsupport和幸福得分</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Socialsupport_Score</span>():</span><br><span class="line">    XXX_Score(<span class="string">&#x27;Social support&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Freedom和幸福得分</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Freedom_Score</span>():</span><br><span class="line">    XXX_Score(<span class="string">&#x27;Freedom to make life choices&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generosity和幸福得分</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Generosity_Score</span>():</span><br><span class="line">    XXX_Score(<span class="string">&#x27;Generosity&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Corruption和幸福得分(出错，2018年数据有nan)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Corruption_Score</span>():</span><br><span class="line">    XXX_Score(<span class="string">&#x27;Perceptions of corruption&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://img.imgdb.cn/item/6000f4cf3ffa7d37b311c150.jpg"
alt="拟合1" />
<figcaption aria-hidden="true">拟合1</figcaption>
</figure>
<figure>
<img data-src="https://img.imgdb.cn/item/6000fafe3ffa7d37b31530ea.jpg"
alt="拟合2" />
<figcaption aria-hidden="true">拟合2</figcaption>
</figure>
<figure>
<img data-src="https://img.imgdb.cn/item/6000fb203ffa7d37b3153d4a.jpg"
alt="拟合3" />
<figcaption aria-hidden="true">拟合3</figcaption>
</figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 幸福报告中的中国近三年对比</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">All_China</span>():</span><br><span class="line">    l0=[<span class="string">&#x27;2018&#x27;</span>,<span class="string">&#x27;2019&#x27;</span>,<span class="string">&#x27;2020&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    df_2018_china=df_2018.loc[df_2018[<span class="string">&#x27;Country or region&#x27;</span>] == <span class="string">&#x27;China&#x27;</span>]</span><br><span class="line">    df_2019_china=df_2019.loc[df_2019[<span class="string">&#x27;Country or region&#x27;</span>] == <span class="string">&#x27;China&#x27;</span>]</span><br><span class="line">    df_2020_china=df_2020.loc[df_2020[<span class="string">&#x27;Country name&#x27;</span>] == <span class="string">&#x27;China&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    la1=[df_2018[<span class="string">&#x27;Score&#x27;</span>].mean(),df_2019[<span class="string">&#x27;Score&#x27;</span>].mean(),df_2020[<span class="string">&#x27;Ladder score&#x27;</span>].mean()]</span><br><span class="line">    lc1=df_2018_china[<span class="string">&#x27;Score&#x27;</span>].tolist()+df_2019_china[<span class="string">&#x27;Score&#x27;</span>].tolist()+df_2020_china[<span class="string">&#x27;Ladder score&#x27;</span>].tolist()</span><br><span class="line"></span><br><span class="line">    la2=[df_2018[<span class="string">&#x27;GDP per capita&#x27;</span>].mean(),df_2019[<span class="string">&#x27;GDP per capita&#x27;</span>].mean(),df_2020[<span class="string">&#x27;Logged GDP per capita&#x27;</span>].mean()]</span><br><span class="line">    lc2=df_2018_china[<span class="string">&#x27;GDP per capita&#x27;</span>].tolist()+df_2019_china[<span class="string">&#x27;GDP per capita&#x27;</span>].tolist()+df_2020_china[<span class="string">&#x27;Logged GDP per capita&#x27;</span>].tolist()</span><br><span class="line"></span><br><span class="line">    la3=[df_2018[<span class="string">&#x27;Social support&#x27;</span>].mean(),df_2019[<span class="string">&#x27;Social support&#x27;</span>].mean(),df_2020[<span class="string">&#x27;Social support&#x27;</span>].mean()]</span><br><span class="line">    lc3=df_2018_china[<span class="string">&#x27;Social support&#x27;</span>].tolist()+df_2019_china[<span class="string">&#x27;Social support&#x27;</span>].tolist()+df_2020_china[<span class="string">&#x27;Social support&#x27;</span>].tolist()</span><br><span class="line"></span><br><span class="line">    la4=[df_2018[<span class="string">&#x27;Healthy life expectancy&#x27;</span>].mean(),df_2019[<span class="string">&#x27;Healthy life expectancy&#x27;</span>].mean(),df_2020[<span class="string">&#x27;Healthy life expectancy&#x27;</span>].mean()]</span><br><span class="line">    lc4=df_2018_china[<span class="string">&#x27;Healthy life expectancy&#x27;</span>].tolist()+df_2019_china[<span class="string">&#x27;Healthy life expectancy&#x27;</span>].tolist()+df_2020_china[<span class="string">&#x27;Healthy life expectancy&#x27;</span>].tolist()</span><br><span class="line"></span><br><span class="line">    la5=[df_2018[<span class="string">&#x27;Freedom to make life choices&#x27;</span>].mean(),df_2019[<span class="string">&#x27;Freedom to make life choices&#x27;</span>].mean(),df_2020[<span class="string">&#x27;Freedom to make life choices&#x27;</span>].mean()]</span><br><span class="line">    lc5=df_2018_china[<span class="string">&#x27;Freedom to make life choices&#x27;</span>].tolist()+df_2019_china[<span class="string">&#x27;Freedom to make life choices&#x27;</span>].tolist()+df_2020_china[<span class="string">&#x27;Freedom to make life choices&#x27;</span>].tolist()</span><br><span class="line"></span><br><span class="line">    la6=[df_2018[<span class="string">&#x27;Generosity&#x27;</span>].mean(),df_2019[<span class="string">&#x27;Generosity&#x27;</span>].mean(),df_2020[<span class="string">&#x27;Generosity&#x27;</span>].mean()]</span><br><span class="line">    lc6=df_2018_china[<span class="string">&#x27;Generosity&#x27;</span>].tolist()+df_2019_china[<span class="string">&#x27;Generosity&#x27;</span>].tolist()+df_2020_china[<span class="string">&#x27;Generosity&#x27;</span>].tolist()</span><br><span class="line"></span><br><span class="line">    la7=[df_2018[<span class="string">&#x27;Perceptions of corruption&#x27;</span>].mean(),df_2019[<span class="string">&#x27;Perceptions of corruption&#x27;</span>].mean(),df_2020[<span class="string">&#x27;Perceptions of corruption&#x27;</span>].mean()]</span><br><span class="line">    lc7=df_2018_china[<span class="string">&#x27;Perceptions of corruption&#x27;</span>].tolist()+df_2019_china[<span class="string">&#x27;Perceptions of corruption&#x27;</span>].tolist()+df_2020_china[<span class="string">&#x27;Perceptions of corruption&#x27;</span>].tolist()</span><br><span class="line"></span><br><span class="line">    bar=(</span><br><span class="line">        Bar()</span><br><span class="line">        .add_xaxis(l0)</span><br><span class="line">        .add_yaxis(<span class="string">&quot;中国幸福指数&quot;</span>,lc1)</span><br><span class="line">        .add_yaxis(<span class="string">&quot;中国GDP指数&quot;</span>,lc2)</span><br><span class="line">        .add_yaxis(<span class="string">&quot;中国Social指数&quot;</span>,lc3)</span><br><span class="line">        .add_yaxis(<span class="string">&quot;中国Healthy指数&quot;</span>,lc4)</span><br><span class="line">        .add_yaxis(<span class="string">&quot;中国Freedom指数&quot;</span>,lc5)</span><br><span class="line">        .add_yaxis(<span class="string">&quot;中国Generosity指数&quot;</span>,lc6)</span><br><span class="line">        <span class="comment"># .add_yaxis(&quot;中国Corruption指数&quot;,lc7)</span></span><br><span class="line">    )</span><br><span class="line">    line=(</span><br><span class="line">        Line()</span><br><span class="line">        .add_xaxis(l0)</span><br><span class="line">        .add_yaxis(<span class="string">&quot;世界幸福指数&quot;</span>,la1)</span><br><span class="line">        .add_yaxis(<span class="string">&quot;世界GDP指数&quot;</span>,la2)</span><br><span class="line">        .add_yaxis(<span class="string">&quot;世界Social指数&quot;</span>,la3)</span><br><span class="line">        .add_yaxis(<span class="string">&quot;世界Healthy指数&quot;</span>,la4)</span><br><span class="line">        .add_yaxis(<span class="string">&quot;世界Freedom指数&quot;</span>,la5)</span><br><span class="line">        .add_yaxis(<span class="string">&quot;世界Generosity指数&quot;</span>,la6)</span><br><span class="line">        <span class="comment"># .add_yaxis(&quot;世界Corruption指数&quot;,la7)</span></span><br><span class="line">    )</span><br><span class="line">    bar.overlap(line).render(<span class="string">&quot;2018-2020中国与世界平均水平对比.html&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;main&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(df_2020)</span></span><br><span class="line"><span class="comment"># data_info()</span></span><br><span class="line"><span class="comment"># HappinessMap()</span></span><br><span class="line"><span class="comment"># country_score_of_every_region()</span></span><br><span class="line"><span class="comment"># regions_country_pie()</span></span><br><span class="line"><span class="comment"># every_regions_country_num()</span></span><br><span class="line"><span class="comment"># Top_and_Bottem_10_country_happiness()</span></span><br><span class="line"><span class="comment"># Heat_map()</span></span><br><span class="line"><span class="comment"># GDP_Score()</span></span><br><span class="line"><span class="comment"># Healthy_Score()</span></span><br><span class="line"><span class="comment"># Socialsupport_Score()</span></span><br><span class="line"><span class="comment"># Freedom_Score()</span></span><br><span class="line"><span class="comment"># Generosity_Score()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 出错，2018数据有nan</span></span><br><span class="line"><span class="comment"># Corruption_Score()</span></span><br><span class="line"></span><br><span class="line">All_China()</span><br></pre></td></tr></table></figure>
<h1 id="总结">总结</h1>
<p>上面的其实大部分都是参考过来的，自己也添加了一些内容，上面主要是代码和可视化图片，结论分析并没有展现。期间还用VSCode使用了Jupyter
Notebook，参考来自<a
href="https://blog.csdn.net/qq_44486439/article/details/108043302">VSCode插件
优雅地使用Jupyter Notebook</a>。</p>
<p>python也只学了一学期，期间还因为课程安排在周六，被会计考试、竞赛、教师资格证、四六级、研究生考试等各种原因，实际上只上了几周，本来这门课就是普通的考查课，老师也没有要求那么严格，但是学习Python还是挺有趣的。好像有数据表明Python在年底时超越了java，成为使用最多的语言，的确在某些方面Python与其它语言是有着不少的优势，近几年人工智能、机器学习大火，与之脱不开关系。</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>redis做分布式锁的问题</title>
    <url>/article/f388e05f.html</url>
    <content><![CDATA[<h1 id="参考">参考</h1>
<p>谷粒商城p158：https://www.bilibili.com/video/BV1np4y1C7Yf?p=158</p>
<p>redis官网：http://www.redis.cn/commands/set.html</p>
<h1 id="提要">提要</h1>
<p>分布式场景下将原有的本地锁换为，基于redis的setnx命令的分布式锁</p>
<ul>
<li><code>getCatalogJsonFromDb</code>：从数据库查数据</li>
<li><code>getCatalogJsonFromDbWithLocalLock</code>：利用本地锁查数据</li>
<li><code>getCatalogJsonFromDbWithRedisLock</code>：利用redis的setnx命令的分布式锁查数据，现需要完成的</li>
</ul>
<span id="more"></span>
<h1 id="分布式锁演进-阶段一">分布式锁演进-阶段一</h1>
<h2 id="代码">代码</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;Catalog2Vo&gt;&gt; <span class="title function_">getCatalogJsonFromDbWithRedisLock</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1、占分布式锁，setnx</span></span><br><span class="line">	<span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>,<span class="string">&quot;111&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(lock)&#123;</span><br><span class="line">        <span class="comment">// 加锁成功。。。执行任务</span></span><br><span class="line">        Map&lt;String, List&lt;Catalog2Vo&gt;&gt; catalogJsonFromDb = getCatalogJsonFromDb();</span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> catalogJsonFromDb;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 加锁失败。。。重试</span></span><br><span class="line">        <span class="comment">// 休眠100ms重试</span></span><br><span class="line">        <span class="comment">// 自旋方式</span></span><br><span class="line">        <span class="keyword">return</span> getCatalogJsonFromDbWithRedisLock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="问题">问题</h2>
<ul>
<li><code>setnx</code>占好了位置，业务代码异常或程序宕机，没有执行删锁逻辑，死锁！！！</li>
</ul>
<h2 id="解决">解决</h2>
<ul>
<li>设置锁自动过期，即使没有删除，到期也会消失</li>
</ul>
<h1 id="分布式锁演进-阶段二">分布式锁演进-阶段二</h1>
<h2 id="代码-1">代码</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;Catalog2Vo&gt;&gt; <span class="title function_">getCatalogJsonFromDbWithRedisLock</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1、占分布式锁，setnx</span></span><br><span class="line">	<span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>,<span class="string">&quot;111&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(lock)&#123;</span><br><span class="line">        <span class="comment">// 加锁成功。。。执行任务</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2、设置过期时间</span></span><br><span class="line">        redisTemplate.expire(<span class="string">&quot;lock&quot;</span>, <span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line">        </span><br><span class="line">        Map&lt;String, List&lt;Catalog2Vo&gt;&gt; catalogJsonFromDb = getCatalogJsonFromDb();</span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> catalogJsonFromDb;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 加锁失败。。。重试</span></span><br><span class="line">        <span class="comment">// 休眠100ms重试</span></span><br><span class="line">        <span class="comment">// 自旋方式</span></span><br><span class="line">        <span class="keyword">return</span> getCatalogJsonFromDbWithRedisLock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="问题-1">问题</h2>
<ul>
<li>加锁与设置过期时间非原子操作，所以仍会出现死锁问题</li>
</ul>
<h2 id="解决-1">解决</h2>
<ul>
<li>利用<code>redis</code>提供的<code>setexnx</code>，做原子操作</li>
</ul>
<h1 id="分布式锁演进-阶段三">分布式锁演进-阶段三</h1>
<h2 id="代码-2">代码</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;Catalog2Vo&gt;&gt; <span class="title function_">getCatalogJsonFromDbWithRedisLock</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1、占分布式锁，setnx</span></span><br><span class="line">    <span class="comment">// 同时设置时间</span></span><br><span class="line">	<span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>, uuid, <span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="keyword">if</span>(lock)&#123;</span><br><span class="line">        <span class="comment">// 加锁成功。。。执行任务</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2、设置过期时间</span></span><br><span class="line">        <span class="comment">// redisTemplate.expire(&quot;lock&quot;, 30, TimeUnit.SECONDS);</span></span><br><span class="line">        </span><br><span class="line">        Map&lt;String, List&lt;Catalog2Vo&gt;&gt; catalogJsonFromDb = getCatalogJsonFromDb();</span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> catalogJsonFromDb;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 加锁失败。。。重试</span></span><br><span class="line">        <span class="comment">// 休眠100ms重试</span></span><br><span class="line">        <span class="comment">// 自旋方式</span></span><br><span class="line">        <span class="keyword">return</span> getCatalogJsonFromDbWithRedisLock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="问题-2">问题</h2>
<ul>
<li>如果业务时间过长，我们的锁过期自动删除，这时直接删锁，有可能把别人正在持有的锁删除了</li>
</ul>
<h2 id="解决-2">解决</h2>
<ul>
<li>占锁时指定<code>uuid</code>保证唯一性，删锁需要验证是否是自己的锁</li>
</ul>
<h1 id="分布式锁演进-阶段四">分布式锁演进-阶段四</h1>
<h2 id="代码-3">代码</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;Catalog2Vo&gt;&gt; <span class="title function_">getCatalogJsonFromDbWithRedisLock</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1、占分布式锁，setnx</span></span><br><span class="line">    <span class="comment">// 同时设置时间</span></span><br><span class="line">	<span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>, uuid, <span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="keyword">if</span>(lock)&#123;</span><br><span class="line">        <span class="comment">// 加锁成功。。。执行任务</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2、设置过期时间</span></span><br><span class="line">        <span class="comment">// redisTemplate.expire(&quot;lock&quot;, 30, TimeUnit.SECONDS);</span></span><br><span class="line">        </span><br><span class="line">        Map&lt;String, List&lt;Catalog2Vo&gt;&gt; catalogJsonFromDb = getCatalogJsonFromDb();</span><br><span class="line">        <span class="comment">// redisTemplate.delete(&quot;lock&quot;);</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">lockValue</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">        <span class="comment">// 验证是否是自己的锁</span></span><br><span class="line">        <span class="keyword">if</span>(uuid.equals(lockValue))&#123;</span><br><span class="line">            <span class="comment">// 是，删锁</span></span><br><span class="line">            redisTemplate.delete(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> catalogJsonFromDb;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 加锁失败。。。重试</span></span><br><span class="line">        <span class="comment">// 休眠100ms重试</span></span><br><span class="line">        <span class="comment">// 自旋方式</span></span><br><span class="line">        <span class="keyword">return</span> getCatalogJsonFromDbWithRedisLock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="问题-3">问题</h2>
<ul>
<li>注意在<code>redis</code>，<code>get</code>锁的值时，即<code>String lockValue = redisTemplate.opsForValue().get("lock");</code>，这时可能<code>redis</code>还存在我们的锁，这时返回的正是我们<code>uuid</code>，但是因为网络传输的延时，我们要执行<code>delete</code>操作时，我们的锁已经因为过期策略删除了，所以虽然这是的锁不是我们的，但程序代码仍然会执行删除锁（并非我们的），本质仍是非原子操作问题</li>
</ul>
<h2 id="解决-3">解决</h2>
<ul>
<li><code>lua</code>脚本，实现原子操作</li>
</ul>
<h1 id="分布式锁演进-阶段五">分布式锁演进-阶段五</h1>
<h2 id="代码-4">代码</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;Catalog2Vo&gt;&gt; <span class="title function_">getCatalogJsonFromDbWithRedisLock</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、占分布式锁，setnx</span></span><br><span class="line">    <span class="comment">// 同时设置时间</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>, uuid, <span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line">    Map&lt;String, List&lt;Catalog2Vo&gt;&gt; catalogJsonFromDb = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (lock) &#123;</span><br><span class="line">        <span class="comment">// 加锁成功</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2、设置过期时间</span></span><br><span class="line">        <span class="comment">// redisTemplate.expire(&quot;lock&quot;, 30, TimeUnit.SECONDS);</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            catalogJsonFromDb = getCatalogJsonFromDb();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 获取值对比+对比成功删除=原子操作</span></span><br><span class="line">            <span class="comment">// String lockValue = redisTemplate.opsForValue().get(&quot;lock&quot;);</span></span><br><span class="line">            <span class="comment">// if (uuid.equals(lockValue)) &#123;</span></span><br><span class="line">            <span class="comment">//     redisTemplate.delete(&quot;lock&quot;);</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 脚本解锁</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;get&#x27;,KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;,KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">unlock</span> <span class="operator">=</span> redisTemplate.execute(<span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;Long&gt;(script, Long.class), Arrays.asList(<span class="string">&quot;lock&quot;</span>), uuid);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> catalogJsonFromDb;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 加锁失败。。。重试</span></span><br><span class="line">        <span class="comment">// 休眠100ms重试</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getCatalogJsonFromDbWithRedisLock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结">总结</h1>
<p>使用<code>redis</code>做分布式锁</p>
<ul>
<li>加锁和设置过期时间的原子性问题</li>
<li>解锁与验证锁的归属的原子性问题</li>
<li>还有业务时间与过期时间的设置，有时需要延长过期时间</li>
</ul>
<p>可以考虑使用<code>Redisson</code></p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>ruoyi-vue学习01</title>
    <url>/article/59eb73a4.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p>毕设用的<code>ruoyi</code>，可以算是一边学习，一边做毕设，学到不少，这里分享一下</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.3mb1dnhij2y0.webp"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<span id="more"></span>
<h1 id="内容">内容</h1>
<p>上面展示了<code>ruoyi</code>项目之间的关系</p>
<p>首先就来说一下，<code>ruoyi</code>是怎么做分页的吧</p>
<p>首先<code>ruoyi</code>使用的是<code>PageHelper</code>很清楚了</p>
<p>首先点开一个<code>SysUserController extends BaseController</code>，看到如下获取用户列表，从前端看确实是分页实现的</p>
<p>但是我们确在请求的<code>SysUser</code>找不到分页相关的参数信息，奇怪？怎么做的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取用户列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;@ss.hasPermi(&#x27;system:user:list&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> TableDataInfo <span class="title function_">list</span><span class="params">(SysUser user)</span> &#123;</span><br><span class="line">    startPage();</span><br><span class="line">    List&lt;SysUser&gt; list = userService.selectUserList(user);</span><br><span class="line">    <span class="keyword">return</span> getDataTable(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么就研究一下吧</p>
<p>首先这个<code>@PreAuthorize("@ss.hasPermi('system:user:list')")</code>是<code>ruoyi</code>的一套权限控制，暂且不谈</p>
<p>那么就看这个<code>startPage();</code>，这是父类<code>BaseController</code>的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置请求分页数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">startPage</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">PageDomain</span> <span class="variable">pageDomain</span> <span class="operator">=</span> TableSupport.buildPageRequest();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">pageNum</span> <span class="operator">=</span> pageDomain.getPageNum();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">pageSize</span> <span class="operator">=</span> pageDomain.getPageSize();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotNull(pageNum) &amp;&amp; StringUtils.isNotNull(pageSize)) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">orderBy</span> <span class="operator">=</span> SqlUtil.escapeOrderBySql(pageDomain.getOrderBy());</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">reasonable</span> <span class="operator">=</span> pageDomain.getReasonable();</span><br><span class="line">        PageHelper.startPage(pageNum, pageSize, orderBy).setReasonable(reasonable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关注第一行<code>PageDomain pageDomain = TableSupport.buildPageRequest();</code></p>
<p>这里就是分页参数的来源，直接点进<code>TableSupport.buildPageRequest();</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装分页对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> PageDomain <span class="title function_">getPageDomain</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">PageDomain</span> <span class="variable">pageDomain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageDomain</span>();</span><br><span class="line">    pageDomain.setPageNum(ServletUtils.getParameterToInt(PAGE_NUM));</span><br><span class="line">    pageDomain.setPageSize(ServletUtils.getParameterToInt(PAGE_SIZE));</span><br><span class="line">    pageDomain.setOrderByColumn(ServletUtils.getParameter(ORDER_BY_COLUMN));</span><br><span class="line">    pageDomain.setIsAsc(ServletUtils.getParameter(IS_ASC));</span><br><span class="line">    pageDomain.setReasonable(ServletUtils.getParameterToBool(REASONABLE));</span><br><span class="line">    <span class="keyword">return</span> pageDomain;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> PageDomain <span class="title function_">buildPageRequest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getPageDomain();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到分页参数都来源于<code>ServletUtils</code>这个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取Integer参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">getParameterToInt</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Convert.toInt(getRequest().getParameter(name));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取request</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HttpServletRequest <span class="title function_">getRequest</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> getRequestAttributes().getRequest();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是<code>ruoyi</code>的一个工具类，就举获取<code>request</code>请求中<code>int</code>类型的方法</p>
<p><code>getRequest()</code>获取请求的<code>request</code>，然后获取对应的相关分页参数，这样就完成了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 查询参数</span><br><span class="line">queryParams: &#123;</span><br><span class="line">  pageNum: 1,</span><br><span class="line">  pageSize: 10,</span><br><span class="line">  userName: undefined,</span><br><span class="line">  phonenumber: undefined,</span><br><span class="line">  status: undefined,</span><br><span class="line">  deptId: undefined</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>找到前端发送请求所带的参数，就一清二楚了，当然这个名称一定要完全一致才行</p>
<p>回到<code>startPage();</code>，就在这开启的<code>PageHelper</code>分页</p>
<p>看这个<code>TableDataInfo</code>的返回对象，这个是真正的响应对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TableDataInfo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总记录数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> total;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;?&gt; rows;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它的设置是在<code>BaseController</code>的<code>getDataTable</code>方法中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 响应请求分页数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;, &quot;unchecked&quot;&#125;)</span></span><br><span class="line"><span class="keyword">protected</span> TableDataInfo <span class="title function_">getDataTable</span><span class="params">(List&lt;?&gt; list)</span> &#123;</span><br><span class="line">    <span class="type">TableDataInfo</span> <span class="variable">rspData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableDataInfo</span>();</span><br><span class="line">    rspData.setCode(HttpStatus.SUCCESS);</span><br><span class="line">    rspData.setMsg(<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">    rspData.setRows(list);</span><br><span class="line">    rspData.setTotal(<span class="keyword">new</span> <span class="title class_">PageInfo</span>(list).getTotal());</span><br><span class="line">    <span class="keyword">return</span> rspData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里主要关注<code>total</code>即可，但关于这个还要另讲，其中牵扯到一个我遇到的问题</p>
<h1 id="总结">总结</h1>
<p>这是第一篇，只讲了关于分页请求的相关实现，之后继续分享</p>
]]></content>
      <tags>
        <tag>ruoyi</tag>
      </tags>
  </entry>
  <entry>
    <title>ruoyi学习AOP</title>
    <url>/article/5a136e9d.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p>从若依项目学习<code>AOP</code>。</p>
<p>首先，<code>ruoyi</code>对于一个项目的规划已经做得非常好了，我所说的项目规划是指<code>ruoyi-vue</code>中<code>pom</code>项目的规划，包括父项目、子项目、包管理、类管理等等。<code>ruoyi</code>项目的规范是让人很舒服，每个模块的职责就很明晰，是非常值得学习的。<code>ruoyi</code>中有很多封装，不管是工具类的，还是配置类的，挺多的。对于项目经验不足的初学者还是很有帮助的。</p>
<p>下面我简单从<code>ruoyi</code>项目出发学习一下<code>ruoyi</code>是如何做<code>AOP</code>的。</p>
<span id="more"></span>
<h1 id="aop概念">AOP概念</h1>
<p><code>AOP</code>的概念对于有一定项目基础的一定不陌生。</p>
<p>“面向切面编程嘛”🤓🤓🤓</p>
<p>面向对象将程序抽象，分为不同模块，各司其职，能有力促进工程开发分工协作，但是不同模块有时会有公共行为，这种行为不适合用继承来实现，维护也比较复杂。切面（<code>AOP</code>）的引入就是为了解决这个问题的，要达到目的就是，在不改变源码的情况下，为不同组件添加公用功能。</p>
<h1 id="ruoyi做法">ruoyi做法</h1>
<p>其实<code>ruoyi</code>有很多地方都用到了<code>AOP</code>，包括数据源确认、数据范围确认、权限认证、限流、防重复提交、<code>Excel</code>表格处理等等，很多的。</p>
<p>它们的原理做法几乎一样，这次就<code>log</code>（日志）学习一下。</p>
<h1 id="切面入口">切面入口</h1>
<p>可以在<code>ruoyi-admin</code>项目中<code>com.ruoyi.web.controller.system.SysDeptController</code>看到<code>@Log</code></p>
<p>很明显<code>ruoyi</code>是通过自定义注解的方式实现<code>AOP</code>的，当然还有另一种方式：正则。比较注解和正则来说，注解的方式更加方便一些，哪里需要就在哪里添加就好；正则的话，首先对于规范的正则要熟悉，然后包结构要明晰，随意修改很可能出现问题。</p>
<p>这里就不做过多讨论了，来看<code>ruoyi</code>的实现吧。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/system/dept&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysDeptController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span> &#123;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 新增部门</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@PreAuthorize(&quot;@ss.hasPermi(&#x27;system:dept:add&#x27;)&quot;)</span></span><br><span class="line">  <span class="meta">@Log(title = &quot;部门管理&quot;, businessType = BusinessType.INSERT)</span></span><br><span class="line">  <span class="meta">@PostMapping</span></span><br><span class="line">  <span class="keyword">public</span> AjaxResult <span class="title function_">add</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> SysDept dept)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (UserConstants.NOT_UNIQUE.equals(deptService.checkDeptNameUnique(dept))) &#123;</span><br><span class="line">          <span class="keyword">return</span> AjaxResult.error(<span class="string">&quot;新增部门&#x27;&quot;</span> + dept.getDeptName() + <span class="string">&quot;&#x27;失败，部门名称已存在&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      dept.setCreateBy(getUsername());</span><br><span class="line">      <span class="keyword">return</span> toAjax(deptService.insertDept(dept));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="切面注解">切面注解</h1>
<p>这个<code>@Log</code>就是日志切面的标记</p>
<blockquote>
<p><span class="citation" data-cites="Log">@Log</span>(title =
"部门管理", businessType = BusinessType.INSERT)</p>
</blockquote>
<p>点进去，到达<code>ruoyi-common</code>中<code>com.ruoyi.common.annotation.Log</code>，这里定义了<code>Log</code>注解，注释也写得非常明白。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.PARAMETER, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">title</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> BusinessType <span class="title function_">businessType</span><span class="params">()</span> <span class="keyword">default</span> BusinessType.OTHER;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作人类别</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> OperatorType <span class="title function_">operatorType</span><span class="params">()</span> <span class="keyword">default</span> OperatorType.MANAGE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否保存请求的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSaveRequestData</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>日志的基本信息都有了，对于后期发现定位问题很有帮助。</p>
<p>其中，功能和操作人类别都是<code>com.ruoyi.common.enums</code>下定义的枚举。</p>
<h1 id="切面advices">切面Advices</h1>
<p>如果使用的是<code>Ultimate</code>版的<code>IDEA</code>，就可以在前面“新增部门”的add方法上进行智能跳转，直接跳到对应的切面处理方法</p>
<p><img data-src="https://pic.imgdb.cn/item/62f10bfb16f2c2beb1cf3531.jpg" /></p>
<p><code>ruoyi-framework</code>项目的<code>com.ruoyi.framework.aspectj.LogAspect</code>就是日志切面的具体处理类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作日志记录处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ruoyi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(LogAspect.class);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置织入点</span></span><br><span class="line">  <span class="meta">@Pointcut(&quot;@annotation(com.ruoyi.common.annotation.Log)&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logPointCut</span><span class="params">()</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 处理完请求后执行</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> joinPoint 切点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="meta">@AfterReturning(pointcut = &quot;logPointCut()&quot;, returning = &quot;jsonResult&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterReturning</span><span class="params">(JoinPoint joinPoint, Object jsonResult)</span> &#123;</span><br><span class="line">      handleLog(joinPoint, <span class="literal">null</span>, jsonResult);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@Pointcut</code>配置织入点，这里使用的是自定义注解，所以是<code>("@annotation(com.ruoyi.common.annotation.Log)")</code>，是<code>Log</code>注解的完整类路径。</p>
<p>对于切面如何处理，AOP本身有很多种实现，包括前置、中置、后置、环绕等之类的，可以根据不同的业务做不同的处理，这里是做日志记录，所以是后置处理。除了正常的处理外，这里还包括拦截异常的操作。可以看到都是通过<code>handleLog</code>方法来做的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handleLog</span><span class="params">(<span class="keyword">final</span> JoinPoint joinPoint, <span class="keyword">final</span> Exception e, Object jsonResult)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获得注解</span></span><br><span class="line">        <span class="type">Log</span> <span class="variable">controllerLog</span> <span class="operator">=</span> getAnnotationLog(joinPoint);</span><br><span class="line">        <span class="keyword">if</span> (controllerLog == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前的用户</span></span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> SecurityUtils.getLoginUser();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// *========数据库日志=========*//</span></span><br><span class="line">        <span class="type">SysOperLog</span> <span class="variable">operLog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SysOperLog</span>();</span><br><span class="line">        operLog.setStatus(BusinessStatus.SUCCESS.ordinal());</span><br><span class="line">        <span class="comment">// 请求的地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> IpUtils.getIpAddr(ServletUtils.getRequest());</span><br><span class="line">        operLog.setOperIp(ip);</span><br><span class="line">        <span class="comment">// 返回参数</span></span><br><span class="line">        operLog.setJsonResult(JSON.toJSONString(jsonResult));</span><br><span class="line"></span><br><span class="line">        operLog.setOperUrl(ServletUtils.getRequest().getRequestURI());</span><br><span class="line">        <span class="keyword">if</span> (loginUser != <span class="literal">null</span>) &#123;</span><br><span class="line">            operLog.setOperName(loginUser.getUsername());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">            operLog.setStatus(BusinessStatus.FAIL.ordinal());</span><br><span class="line">            operLog.setErrorMsg(StringUtils.substring(e.getMessage(), <span class="number">0</span>, <span class="number">2000</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置方法名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> joinPoint.getTarget().getClass().getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        operLog.setMethod(className + <span class="string">&quot;.&quot;</span> + methodName + <span class="string">&quot;()&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置请求方式</span></span><br><span class="line">        operLog.setRequestMethod(ServletUtils.getRequest().getMethod());</span><br><span class="line">        <span class="comment">// 处理设置注解上的参数</span></span><br><span class="line">        getControllerMethodDescription(joinPoint, controllerLog, operLog);</span><br><span class="line">        <span class="comment">// 保存数据库</span></span><br><span class="line">        AsyncManager.me().execute(AsyncFactory.recordOper(operLog));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception exp) &#123;</span><br><span class="line">        <span class="comment">// 记录本地异常日志</span></span><br><span class="line">        log.error(<span class="string">&quot;==前置通知异常==&quot;</span>);</span><br><span class="line">        log.error(<span class="string">&quot;异常信息:&#123;&#125;&quot;</span>, exp.getMessage());</span><br><span class="line">        exp.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面每一步都有注释，非常清晰，很容易看明白。</p>
<ol type="1">
<li><p>获取注解，这一步我是有点疑问的，既然通过<code>AOP</code>进入该方法，还需要验证是否有这个注解吗？有必要吗，是我太浅薄了吗？有懂的大佬可以跟我说明一下😂</p></li>
<li><p>获取当前用户，通过封装的<code>Spring Security</code>工具类获取到。</p></li>
<li><p>完善日志数据，包括请求地址、用户名、返回参数、<code>URL</code>、状态、错误信息、类名、方法名、参数信息、注解业务数据等。</p></li>
<li><p>异步插入数据库。</p></li>
</ol>
<p>需要知道<code>getControllerMethodDescription</code>、<code>setRequestValue</code>、<code>getAnnotationLog</code>、<code>argsArrayToString</code>、<code>isFilterObject</code>这些方法没有细说，也没有太大必要，这些都是辅助功能的。</p>
<p>另外一提，我这个版本的<code>ruoyi</code>代码也是有点小问题的，比如这里有一个<code>String</code>拼接可以用<code>StringBuilder</code>优化的问题，可能还有。我希望所有人在在看他人代码学习时，都应该带着思考，带着质疑去看，能发现并提出问题就很好。</p>
<p>最后，这里异步插入数据库很值得关注，这种日志数据落库做成异步对于业务来说是很有必要的，它本身并不属于业务，如果做成同步会影响业务<code>RT</code>，没有什么好处，异步的话不仅能充分利用<code>CPU</code>，而且还不影响业务，是很棒的🥰</p>
<h1 id="结">结</h1>
<p><code>ruoyi</code>设计的<code>AOP</code>风格大差不差，其他的也可以比较着学习，能够学到精髓，并有一定实践就更好了。</p>
]]></content>
      <tags>
        <tag>ruoyi</tag>
      </tags>
  </entry>
  <entry>
    <title>ruoyi分页问题</title>
    <url>/article/488e4344.html</url>
    <content><![CDATA[<h1 id="气死了">气死了</h1>
<p>气得我直接刚刚解决这个问题，就马上来写这篇文章了</p>
<p>这样也好，我能把整个过程完整记录下来</p>
<p>那开始吧</p>
<span id="more"></span>
<h1 id="过程">过程</h1>
<p>最近在做毕设嘛，用的是<a
href="https://gitee.com/y_project/RuoYi-Vue">RuoYi-Vue</a>，用起来真的非常方便，极大的提高了开发效率。做起毕设或其他小项目真的非常容易，尤其加上它的代码生成工具，非常方便。而且我不光是在用，同时其实也是在学习，从中还是能学到很多东西的。</p>
<p>还有一个感触就是对于长期被业务折腾到半死，对代码失去信心的程序员，他们看到这样的开源项目，我相信他们肯定是开心，因为这种开源项目代码风格上很统一、规范标准执行的很到位，看起来真的赏心悦目。</p>
<h2 id="问题简述">问题简述</h2>
<p>好了，回到正题！</p>
<p>今天做毕设，造数据测试的时候，发现分页功能失效了，前端调用后端分页接口返回的<code>total</code>有问题</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>total<span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span>…<span class="punctuation">&#125;</span></span><br><span class="line">	code<span class="punctuation">:</span> <span class="number">200</span></span><br><span class="line">	msg<span class="punctuation">:</span> <span class="string">&quot;查询成功&quot;</span></span><br><span class="line">	rows<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span>searchValue<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> createBy<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> createTime<span class="punctuation">:</span> <span class="string">&quot;2022-03-18 20:36:55&quot;</span><span class="punctuation">,</span> updateBy<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span>…<span class="punctuation">&#125;</span><span class="punctuation">,</span>…<span class="punctuation">]</span></span><br><span class="line">	total<span class="punctuation">:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>
<p><code>total</code>总是返回当前数据的<code>size</code></p>
<p>我很是不解，自认为对于<code>ruoyi</code>分页流程很是熟悉，对照官网找问题，愣是找了半天没发现问题</p>
<p>官网：<a
href="http://doc.ruoyi.vip/ruoyi-vue/document/htsc.html#分页实现">后台手册
| RuoYi</a></p>
<p>检查了半天没发现什么问题，只好先去找找有没有遇到同样问题的，果然，有不少</p>
<ul>
<li>https://cloud.tencent.com/developer/article/1786290</li>
<li>https://zhuanlan.zhihu.com/p/159199627</li>
<li>https://blog.csdn.net/qq_40942359/article/details/121429234</li>
<li>https://www.cnblogs.com/mantishell/p/13674818.html</li>
<li>https://blog.csdn.net/BADAO_LIUMANG_QIZHI/article/details/108017635</li>
</ul>
<p>看完后，大致明白是怎么回事，这其实是<code>PageHelper</code>的问题</p>
<h2 id="梳理流程">梳理流程</h2>
<p>按照<code>ruoyi</code>的流程理一遍</p>
<p>1、后端分页接口<code>SysUserController extends BaseController</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取用户列表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;@ss.hasPermi(&#x27;system:user:list&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> TableDataInfo <span class="title function_">list</span><span class="params">(SysUser user)</span> &#123;</span><br><span class="line">    <span class="comment">// 开启分页，要紧接着分页（service/mapper），这里ruoyi进行了封装</span></span><br><span class="line">    startPage();</span><br><span class="line">    List&lt;SysUser&gt; list = userService.selectUserList(user);</span><br><span class="line">    <span class="keyword">return</span> getDataTable(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>点开<code>startPage();</code>，这是父类<code>BaseController</code>的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">startPage</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取request中关于分页的请求，具体有关于一个ServletUtils的类，可以自行了解</span></span><br><span class="line">    <span class="type">PageDomain</span> <span class="variable">pageDomain</span> <span class="operator">=</span> TableSupport.buildPageRequest();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">pageNum</span> <span class="operator">=</span> pageDomain.getPageNum();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">pageSize</span> <span class="operator">=</span> pageDomain.getPageSize();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotNull(pageNum) &amp;&amp; StringUtils.isNotNull(pageSize)) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">orderBy</span> <span class="operator">=</span> SqlUtil.escapeOrderBySql(pageDomain.getOrderBy());</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">reasonable</span> <span class="operator">=</span> pageDomain.getReasonable();</span><br><span class="line">        <span class="comment">// 真正的开始分页</span></span><br><span class="line">        PageHelper.startPage(pageNum, pageSize, orderBy).setReasonable(reasonable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、来到<code>SysUserServiceImpl</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据条件分页查询用户列表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user 用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 用户信息集合信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@DataScope(deptAlias = &quot;d&quot;, userAlias = &quot;u&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;SysUser&gt; <span class="title function_">selectUserList</span><span class="params">(SysUser user)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userMapper.selectUserList(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发现这里的<code>service</code>就一行？</p>
<p><code>PageHelper</code>就是在这发挥了作用，进行了分页</p>
<p>其实我的问题就在这里，不过我要先把后面的流程走完</p>
<p>3、查到数据我们回到<code>SysUserController</code>，这次关注他的<code>return getDataTable(list);</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 响应请求分页数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;, &quot;unchecked&quot;&#125;)</span></span><br><span class="line"><span class="keyword">protected</span> TableDataInfo <span class="title function_">getDataTable</span><span class="params">(List&lt;?&gt; list)</span> &#123;</span><br><span class="line">    <span class="type">TableDataInfo</span> <span class="variable">rspData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableDataInfo</span>();</span><br><span class="line">    rspData.setCode(HttpStatus.SUCCESS);</span><br><span class="line">    rspData.setMsg(<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">    rspData.setRows(list);</span><br><span class="line">    rspData.setTotal(<span class="keyword">new</span> <span class="title class_">PageInfo</span>(list).getTotal());</span><br><span class="line">    <span class="keyword">return</span> rspData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这就是最终的相应结果，既然是<code>total</code>出问题，那就重点关注<code>setTotal</code>方法，直接点进<code>new PageInfo(list).getTotal()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">PageInfo</span><span class="params">(List&lt;T&gt; list)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(list, <span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">PageInfo</span><span class="params">(List&lt;T&gt; list, <span class="type">int</span> navigatePages)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(list);</span><br><span class="line">    <span class="built_in">this</span>.isFirstPage = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.isLastPage = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.hasPreviousPage = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.hasNextPage = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (list <span class="keyword">instanceof</span> Page) &#123;</span><br><span class="line">        <span class="type">Page</span> <span class="variable">page</span> <span class="operator">=</span> (Page)list;</span><br><span class="line">        <span class="built_in">this</span>.pageNum = page.getPageNum();</span><br><span class="line">        <span class="built_in">this</span>.pageSize = page.getPageSize();</span><br><span class="line">        <span class="built_in">this</span>.pages = page.getPages();</span><br><span class="line">        <span class="built_in">this</span>.size = page.size();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.size == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.startRow = <span class="number">0L</span>;</span><br><span class="line">            <span class="built_in">this</span>.endRow = <span class="number">0L</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.startRow = page.getStartRow() + <span class="number">1L</span>;</span><br><span class="line">            <span class="built_in">this</span>.endRow = <span class="built_in">this</span>.startRow - <span class="number">1L</span> + (<span class="type">long</span>)<span class="built_in">this</span>.size;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (list <span class="keyword">instanceof</span> Collection) &#123;</span><br><span class="line">        <span class="built_in">this</span>.pageNum = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">this</span>.pageSize = list.size();</span><br><span class="line">        <span class="built_in">this</span>.pages = <span class="built_in">this</span>.pageSize &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.size = list.size();</span><br><span class="line">        <span class="built_in">this</span>.startRow = <span class="number">0L</span>;</span><br><span class="line">        <span class="built_in">this</span>.endRow = list.size() &gt; <span class="number">0</span> ? (<span class="type">long</span>)(list.size() - <span class="number">1</span>) : <span class="number">0L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (list <span class="keyword">instanceof</span> Collection) &#123;</span><br><span class="line">        <span class="built_in">this</span>.calcByNavigatePages(navigatePages);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终调用的是下面的构造方法，那么就进到<code>super(list);</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">PageSerializable</span><span class="params">(List&lt;T&gt; list)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.list = list;</span><br><span class="line">    <span class="comment">// 是否是Page对象</span></span><br><span class="line">    <span class="keyword">if</span> (list <span class="keyword">instanceof</span> Page) &#123;</span><br><span class="line">        <span class="built_in">this</span>.total = ((Page)list).getTotal();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.total = (<span class="type">long</span>)list.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是<code>com.github.pagehelper</code>包下的，就是在这里为<code>PageInfo</code>设置了<code>total</code>，当然也是为我们最终相应设置了</p>
<p>？？？</p>
<p>Page哪里来的</p>
<p>4、Page</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.pagehelper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Page</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">ArrayList</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Closeable</span> &#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从这里可以看出<code>Page</code>继承了<code>ArrayList</code>也是就实现了<code>List</code></p>
<p><code>debug</code>结果如下，发现在执行完<code>service</code>代码后，<code>PageHelper</code>就已经完成这一步，那么自然就设置好了<code>total</code></p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.2n0r5fmnpj80.webp"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>上面是正常流程梳理，接下看我的代码，哪里出了问题，导致<code>total</code>总是错的</p>
<h2 id="问题与解决">问题与解决</h2>
<p>上面是举得<code>ruoyi</code>原本的例子，因为我没有改动，所以也就没有问题</p>
<p>在我的模块上，我其他的代码实现也相同，就是在<code>service</code>上又处理了一次</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询任务列表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> task 任务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Task&gt; <span class="title function_">selectTaskList</span><span class="params">(Task task)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> taskMapper.selectTaskList(task).stream().map(<span class="built_in">this</span>::fill).collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的<code>fill</code>就是又一个填充数据的流程</p>
<p>打印sql日志没有问题，是有分页流程的（查总数，然后<code>limit</code>）</p>
<p><code>debug</code>发现这里<code>list</code>变成了ArrayList，并非<code>Page</code>，也就把<code>total</code>设置为<code>list.size()</code></p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.1oocatztyvxc.webp"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>其实问题早就在查到资料后发现了，但是大多数处理方法我都看不上，什么再调用<code>PageHelper.startPage</code>，转换成<code>PageInfo</code>之类的，都会让我怀疑我是否有必要用了</p>
<p>尤其是在已经使用了<code>ruoyi</code>之后，重新在service做那简直太麻烦了，因为那样我还需要把<code>ruoyi</code>封装在<code>Controller</code>上的一些东西拿过去，折腾不了</p>
<p>最后，找到一种非常简单的方法解决了</p>
<p>就是，看上面的代码其是又调用了<code>stream</code>的转换流程的，可能就是在这里<code>PageHelper</code>出现了问题</p>
<p>那么试着将<code>fill</code>方法变成<code>void</code>，反正也是填充数据，没有影响的，改动后如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Task&gt; <span class="title function_">selectTaskList</span><span class="params">(Task task)</span> &#123;</span><br><span class="line">    List&lt;Task&gt; taskList = taskMapper.selectTaskList(task);</span><br><span class="line">    taskList.forEach(<span class="built_in">this</span>::fill);</span><br><span class="line">    <span class="keyword">return</span> taskList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次<code>debug</code>就是<code>Page</code>对象了，一切都正常了</p>
<h1 id="总结">总结</h1>
<p>如果你成功带入我的节奏，那很好，你认真看了；如果你发现其中问题了，那更好了，欢迎指正；如果你还能发现我另一个想讨论的问题，那我更开心了</p>
<p>我想讨论的就藏在</p>
<blockquote>
<p>发现这里的<code>service</code>就一行？</p>
</blockquote>
<p>这句话里了</p>
<p>很奇怪我们的业务逻辑代码不都是几十行，上百行的吗？🤔</p>
<p>为什么<code>service</code>就一行<code>mapper</code>？</p>
<p>篇幅问题，一下在讨论吧！！！😁</p>
]]></content>
      <tags>
        <tag>ruoyi</tag>
      </tags>
  </entry>
  <entry>
    <title>ruoyi代码生成</title>
    <url>/article/cc4237ac.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p>毕设用的<a
href="https://gitee.com/y_project/RuoYi-Vue">RuoYi-Vue</a>，其中还学到不少东西，这次分享一下关于<code>ruoyi</code>的代码生成的使用</p>
<p>官方文档链接如下<a
href="http://doc.ruoyi.vip/ruoyi-vue/document/htsc.html#代码生成">后台手册
| RuoYi</a></p>
<span id="more"></span>
<h1 id="使用">使用</h1>
<p>1、设计数据表结构</p>
<p>代码生成自然少不了数据库表的设计，完成了数据库表设计，就可以在系统中利用<code>ruoyi</code>生成代码了</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.64s4nbm408k0.webp"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>这里是会显示连接的数据库对应的表</p>
<p>导入后就可以预览、编辑、删除，最后生成代码</p>
<p>2、点进编辑</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.2shadp2wg3o0.webp"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>在这就可以编辑基本信息、字段信息、生成信息</p>
<p>基本信息，主要包括表名、描述、实体类名、作者等</p>
<p>字段信息，如上展示，这里很多都可以编辑，重点可以关注上面红框内的</p>
<ul>
<li>Java类型，对应生成实体类属性类型</li>
<li>插入、编辑可以看作一类，就是是否包含在弹出编辑框内</li>
<li>列表，表示是否直接展示在<code>index</code>列表中</li>
<li>查询，就是是否包含在查询条件中，还可以设置查询方式，当然主要关心是否是<code>like</code>即可</li>
<li>显示类型、字典类型，也在一块，字典是<code>ruoyi</code>另一个可以学习一下的地方</li>
</ul>
<p>3、生成代码</p>
<p>在生成代码之前可以先预览一下</p>
<p>生成的代码会以压缩包存在</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.7k15bb90r000.webp"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>其中主要有三类文件</p>
<ul>
<li><code>sql</code></li>
<li>后端代码（<code>Java</code>、<code>mybatis</code>）</li>
<li>前端代码（<code>api</code>，<code>views</code>）</li>
</ul>
<p>首先执行<code>sql</code>文件，其实就是在代码生成中设置的生成信息相关的菜单<code>sql</code></p>
<p>后端代码我还是很推荐再另建一个<code>module</code>，没有其他需求的话只需要引入<code>ruoyi-common</code>即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通用工具--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ruoyi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ruoyi-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其他的<code>Java</code>代码和<code>mybatis</code>就不废话了</p>
<p>前端的话，压缩包显示的位置已经很明显了，放在对应位置即可</p>
<h1 id="总结">总结</h1>
<p><code>ruoyi</code>代码生成确实是非常好用，但是你必须要配合使用<code>ruoyi</code>才有功效，建议还是学习一下，那样就可以自己定制一套属于自己的代码生成方案了。</p>
]]></content>
      <tags>
        <tag>ruoyi</tag>
      </tags>
  </entry>
  <entry>
    <title>ruoyi学习Quartz</title>
    <url>/article/796c508a.html</url>
    <content><![CDATA[<p>依旧是从<code>ruoyi</code>学习，这次是任务调度框架<code>Quartz</code></p>
<h1 id="参考">参考</h1>
<p><a href="https://www.w3cschool.cn/quartz_doc/">Quartz官方文档</a></p>
<p><a
href="https://blog.csdn.net/lkl_csdn/article/details/73613033">quartz
（从原理到应用）详解篇</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/306591082">Quartz
是什么？一文带你入坑 - 知乎</a></p>
<p>任务调度，也可说是定时任务，其实还是很常见的在我们的生活中，最常见的莫过于闹钟了，这就是一种定时任务，其他还有提醒事项，消息订阅等等</p>
<span id="more"></span>
<h1 id="入门">入门</h1>
<p>关于<code>Quartz</code>，首先要知道<code>Job</code>、<code>JobDetail</code>、<code>Trigger</code>、<code>Scheduler</code></p>
<p>我简单的用非官方的语言，我的理解，讲一下</p>
<ul>
<li><p><code>Job</code>：具体的调用接口，关键是要实现其中的<code>execute</code>方法</p></li>
<li><p><code>JobDetail</code>：区别不同类型的任务，还包括<code>Job</code>实例的属性</p></li>
<li><p><code>Trigger</code>：触发器，配置不同任务的执行策略</p></li>
<li><p><code>Scheduler</code>：调度器，调度任务</p></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="scheduler">Scheduler</h1>
<p><code>Scheduler</code>作为真正的任务调度器，肯定是需要配置各种参数的，拿<code>ruoyi</code>配置来看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时任务配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ruoyi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SchedulerFactoryBean <span class="title function_">schedulerFactoryBean</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="type">SchedulerFactoryBean</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchedulerFactoryBean</span>();</span><br><span class="line">        factory.setDataSource(dataSource);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// quartz参数</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.put(<span class="string">&quot;org.quartz.scheduler.instanceName&quot;</span>, <span class="string">&quot;RuoyiScheduler&quot;</span>);</span><br><span class="line">        prop.put(<span class="string">&quot;org.quartz.scheduler.instanceId&quot;</span>, <span class="string">&quot;AUTO&quot;</span>);</span><br><span class="line">        <span class="comment">// 线程池配置</span></span><br><span class="line">        prop.put(<span class="string">&quot;org.quartz.threadPool.class&quot;</span>, <span class="string">&quot;org.quartz.simpl.SimpleThreadPool&quot;</span>);</span><br><span class="line">        prop.put(<span class="string">&quot;org.quartz.threadPool.threadCount&quot;</span>, <span class="string">&quot;20&quot;</span>);</span><br><span class="line">        prop.put(<span class="string">&quot;org.quartz.threadPool.threadPriority&quot;</span>, <span class="string">&quot;5&quot;</span>);</span><br><span class="line">        <span class="comment">// JobStore配置</span></span><br><span class="line">        prop.put(<span class="string">&quot;org.quartz.jobStore.class&quot;</span>, <span class="string">&quot;org.quartz.impl.jdbcjobstore.JobStoreTX&quot;</span>);</span><br><span class="line">        <span class="comment">// 集群配置</span></span><br><span class="line">        prop.put(<span class="string">&quot;org.quartz.jobStore.isClustered&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        prop.put(<span class="string">&quot;org.quartz.jobStore.clusterCheckinInterval&quot;</span>, <span class="string">&quot;15000&quot;</span>);</span><br><span class="line">        prop.put(<span class="string">&quot;org.quartz.jobStore.maxMisfiresToHandleAtATime&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        prop.put(<span class="string">&quot;org.quartz.jobStore.txIsolationLevelSerializable&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sqlserver 启用</span></span><br><span class="line">        <span class="comment">// prop.put(&quot;org.quartz.jobStore.selectWithLockSQL&quot;, &quot;SELECT * FROM &#123;0&#125;LOCKS UPDLOCK WHERE LOCK_NAME = ?&quot;);</span></span><br><span class="line">        prop.put(<span class="string">&quot;org.quartz.jobStore.misfireThreshold&quot;</span>, <span class="string">&quot;12000&quot;</span>);</span><br><span class="line">        prop.put(<span class="string">&quot;org.quartz.jobStore.tablePrefix&quot;</span>, <span class="string">&quot;QRTZ_&quot;</span>);</span><br><span class="line">        factory.setQuartzProperties(prop);</span><br><span class="line"></span><br><span class="line">        factory.setSchedulerName(<span class="string">&quot;RuoyiScheduler&quot;</span>);</span><br><span class="line">        <span class="comment">// 延时启动</span></span><br><span class="line">        factory.setStartupDelay(<span class="number">1</span>);</span><br><span class="line">        factory.setApplicationContextSchedulerContextKey(<span class="string">&quot;applicationContextKey&quot;</span>);</span><br><span class="line">        <span class="comment">// 可选，QuartzScheduler</span></span><br><span class="line">        <span class="comment">// 启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了</span></span><br><span class="line">        factory.setOverwriteExistingJobs(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 设置自动启动，默认为true</span></span><br><span class="line">        factory.setAutoStartup(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ruoyi</code>的配置是一个很好的实战参考，其上的注解也写的非常明白了</p>
<h2 id="主参数配置">主参数配置</h2>
<p><code>Quartz</code>主参数配置，可参考<a
href="https://www.w3cschool.cn/quartz_doc/quartz_doc-ml8e2d9m.html">Quartz主配置</a>，<code>ruoyi</code>配置只有两项</p>
<ul>
<li><p><code>org.quartz.scheduler.instanceName</code>：本身对于调度程序没有意义，如是集群模式需要同一逻辑调度程序使用相同名称</p></li>
<li><p><code>org.quartz.scheduler.instanceId</code>：调度程序<code>id</code>方法，配置为<code>Auto</code>则自动生成）</p></li>
</ul>
<h2 id="线程池配置">线程池配置</h2>
<p><code>ThreadPool</code>配置，可参考<a
href="https://www.w3cschool.cn/quartz_doc/quartz_doc-7vix2d9n.html">Quartz配置ThreadPool设置</a></p>
<ul>
<li><p><code>org.quartz.threadPool.class</code>：<code>ThreadPool</code>的实现类，<code>Quartz</code>自带的<code>org.quartz.simpl.SimpleThreadPool</code>已经可以了</p></li>
<li><p><code>org.quartz.threadPool.threadCount</code>：线程数，根据场景需要而配置</p></li>
<li><p><code>org.quartz.threadPool.threadPriority</code>：线程优先级</p></li>
</ul>
<h2 id="jobstore配置">JobStore配置</h2>
<p>顾名思义，就是说<code>Job</code>这些任务的存储方式，一共有三种方式</p>
<ul>
<li><p><code>RAMJobStore</code>：内存存储，快速方便，易丢失</p></li>
<li><p><code>JDBC-JobStoreTX</code>、<code>JDBC-JobStoreCMT</code>：这两个对比着说最好，他们都是通过<code>JDBC</code>来存储，因此不易失，两者主要区别是事务由谁管理，<code>TX</code>表示自己来管理事务，<code>CMT</code>表示加入全局事务管理，因为使用<code>Spring</code>事务管理的原因，应该大多数都是用前者吧</p></li>
</ul>
<p>参考：</p>
<p><a
href="https://www.w3cschool.cn/quartz_doc/quartz_doc-ib1j2d6x.html">Job
Stores</a></p>
<p><a
href="https://www.w3cschool.cn/quartz_doc/quartz_doc-hm9x2dki.html">Quartz配置RAMJobStore</a></p>
<p><a
href="https://www.w3cschool.cn/quartz_doc/quartz_doc-zjc52dkj.html">Quartz配置JDBC-JobStoreTX</a></p>
<p><a
href="https://www.w3cschool.cn/quartz_doc/quartz_doc-hsek2dnq.html">Quartz配置JDBC-JobStoreCMT</a></p>
<h2 id="数据源配置">数据源配置</h2>
<p>详细请参考，<a
href="https://www.w3cschool.cn/quartz_doc/quartz_doc-d8pn2do9.html">Quartz配置DataSources</a></p>
<p>一旦前面使用了<code>JDBC</code>的存储方式，就一定要配置数据源的，<code>ruoyi</code>使用的是配置注入的方式，就是将<code>ruoyi-framework</code>配置的数据源以注入的方式进行配置，这里不细说了，有机会写<code>ruoyi</code>数据源设计再讲吧</p>
<p>Quartz提供了数据库文件，<a
href="/download/quartz.sql">quartz.sql下载</a></p>
<h2 id="集群配置">集群配置</h2>
<p>参考<a
href="https://www.w3cschool.cn/quartz_doc/quartz_doc-3x7u2doc.html">使用JDBC-JobStore配置群集</a></p>
<ul>
<li><p><code>org.quartz.jobStore.isClustered</code>：设置为“<code>true</code>”打开集群功能</p></li>
<li><p><code>org.quartz.jobStore.clusterCheckinInterval</code>：检测集群间频率，单位毫秒</p></li>
<li><p><code>org.quartz.jobStore.maxMisfiresToHandleAtATime</code>：在给定的通行证中，工作区将处理的最大错误次数触发。</p></li>
<li><p><code>org.quartz.jobStore.txIsolationLevelSerializable</code>：“<code>true</code>”表示<code>Quartz</code>（使用<code>JobStoreTX</code>或<code>CMT</code>）在<code>JDBC</code>连接上调用<code>setTransactionIsolation</code>（<code>Connection.TRANSACTION_SERIALIZABLE</code>）。这可以有助于防止在高负载下的某些数据库的锁定超时以及“持久”事务。</p></li>
<li><p><code>org.quartz.jobStore.misfireThreshold</code>：在被认为“失火”之前，调度程序将“容忍”一个<code>Triggers</code>将其下一个启动时间通过的毫秒数。</p></li>
<li><p><code>org.quartz.jobStore.tablePrefix</code>：表前缀</p></li>
</ul>
<h2 id="其他">其他</h2>
<p>ruoyi剩下的配置就不多讲了，看注释，查源码即可</p>
<h1 id="job">Job</h1>
<p>关于<code>Job</code>，前面已经说过，需要实现<code>Job</code>接口，实现<code>execute</code>方法，看看<code>ruoyi</code>是怎么做的吧。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象quartz调用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ruoyi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractQuartzJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(AbstractQuartzJob.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程本地变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Date&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="type">SysJob</span> <span class="variable">sysJob</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SysJob</span>();</span><br><span class="line">        BeanUtils.copyBeanProp(sysJob, context.getMergedJobDataMap().get(ScheduleConstants.TASK_PROPERTIES));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            before(context, sysJob);</span><br><span class="line">            <span class="keyword">if</span> (sysJob != <span class="literal">null</span>) &#123;</span><br><span class="line">                doExecute(context, sysJob);</span><br><span class="line">            &#125;</span><br><span class="line">            after(context, sysJob, <span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;任务执行异常  - ：&quot;</span>, e);</span><br><span class="line">            after(context, sysJob, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行前</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 工作执行上下文对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sysJob  系统计划任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JobExecutionContext context, SysJob sysJob)</span> &#123;</span><br><span class="line">        threadLocal.set(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行后</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 工作执行上下文对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sysJob  系统计划任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(JobExecutionContext context, SysJob sysJob, Exception e)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">startTime</span> <span class="operator">=</span> threadLocal.get();</span><br><span class="line">        threadLocal.remove();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">SysJobLog</span> <span class="variable">sysJobLog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SysJobLog</span>();</span><br><span class="line">        sysJobLog.setJobName(sysJob.getJobName());</span><br><span class="line">        sysJobLog.setJobGroup(sysJob.getJobGroup());</span><br><span class="line">        sysJobLog.setInvokeTarget(sysJob.getInvokeTarget());</span><br><span class="line">        sysJobLog.setStartTime(startTime);</span><br><span class="line">        sysJobLog.setStopTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">long</span> <span class="variable">runMs</span> <span class="operator">=</span> sysJobLog.getStopTime().getTime() - sysJobLog.getStartTime().getTime();</span><br><span class="line">        sysJobLog.setJobMessage(sysJobLog.getJobName() + <span class="string">&quot; 总共耗时：&quot;</span> + runMs + <span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">            sysJobLog.setStatus(Constants.FAIL);</span><br><span class="line">            <span class="type">String</span> <span class="variable">errorMsg</span> <span class="operator">=</span> StringUtils.substring(ExceptionUtil.getExceptionMessage(e), <span class="number">0</span>, <span class="number">2000</span>);</span><br><span class="line">            sysJobLog.setExceptionInfo(errorMsg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sysJobLog.setStatus(Constants.SUCCESS);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入数据库当中</span></span><br><span class="line">        SpringUtils.getBean(ISysJobLogService.class).addJobLog(sysJobLog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行方法，由子类重载</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 工作执行上下文对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sysJob  系统计划任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 执行过程中的异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doExecute</span><span class="params">(JobExecutionContext context, SysJob sysJob)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里定义的是抽象类，抽象方法为<code>doExecute</code>，从<code>@Override</code>的<code>execute</code>可知，<code>doExecute</code>方法作为<code>execute</code>的中间部分被执行，夹在<code>before</code>和<code>after</code>方法之中。说到这个必须要提一下这个线程本地变量<code>ThreadLocal</code>，之前只是觉得面试题中见得多，现在看的代码多了，就知道了实际生产中用的真不少。这里<code>ThreadLocal</code>就不必过多介绍了，保存线程级变量，互不干扰。这里保存的是<code>Date</code>数据，在<code>before</code>方法中设置，在<code>after</code>中获取，并记录<code>job</code>日志，写入数据库。</p>
<p>抽象类看完了，接下来就是具体实现类了，这里有两个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时任务处理（禁止并发执行）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ruoyi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DisallowConcurrentExecution</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzDisallowConcurrentExecution</span> <span class="keyword">extends</span> <span class="title class_">AbstractQuartzJob</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doExecute</span><span class="params">(JobExecutionContext context, SysJob sysJob)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        JobInvokeUtil.invokeMethod(sysJob);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时任务处理（允许并发执行）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ruoyi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzJobExecution</span> <span class="keyword">extends</span> <span class="title class_">AbstractQuartzJob</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doExecute</span><span class="params">(JobExecutionContext context, SysJob sysJob)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        JobInvokeUtil.invokeMethod(sysJob);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从命名和有无<code>@DisallowConcurrentExecution</code>注解就可区分，关键是是否允许并发执行！？</p>
<p>可以看到它们都是调用了<code>JobInvokeUtil</code>工具，如下（因为代码过多，有些方法省略掉了）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 任务执行工具</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ruoyi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobInvokeUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sysJob 系统任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">invokeMethod</span><span class="params">(SysJob sysJob)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">invokeTarget</span> <span class="operator">=</span> sysJob.getInvokeTarget();</span><br><span class="line">        <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> getBeanName(invokeTarget);</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> getMethodName(invokeTarget);</span><br><span class="line">        List&lt;Object[]&gt; methodParams = getMethodParams(invokeTarget);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isValidClassName(beanName)) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> SpringUtils.getBean(beanName);</span><br><span class="line">            invokeMethod(bean, methodName, methodParams);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> Class.forName(beanName).newInstance();</span><br><span class="line">            invokeMethod(bean, methodName, methodParams);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用任务方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean         目标对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodName   方法名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodParams 方法参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">invokeMethod</span><span class="params">(Object bean, String methodName, List&lt;Object[]&gt; methodParams)</span></span><br><span class="line">            <span class="keyword">throws</span> NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException,</span><br><span class="line">            InvocationTargetException &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotNull(methodParams) &amp;&amp; methodParams.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> bean.getClass().getDeclaredMethod(methodName, getMethodParamsType(methodParams));</span><br><span class="line">            method.invoke(bean, getMethodParamsValue(methodParams));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> bean.getClass().getDeclaredMethod(methodName);</span><br><span class="line">            method.invoke(bean);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验是否为为class包名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true是 false否</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isValidClassName</span><span class="params">(String invokeTarget)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.countMatches(invokeTarget, <span class="string">&quot;.&quot;</span>) &gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取bean名称</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> invokeTarget 目标字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bean名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getBeanName</span><span class="params">(String invokeTarget)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> StringUtils.substringBefore(invokeTarget, <span class="string">&quot;(&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> StringUtils.substringBeforeLast(beanName, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取bean方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> invokeTarget 目标字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> method方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMethodName</span><span class="params">(String invokeTarget)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> StringUtils.substringBefore(invokeTarget, <span class="string">&quot;(&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> StringUtils.substringAfterLast(methodName, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取method方法参数相关列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> invokeTarget 目标字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> method方法相关参数列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Object[]&gt; getMethodParams(String invokeTarget) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取参数类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodParams 参数相关列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 参数类型列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt;[] getMethodParamsType(List&lt;Object[]&gt; methodParams) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取参数值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodParams 参数相关列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 参数值列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object[] getMethodParamsValue(List&lt;Object[]&gt; methodParams) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从<code>invokeMethod(SysJob sysJob)</code>方法来看，先从<code>SysJob</code>获取目标字符串（大概就是“类名.方法名(参数...)”这样的）；然后分别获取类名、方法名、方法参数；在Spring容器中有的交予bean执行，没有的用反射的方式实例化一个。最后在<code>invokeMethod(Object bean, String methodName, List&lt;Object[]&gt; methodParams)</code>的方法中实现。本类中其他的方法都是辅助做验证，解析的，不在多提。</p>
<h1 id="trigger">Trigger</h1>
<p>前面也提到了，<code>Trigger</code>触发器，关系到<code>Job</code>的执行策略，关联<code>Scheduler</code>和<code>Job</code>。下面便是关键的创建<code>Scheduler</code>代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时任务工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ruoyi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到quartz任务类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sysJob 执行计划</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 具体执行任务类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">Job</span>&gt; getQuartzJobClass(SysJob sysJob) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isConcurrent</span> <span class="operator">=</span> <span class="string">&quot;0&quot;</span>.equals(sysJob.getConcurrent());</span><br><span class="line">        <span class="keyword">return</span> isConcurrent ? QuartzJobExecution.class : QuartzDisallowConcurrentExecution.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建任务触发对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TriggerKey <span class="title function_">getTriggerKey</span><span class="params">(Long jobId, String jobGroup)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> TriggerKey.triggerKey(ScheduleConstants.TASK_CLASS_NAME + jobId, jobGroup);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建任务键对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JobKey <span class="title function_">getJobKey</span><span class="params">(Long jobId, String jobGroup)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JobKey.jobKey(ScheduleConstants.TASK_CLASS_NAME + jobId, jobGroup);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建定时任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createScheduleJob</span><span class="params">(Scheduler scheduler, SysJob job)</span> <span class="keyword">throws</span> SchedulerException, TaskException &#123;</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">Job</span>&gt; jobClass = getQuartzJobClass(job);</span><br><span class="line">        <span class="comment">// 构建job信息</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">jobId</span> <span class="operator">=</span> job.getJobId();</span><br><span class="line">        <span class="type">String</span> <span class="variable">jobGroup</span> <span class="operator">=</span> job.getJobGroup();</span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(jobClass).withIdentity(getJobKey(jobId, jobGroup)).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 表达式调度构建器</span></span><br><span class="line">        <span class="type">CronScheduleBuilder</span> <span class="variable">cronScheduleBuilder</span> <span class="operator">=</span> CronScheduleBuilder.cronSchedule(job.getCronExpression());</span><br><span class="line">        cronScheduleBuilder = handleCronScheduleMisfirePolicy(job, cronScheduleBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按新的cronExpression表达式构建一个新的trigger</span></span><br><span class="line">        <span class="type">CronTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger().withIdentity(getTriggerKey(jobId, jobGroup))</span><br><span class="line">                .withSchedule(cronScheduleBuilder).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 放入参数，运行时的方法可以获取</span></span><br><span class="line">        jobDetail.getJobDataMap().put(ScheduleConstants.TASK_PROPERTIES, job);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (scheduler.checkExists(getJobKey(jobId, jobGroup))) &#123;</span><br><span class="line">            <span class="comment">// 防止创建时存在数据问题 先移除，然后在执行创建操作</span></span><br><span class="line">            scheduler.deleteJob(getJobKey(jobId, jobGroup));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 暂停任务</span></span><br><span class="line">        <span class="keyword">if</span> (job.getStatus().equals(ScheduleConstants.Status.PAUSE.getValue())) &#123;</span><br><span class="line">            scheduler.pauseJob(ScheduleUtils.getJobKey(jobId, jobGroup));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置定时任务策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CronScheduleBuilder <span class="title function_">handleCronScheduleMisfirePolicy</span><span class="params">(SysJob job, CronScheduleBuilder cb)</span></span><br><span class="line">            <span class="keyword">throws</span> TaskException &#123;</span><br><span class="line">        <span class="keyword">switch</span> (job.getMisfirePolicy()) &#123;</span><br><span class="line">            <span class="keyword">case</span> ScheduleConstants.MISFIRE_DEFAULT:</span><br><span class="line">                <span class="keyword">return</span> cb;</span><br><span class="line">            <span class="keyword">case</span> ScheduleConstants.MISFIRE_IGNORE_MISFIRES:</span><br><span class="line">                <span class="keyword">return</span> cb.withMisfireHandlingInstructionIgnoreMisfires();</span><br><span class="line">            <span class="keyword">case</span> ScheduleConstants.MISFIRE_FIRE_AND_PROCEED:</span><br><span class="line">                <span class="keyword">return</span> cb.withMisfireHandlingInstructionFireAndProceed();</span><br><span class="line">            <span class="keyword">case</span> ScheduleConstants.MISFIRE_DO_NOTHING:</span><br><span class="line">                <span class="keyword">return</span> cb.withMisfireHandlingInstructionDoNothing();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TaskException</span>(<span class="string">&quot;The task misfire policy &#x27;&quot;</span> + job.getMisfirePolicy()</span><br><span class="line">                        + <span class="string">&quot;&#x27; cannot be used in cron schedule tasks&quot;</span>, Code.CONFIG_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ruoyi</code>代码写的很漂亮的，注释也非常清楚。直接从<code>createScheduleJob</code>方法来看，首先根据<code>job</code>是否支持并发确定<code>class</code>信息；然后根据<code>Job</code>创建<code>JobDetail</code>，用<code>getJobKey(Long jobId, String jobGroup)</code>区别标识；然后创建表达式构建器，<code>ruoyi</code>只使用<code>cron</code>表达式的方式（本身<code>cron</code>表达式就很有优势），同时根据<code>MisfirePolicy</code>使用不同策略；然后根据表达式构建器创建<code>Trigger</code>，类似于上的<code>getTriggerKey(Long jobId, String jobGroup)</code>方法区别标识；<code>JobDetail</code>放入<code>Job</code>对象，方便随时获取；最后就是将对应的<code>JobDetail</code>和<code>Trigger</code>加入任务调度器中。</p>
<p>最后后，通过<code>IDE</code>找到调用<code>createScheduleJob</code>方法的地方，就三个，一个<code>SysJobServiceImpl</code>的<code>init</code>方法，另外就是新增和修改<code>Job</code>方法中了。</p>
<h1 id="至此">至此</h1>
<p>至此，<code>ruoyi</code>有关于<code>quartz</code>的使用几乎就讲完了，剩下的就是接口和业务设计的问题了，还有一个很重要的点，应该启动体验一下<code>ruoyi</code>设计这个过程，这个留到下次想起来再补充吧😂😂😂</p>
<h1 id="思考">思考</h1>
<blockquote>
<p>是否可以复用<code>job</code>，多个<code>trigger</code>共同调度？</p>
</blockquote>
<p>就是说如果同一个<code>job</code>，它的执行策略比较复杂，一个<code>cron</code>表达式不够用，怎样能在复用这个<code>job</code>的情况下，将它设置多个<code>Trigger</code>呢？</p>
<blockquote>
<p>还有。。。</p>
</blockquote>
]]></content>
      <tags>
        <tag>ruoyi</tag>
        <tag>定时任务</tag>
      </tags>
  </entry>
  <entry>
    <title>ruoyi学习多数据源</title>
    <url>/article/9a440dda.html</url>
    <content><![CDATA[<p>这几天看了一些关于<code>MySQL</code>主从复制，读写分离的文章，对于数据库这方面的知识很有兴趣。主要还是之前真的没有做过，想学习一下。这下好了，<code>ruoyi</code>入手吧。</p>
<h1 id="参考">参考</h1>
<ul>
<li><p>https://zhuanlan.zhihu.com/p/199217698</p></li>
<li><p>https://blog.csdn.net/qq_37502106/article/details/91044952</p></li>
</ul>
<span id="more"></span>
<h1 id="自定义注解">自定义注解</h1>
<p>还是从<code>ruoyi-common</code>来看，其中value是一个枚举</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义多数据源切换注解</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 优先级：先方法，后类，如果方法覆盖了类上的数据源类型，以方法的为准，否则以类上的为准</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ruoyi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DataSource &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切换数据源名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceType <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> DataSourceType.MASTER;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="枚举">枚举</h1>
<p>枚举类型如下，指明了是主库（MASTER）还是从库（SLAVE），这将与之后的配置对应</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据源</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ruoyi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">DataSourceType</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MASTER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SLAVE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="切面">切面</h1>
<p>既然又是注解形式，在ruoyi-framework找到切面处理，代码也不算多</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多数据源处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ruoyi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceAspect</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.ruoyi.common.annotation.DataSource)&quot;</span></span><br><span class="line"><span class="meta">            + &quot;|| @within(com.ruoyi.common.annotation.DataSource)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dsPointCut</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;dsPointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> getDataSource(point);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotNull(dataSource)) &#123;</span><br><span class="line">            DynamicDataSourceContextHolder.setDataSourceType(dataSource.value().name());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> point.proceed();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 销毁数据源 在执行方法之后</span></span><br><span class="line">            DynamicDataSourceContextHolder.clearDataSourceType();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取需要切换的数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">getDataSource</span><span class="params">(ProceedingJoinPoint point)</span> &#123;</span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) point.getSignature();</span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> AnnotationUtils.findAnnotation(signature.getMethod(), DataSource.class);</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(dataSource)) &#123;</span><br><span class="line">            <span class="keyword">return</span> dataSource;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> AnnotationUtils.findAnnotation(signature.getDeclaringType(), DataSource.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="值得注意">值得注意</h2>
<blockquote>
<p><span class="citation" data-cites="within和">@within和</span><span
class="citation"
data-cites="annotation的区别">@annotation的区别</span>：<br />
<span class="citation" data-cites="within">@within</span> 对象级别<br />
<span class="citation" data-cites="annotation">@annotation</span>
方法级别</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;@within(org.springframework.web.bind.annotation.RestController&quot;) </span></span><br><span class="line"><span class="meta">        这个用于拦截标注在类上面的@RestController注解</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">@Around(&quot;@annotation(org.springframework.web.bind.annotation.RestController&quot;) </span></span><br><span class="line"><span class="meta">         这个用于拦截标注在方法上面的@RestController注解</span></span><br></pre></td></tr></table></figure>
<p>可见<code>DataSource</code>注解代码上注释的没有问题，该注解能在方法上也能在类上，而且“优先级：先方法，后类，如果方法覆盖了类上的数据源类型，以方法的为准，否则以类上的为准”。</p>
<p>切面代码也不复杂，简单来说就是获取注解，根据注解切换动态数据源。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据源切换处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ruoyi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicDataSourceContextHolder</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(DynamicDataSourceContextHolder.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用ThreadLocal维护变量，ThreadLocal为每个使用该变量的线程提供独立的变量副本，</span></span><br><span class="line"><span class="comment">     * 所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; CONTEXT_HOLDER = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置数据源的变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setDataSourceType</span><span class="params">(String dsType)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;切换到&#123;&#125;数据源&quot;</span>, dsType);</span><br><span class="line">        CONTEXT_HOLDER.set(dsType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得数据源的变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getDataSourceType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> CONTEXT_HOLDER.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空数据源变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">clearDataSourceType</span><span class="params">()</span> &#123;</span><br><span class="line">        CONTEXT_HOLDER.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的两个方法<code>setDataSourceType</code>和<code>clearDataSourceType</code>，就是在前面的切面中调用了，这里还是用了<code>ThreadLocal</code>用于线程隔离。而<code>getDataSourceType</code>方法，则在<code>DynamicDataSource</code>类实现的<code>AbstractRoutingDataSource</code>抽象类方法中被调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态数据源</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ruoyi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title class_">AbstractRoutingDataSource</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DynamicDataSource</span><span class="params">(DataSource defaultTargetDataSource, Map&lt;Object, Object&gt; targetDataSources)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.setDefaultTargetDataSource(defaultTargetDataSource);</span><br><span class="line">        <span class="built_in">super</span>.setTargetDataSources(targetDataSources);</span><br><span class="line">        <span class="built_in">super</span>.afterPropertiesSet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">determineCurrentLookupKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DynamicDataSourceContextHolder.getDataSourceType();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个抽象类<code>AbstractRoutingDataSource</code>，是<code>Spring Boot</code>提供的，可根据用户定义的规则选择当前数据源。使用方法参考上面的第二条链接即可。</p>
<p>既然是<code>ruoyi</code>自己做的框架，必然也要支持配置。虽然仅仅也是对于已有框架的封装，但也是值得学习的。<code>ruoyi</code>数据源配置类<code>DruidProperties</code>对应着数据源配置文件<code>application-druid.yml</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * druid 配置属性</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ruoyi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidProperties</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.druid.initialSize&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> initialSize;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.druid.minIdle&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> minIdle;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.druid.maxActive&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxActive;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.druid.maxWait&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxWait;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.druid.timeBetweenEvictionRunsMillis&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> timeBetweenEvictionRunsMillis;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.druid.minEvictableIdleTimeMillis&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> minEvictableIdleTimeMillis;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.druid.maxEvictableIdleTimeMillis&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxEvictableIdleTimeMillis;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.druid.validationQuery&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String validationQuery;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.druid.testWhileIdle&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> testWhileIdle;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.druid.testOnBorrow&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> testOnBorrow;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.druid.testOnReturn&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> testOnReturn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DruidDataSource <span class="title function_">dataSource</span><span class="params">(DruidDataSource datasource)</span> &#123;</span><br><span class="line">        <span class="comment">/** 配置初始化大小、最小、最大 */</span></span><br><span class="line">        datasource.setInitialSize(initialSize);</span><br><span class="line">        datasource.setMaxActive(maxActive);</span><br><span class="line">        datasource.setMinIdle(minIdle);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 配置获取连接等待超时的时间 */</span></span><br><span class="line">        datasource.setMaxWait(maxWait);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 */</span></span><br><span class="line">        datasource.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 配置一个连接在池中最小、最大生存的时间，单位是毫秒 */</span></span><br><span class="line">        datasource.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);</span><br><span class="line">        datasource.setMaxEvictableIdleTimeMillis(maxEvictableIdleTimeMillis);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 用来检测连接是否有效的sql，要求是一个查询语句，常用select &#x27;x&#x27;。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        datasource.setValidationQuery(validationQuery);</span><br><span class="line">        <span class="comment">/** 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 */</span></span><br><span class="line">        datasource.setTestWhileIdle(testWhileIdle);</span><br><span class="line">        <span class="comment">/** 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 */</span></span><br><span class="line">        datasource.setTestOnBorrow(testOnBorrow);</span><br><span class="line">        <span class="comment">/** 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 */</span></span><br><span class="line">        datasource.setTestOnReturn(testOnReturn);</span><br><span class="line">        <span class="keyword">return</span> datasource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置的读取就不用多说了，<code>@Value("$&#123;spring.datasource.druid.initialSize&#125;")</code>，需要的加上注解即可。</p>
<p>至于数据源配置文件<code>application-druid.yml</code>如下</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据源配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="comment"># 主库数据源</span></span><br><span class="line">      <span class="attr">master:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ry-vue?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="comment"># 从库数据源</span></span><br><span class="line">      <span class="attr">slave:</span></span><br><span class="line">        <span class="comment"># 从数据源开关/默认关闭</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">url:</span></span><br><span class="line">        <span class="attr">username:</span></span><br><span class="line">        <span class="attr">password:</span></span><br><span class="line">      <span class="comment"># 初始连接数</span></span><br><span class="line">      <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">      <span class="comment"># 最小连接池数量</span></span><br><span class="line">      <span class="attr">minIdle:</span> <span class="number">10</span></span><br><span class="line">      <span class="comment"># 最大连接池数量</span></span><br><span class="line">      <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">      <span class="comment"># 配置获取连接等待超时的时间</span></span><br><span class="line">      <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span></span><br><span class="line">      <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 配置一个连接在池中最小生存的时间，单位是毫秒</span></span><br><span class="line">      <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">      <span class="comment"># 配置一个连接在池中最大生存的时间，单位是毫秒</span></span><br><span class="line">      <span class="attr">maxEvictableIdleTimeMillis:</span> <span class="number">900000</span></span><br><span class="line">      <span class="comment"># 配置检测连接是否有效</span></span><br><span class="line">      <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">      <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">webStatFilter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">statViewServlet:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># 设置白名单，不填则允许所有访问</span></span><br><span class="line">        <span class="attr">allow:</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">        <span class="comment"># 控制台管理用户名和密码</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">ruoyi</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">stat:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment"># 慢SQL记录</span></span><br><span class="line">          <span class="attr">log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">slow-sql-millis:</span> <span class="number">1000</span></span><br><span class="line">          <span class="attr">merge-sql:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">wall:</span></span><br><span class="line">          <span class="attr">config:</span></span><br><span class="line">            <span class="attr">multi-statement-allow:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>这些配置项绝大多数都属于<code>druid</code>的配置。不同的是这里的<code>master</code>和<code>slave</code>是<code>ruoyi</code>自定义的，代表主从库，不同数据源嘛，这个要结合<code>DruidConfig</code>来看。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * druid 配置多数据源</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ruoyi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;spring.datasource.druid.master&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">masterDataSource</span><span class="params">(DruidProperties druidProperties)</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">        <span class="keyword">return</span> druidProperties.dataSource(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;spring.datasource.druid.slave&quot;)</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty(prefix = &quot;spring.datasource.druid.slave&quot;, name = &quot;enabled&quot;, havingValue = &quot;true&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">slaveDataSource</span><span class="params">(DruidProperties druidProperties)</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">        <span class="keyword">return</span> druidProperties.dataSource(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;dynamicDataSource&quot;)</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="keyword">public</span> DynamicDataSource <span class="title function_">dataSource</span><span class="params">(DataSource masterDataSource)</span> &#123;</span><br><span class="line">        Map&lt;Object, Object&gt; targetDataSources = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        targetDataSources.put(DataSourceType.MASTER.name(), masterDataSource);</span><br><span class="line">        setDataSource(targetDataSources, DataSourceType.SLAVE.name(), <span class="string">&quot;slaveDataSource&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DynamicDataSource</span>(masterDataSource, targetDataSources);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetDataSources 备选数据源集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceName        数据源名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName          bean名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDataSource</span><span class="params">(Map&lt;Object, Object&gt; targetDataSources, String sourceName, String beanName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> SpringUtils.getBean(beanName);</span><br><span class="line">            targetDataSources.put(sourceName, dataSource);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 去除监控页面底部的广告</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>标准的配置类，通过<code>@ConfigurationProperties("spring.datasource.druid.master")</code>和<code>@Bean</code>来完成的。这里对应着<code>application-druid.yml</code>中的<code>spring.datasource.druid.master</code>配置；<code>@Bean</code>和<code>@ConfigurationProperties("spring.datasource.druid.slave")</code>和<code>@ConditionalOnProperty(prefix = "spring.datasource.druid.slave", name = "enabled", havingValue = "true")</code>也是完成bean注入的，不同的是<code>@ConditionalOnProperty</code>，这个代表根据情况注入<code>Bean</code>，关于这个的具体含义是<code>application-druid.yml</code>中的以<code>spring.datasource.druid.slave</code>为前缀，配置有名为<code>enabled</code>且值为<code>true</code>的情况下来做<code>Bean</code>的注入。</p>
<p>下面两个方法结合着讲</p>
<p>这三个<code>Bean</code>都是用来配置<code>dataSource</code>，第三个注解<code>@Bean(name = "dynamicDataSource")</code>和<code>@Primary</code>很能说明这个方法的重要性了。第一个<code>masterDataSource</code>的配置不用多说，而第二个<code>slaveDataSource</code>的配置就很有意思了，不同于主数据源配置，从数据源需要通过<code>Spring</code>工具类找到<code>Bean</code>才可注入，这与前面根据情况注入对应。</p>
]]></content>
      <tags>
        <tag>ruoyi</tag>
      </tags>
  </entry>
  <entry>
    <title>三级分类之Stream的使用</title>
    <url>/article/684ce5.html</url>
    <content><![CDATA[<h1 id="参考">参考</h1>
<ul>
<li><a
href="https://www.bilibili.com/video/BV1np4y1C7Yf?p=45">https://www.bilibili.com/video/BV1np4y1C7Yf?p=45</a></li>
</ul>
<h1 id="简介">简介</h1>
<p>在跟着尚硅谷学习谷粒商城中遇到这个三级分类问题，使用了Stream
Api，记录一下</p>
<span id="more"></span>
<h1 id="过程">过程</h1>
<p>主要内容就是对商品类别表进行三级分类，category表设计如下，主要关注，分类id，父分类id，排序这几个字段</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.65f2k1z7b0w0.png"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>数据内容，这里只贴了30条，总1000条，随后在web上展示</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.34un2jdep2g0.png"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>了解了需求，<code>CategoryEntity</code>如下，关注新加入的非数据库字段属性<code>List&lt;CategoryEntity&gt; children</code>，用于存放该分类下的子分类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;pms_category&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryEntity</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分类id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long catId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分类名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 父分类id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long parentCid;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 层级</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer catLevel;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否显示[0-不显示，1显示]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer showStatus;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图标地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String icon;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计量单位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String productUnit;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商品数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer productCount;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 子分类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;CategoryEntity&gt; children;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们重点关注业务层，dao层使用的是Mybatis-Plus，不多介绍</p>
<p>就是在这里我们使用了Stream处理了从数据库查到的所有分类信息</p>
<p>处理过程：</p>
<ul>
<li>从数据库查到所有分类信息<code>List&lt;CategoryEntity&gt;</code></li>
<li>先查到所有的一级分类（<code>parentCid</code>为0的，从上面的数据内容也可看出来）</li>
<li>接着从这些父分类，找到属于他的子分类（通过<code>getChildren</code>函数）</li>
<li><code>sorted</code>根据sort字段升序排列</li>
<li><code>collect</code>形成集合</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;categoryService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CategoryDao, CategoryEntity&gt; <span class="keyword">implements</span> <span class="title class_">CategoryService</span> &#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;CategoryEntity&gt; <span class="title function_">listWithTree</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1、查出所有分类</span></span><br><span class="line">        List&lt;CategoryEntity&gt; entities = baseMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 2、组装树形结构</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.1、一级分类</span></span><br><span class="line">        List&lt;CategoryEntity&gt; level1Menu = entities.stream().filter((categoryEntity) -&gt;</span><br><span class="line">                categoryEntity.getParentCid() == <span class="number">0</span></span><br><span class="line">        ).peek((menu) -&gt;</span><br><span class="line">                menu.setChildren(getChildren(menu, entities))</span><br><span class="line">        ).sorted(</span><br><span class="line">                Comparator.comparingInt(CategoryEntity::getSort)</span><br><span class="line">        ).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> level1Menu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归查找所有菜单的子菜单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> all</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;CategoryEntity&gt; <span class="title function_">getChildren</span><span class="params">(CategoryEntity root, List&lt;CategoryEntity&gt; all)</span> &#123;</span><br><span class="line">        List&lt;CategoryEntity&gt; children = all.stream().filter((categoryEntity -&gt;</span><br><span class="line">                categoryEntity.getParentCid().equals(root.getCatId()))</span><br><span class="line">        ).peek((categoryEntity -&gt;</span><br><span class="line">                categoryEntity.setChildren(getChildren(categoryEntity, all)))</span><br><span class="line">        ).sorted(</span><br><span class="line">                Comparator.comparingInt(CategoryEntity::getSort)</span><br><span class="line">        ).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后web显示如下，我使用的<code>JSONView</code>插件，也可以用F12查看相关信息</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image-20210808171639929.5b6crh7qq8s0.png"
alt="image-20210808171639929" />
<figcaption aria-hidden="true">image-20210808171639929</figcaption>
</figure>
<p>结果就是我们期望的结果，观察发现排序也正确，“手机”排在首位</p>
<h1 id="思考">思考</h1>
<p>如果这个业务不使用Stream该怎么做，会有多复杂，从这里就可体会到Stream的强大</p>
<p>使用Stream，需要哪些知识？</p>
<p>首先作为JDK1.8的重点升级，JDK1.8的lambda表达式、函数式接口、链式编程都是重点</p>
<h2 id="四大函数式接口">四大函数式接口</h2>
<p>这些都可以直接搜源码看接口怎样设计的就明白怎么用了，下面我用白话概括一下</p>
<blockquote>
<p>Function 函数式接口</p>
</blockquote>
<p>传入一个参数，由这个参数返回值</p>
<blockquote>
<p>Predicate 断言型接口</p>
</blockquote>
<p>传入一个参数，由这个参数进行判断，返回布尔值</p>
<blockquote>
<p>Consumer 消费型接口</p>
</blockquote>
<p>传入一个参数，由这个参数进行处理，无返回</p>
<blockquote>
<p>Supplier 供给型接口</p>
</blockquote>
<p>无参数，返回一个值</p>
<h2 id="回想">回想</h2>
<p>在使用Stream其实就是传入一些函数式接口，再结合使用lambda表达式就变得非常简便</p>
<p>想想但是学的使用体会还没有这么大，直到遇见了真的业务，感受就马上不同了</p>
<h1 id="总结">总结</h1>
<p>此后，我终于能体会到一些算法题的业务场景了，还有JavaSE基础真的很重要，更多的得慢慢感受了</p>
]]></content>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>不要摆烂</title>
    <url>/article/5ea43f48.html</url>
    <content><![CDATA[<p>不要摆烂！不要摆烂！不要摆烂！</p>
<p>重要的事情说三遍。</p>
<p>之前还可以调侃自己说“
偶尔摆烂，经常偶尔”。虽说没有那么严重但确实差不多😂</p>
<p>提醒事项和稍后再看</p>
<p>有一说一，这两个东西可真是帮了我的大忙了</p>
<p>提醒事项我每天都在用，因为现在记性越来越差，加上现在事情越来越多，很容易被其他事情弄得分心，时常忘记上一秒要做些什么，所以非常需要把一些事情记录下来。</p>
<p>稍后再看</p>
<p>现在越来越难抽出时间做自己的事了,</p>
<span id="more"></span>
<p>更新ing</p>
]]></content>
      <tags>
        <tag>思考</tag>
        <tag>自己</tag>
      </tags>
  </entry>
  <entry>
    <title>windows更新git（转载）</title>
    <url>/article/52936e2c.html</url>
    <content><![CDATA[<p><a
href="https://blog.csdn.net/RedaTao/article/details/104398408">转载原文</a></p>
<h1 id="先查看当前安装的git版本">1、先查看当前安装的git版本</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>
<h1 id="更新">2、更新</h1>
<p>git版本是2.17.1之前的，使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git update</span><br></pre></td></tr></table></figure>
<p>git版本是2.17.1之后的，使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git update-git-for-windows</span><br></pre></td></tr></table></figure>
<h1 id="版本是2.14.1的会提示">3、版本是2.14.1的，会提示</h1>
<p><strong>git: 'update' is not a git command</strong></p>
<p><strong>git: 'update-git-for-windows' is not a git
command</strong></p>
<p><strong>解决方法</strong>：重新下载新版本安装包，覆盖安装即可</p>
<p>git官网下载：https://git-scm.com/download/win （特别慢！！）</p>
<p>快速下载地址：<a
href="https://blog.csdn.net/RedaTao/article/details/104398525">点这里</a></p>
]]></content>
      <tags>
        <tag>记录</tag>
        <tag>Git/GitHub/Gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>习惯说明书</title>
    <url>/article/7b04ce94.html</url>
    <content><![CDATA[<p>习惯说明书，听起来好像很奇怪，是习惯（的）说明书？还是习惯（用）说明书？</p>
<p>习惯的说明说，是个什么鬼？习惯还有说明说的？</p>
<p>尽量接受默认设置</p>
<p>学习编程以来，越来越习惯区从官网上找资料、查问题，这是个好习惯，可以肯定。这个习惯也渐渐带入到生活中了，尤其是更习惯看说明书，这</p>
<p>现在每当我买东西时，第一步就是去看商品说明，尽量把这个商品了解到一定程度，反复思考自己是不是需要才会去购买。
还有就是下载app时，装上之后，第一步一定是打开设置，以尽量接受默认设置为目标，修改必要的设置，也许是我现在的精力不多了，不愿意去折腾这些玩意了，不再以“所有app得适应我的使用习惯”为目标，更多的是去接受它们想要给我看到的、听到的。</p>
<p>更新ing</p>
<span id="more"></span>
]]></content>
  </entry>
  <entry>
    <title>二叉树</title>
    <url>/article/e85d694a.html</url>
    <content><![CDATA[<p>树的基本概念和存储结构已经介绍过了，现在介绍数据结构中极其重要的二叉树。</p>
<p><a
href="https://www.jianshu.com/p/3a8aee2ce593">部分显示问题，请参考</a></p>
<span id="more"></span>
<h1 id="定义">定义</h1>
<p>二叉树（Binary
Tree）是n（n&gt;=0）个结点的有限集合，该集合或者为空集（称为空二叉树），或者由一个根结点和两棵互不相交的，分别称为根结点的左子树和右子树的二叉树组成。</p>
<h2 id="二叉树的特点有">二叉树的特点有:</h2>
<p>每个结点最多有两棵子树，所以二又树中不存在度大于2的结点。注意不是只有两棵子树，而是最多有。没有子树或者有棵子树都是可以的。</p>
<p>左子树和右子树是有顺序的，次序不能任意颠倒。就像人是双手、双脚，但显然左手、左脚和右手、右脚是不一样的，右手戴左手套、右脚穿左鞋都会极其别扭和难受。</p>
<p>即使树中某结点只有一棵子树，也要区分它是左子树还是右子树。图6-5-3中，树1和树2是同一棵树，但它们却是不同的二叉树。就好像你一不小心，摔伤了手，伤的是左手还是右手，对你的生活影响度是完全不同的。</p>
<h2 id="二叉树具有五种基本形态">二叉树具有五种基本形态:</h2>
<p>1.空二叉树。</p>
<p>2.只有一个根结点。</p>
<p>3.根结点只有左子树。</p>
<p>4.根结点只有右子树。</p>
<p>5.根结点既有左子树又有右子树。</p>
<h2 id="特殊二叉树">特殊二叉树</h2>
<h3 id="斜树">斜树</h3>
<p>所有的结点都只有左子树的二叉树叫左斜树。所有的结点都只有右子树的二叉树叫右斜树。这两者统称为斜树。</p>
<h3 id="满二叉树">满二叉树</h3>
<p>在一棵二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树。</p>
<p>特点：</p>
<p>(1)叶子只能出现在最下一层。出现在其他层就不可能达成平衡。</p>
<p>(2)非叶子结点的度一-定是 2。否则就是“缺胳膊少腿”了。</p>
<p>(3)在同样深度的二叉树中，满二叉树的结点个数最多，叶子数最多。</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/满二叉树.png"
alt="满二叉树" />
<figcaption aria-hidden="true">满二叉树</figcaption>
</figure>
<h3 id="完全二叉树">完全二叉树</h3>
<p>对一棵具有n个结点的二叉树按层序编号，如果编号为i（1≤i≤n）的结点与同祥深度的满二叉树中编号为i的结点在二叉树中位置完全相同，则这棵二叉树称为完全二叉树。</p>
<p>特点：</p>
<p>(1)叶子结点只能出现在最下两层。</p>
<p>(2)最下层的叶子一定集中在左部连续位置。</p>
<p>(3)倒数二层，若有叶子结点，一定都在右部连续位置。</p>
<p>(4)如果结点度为1，则该结点只有左孩子，即不存在只有右子树的情况。</p>
<p>(5)同样结点数的二叉树，完全二叉树的深度最小。</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/完全二叉树.png"
alt="完全二叉树" />
<figcaption aria-hidden="true">完全二叉树</figcaption>
</figure>
<h2 id="二叉树的性质">二叉树的性质</h2>
<h2 id="性质一">性质一</h2>
<p>在二叉树的第i层上至多有<span
class="math inline">\(2^{i-1}\)</span>个结点（i&gt;=1）。</p>
<h2 id="性质二">性质二</h2>
<p>深度为k的二叉树至多有<span
class="math inline">\(2^k-1\)</span>个结点（k&gt;=1）。</p>
<h2 id="性质三">性质三</h2>
<p>对任何一棵二叉树T，如果其终端结点数为<span
class="math inline">\(n_0\)</span>，度为2的结点数为<span
class="math inline">\(n_2\)</span>，则<span
class="math inline">\(n_0=n_2+1\)</span>。</p>
<h2 id="性质四">性质四</h2>
<p>具有n个结点的完全二叉树的深度为<span
class="math inline">\([log_2n]\)</span>+1（[x]表示不大于x的最大整数）。</p>
<h2 id="性质五">性质五</h2>
<p>对于完全二叉树，若从上至下、从左至右编号，则编号为<span
class="math inline">\(i\)</span>的结点，其左孩子编号必为<span
class="math inline">\(2i\)</span>，右孩子编号必为<span
class="math inline">\(2i＋1\)</span>，双亲的编号必为<span
class="math inline">\(i/2\)</span>。</p>
<h2 id="二叉树的存储结构">二叉树的存储结构</h2>
<h2 id="二叉树顺序存储结构">二叉树顺序存储结构</h2>
<p>一般只用于完全二叉树，不详解。</p>
<h2 id="二叉链表">二叉链表</h2>
<p>二叉树每个结点最多有两个孩子，所以为他设计一个数据与和两个指针域，称这样的链表叫做二叉链表。</p>
<div class="line-block">lchild | data | rchild |</div>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BiTNode</span></span><br><span class="line">&#123;</span><br><span class="line">    TElemType data;     <span class="comment">/*数据*/</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BiTNode</span>* lchild, * rchild;   <span class="comment">/*左右孩子指针*/</span></span><br><span class="line">&#125;BiTNode, * BiTree;</span><br></pre></td></tr></table></figure>
<h2 id="遍历二叉树">遍历二叉树</h2>
<h2 id="原理">原理</h2>
<p>二叉树的遍历( traversing binary tree
)是指从根结点出发，按照某种次序依次访问二叉树中所有结点，使得每个结点被访问一次且仅被访问一次。</p>
<h2 id="遍历方法">遍历方法</h2>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/遍历.png"
alt="遍历" />
<figcaption aria-hidden="true">遍历</figcaption>
</figure>
<h3 id="前序遍历即先根序的遍历算法">前序遍历即先（根）序的遍历算法</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreOrderTraverse</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    cout &lt;&lt; T-&gt;data;</span><br><span class="line">    <span class="built_in">PreOrderTraverse</span>(T-&gt;lchild);</span><br><span class="line">    <span class="built_in">PreOrderTraverse</span>(T-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上图前序遍历：A BDG CEF</p>
<h3 id="中序遍历即中根序的遍历算法">中序遍历即中（根）序的遍历算法</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrderTraverse</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">InOrderTraverse</span>(T-&gt;lchild);</span><br><span class="line">    cout &lt;&lt; T-&gt;data;</span><br><span class="line">    <span class="built_in">InOrderTraverse</span>(T-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上图中序遍历：DGB A ECF</p>
<h3 id="后序遍历即后根序的遍历算法">后序遍历即后（根）序的遍历算法</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PostOrderTraverse</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">PostOrderTraverse</span>(T-&gt;lchild);</span><br><span class="line">    <span class="built_in">PostOrderTraverse</span>(T-&gt;rchild);</span><br><span class="line">    cout &lt;&lt; T-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上图后序遍历：GDB EFC A</p>
<h3 id="层序遍历即逐层遍历">层序遍历即逐层遍历</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">FloorPrint</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BiTree temp[<span class="number">100</span>];   <span class="comment">//创建pTreeNode指针类型的指针数组</span></span><br><span class="line">    <span class="type">int</span> in = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> out = <span class="number">0</span>;</span><br><span class="line">    temp[in++] = T;  <span class="comment">//先保存二叉树根节点</span></span><br><span class="line">    <span class="keyword">while</span> (in &gt; out)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp[out])</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; temp[out]-&gt;data;</span><br><span class="line">            temp[in++] = temp[out]-&gt;lchild;</span><br><span class="line">            temp[in++] = temp[out]-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">        out++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上图层序遍历：A BC DEF G</p>
<h2 id="二叉树建立">二叉树建立</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateBiTree</span><span class="params">(BiTree&amp; T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TElemType c;</span><br><span class="line">    cin &gt;&gt; c;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">        T = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        T = <span class="keyword">new</span> BiTNode;</span><br><span class="line">        <span class="keyword">if</span> (!T)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;分配空间失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            T-&gt;data = c;</span><br><span class="line">            <span class="built_in">CreateBiTree</span>(T-&gt;lchild);</span><br><span class="line">            <span class="built_in">CreateBiTree</span>(T-&gt;rchild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="线索二叉树">线索二叉树</h2>
<p>把指向前驱和后继的指针称为线索，加上线索的二叉链表称为线索链表，相应的二叉树就称为线索二叉树（Threaded
Binary Tree）。</p>
<div class="line-block">lchild | ltag | data | rtag | rchild |</div>
<p>其中：</p>
<p>ltag为0时指向该结点的左孩子，为1时指向该结点的前驱。</p>
<p>rtag为0时指向该结点的右孩子，为1时指向该结点的后继。</p>
<h2 id="线索二叉树结构实现">线索二叉树结构实现</h2>
<h3 id="存储结构定义">存储结构定义</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BiThrNode</span></span><br><span class="line">&#123;</span><br><span class="line">    TElemType data;</span><br><span class="line">    <span class="keyword">struct</span>  <span class="title class_">BiThrNode</span>* lchild, * rchild;</span><br><span class="line">    <span class="type">int</span> LTag, RTag; <span class="comment">//LTag(RTag)=0表示指向孩子，LTag(RTag)=1表示只是前驱或后继</span></span><br><span class="line">&#125;BiThrNode, * BiThrTree;</span><br><span class="line">BiThrTree pre;<span class="comment">//全局变量，始终指向刚刚访问过的节点</span></span><br></pre></td></tr></table></figure>
<h3 id="中序遍历进行中序线索化">中序遍历进行中序线索化</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InThreading</span><span class="params">(BiThrTree p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">InThreading</span>(p-&gt;lchild);<span class="comment">/* 递归左子树线索化 */</span></span><br><span class="line">        <span class="keyword">if</span> (!p-&gt;lchild)<span class="comment">/* 没有左孩子 */</span></span><br><span class="line">        &#123;</span><br><span class="line">            p-&gt;LTag = <span class="number">1</span>;<span class="comment">/* 前驱线索 */</span></span><br><span class="line">            p-&gt;lchild = pre; <span class="comment">/* 左孩子指针指向前驱 */</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p-&gt;LTag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!pre-&gt;rchild) <span class="comment">/* 前驱没有右孩子 */</span></span><br><span class="line">        &#123;</span><br><span class="line">            pre-&gt;RTag = <span class="number">1</span>;<span class="comment">/* 后继线索 */</span></span><br><span class="line">            pre-&gt;rchild = p;<span class="comment">/* 前驱右孩子指针指向后继(当前结点p) */</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p-&gt;RTag = <span class="number">0</span>;</span><br><span class="line">        pre = p;<span class="comment">/* 保持pre指向p的前驱 */</span></span><br><span class="line">        <span class="built_in">InThreading</span>(p-&gt;rchild);<span class="comment">/* 递归右子树线索化 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3
id="中序线索二叉树遍历带有头节点">中序线索二叉树遍历（带有头节点）</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrderTraverse_Thr</span><span class="params">(BiThrTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BiThrTree p;</span><br><span class="line">    p = T-&gt;lchild; <span class="comment">/* p指向根结点 */</span></span><br><span class="line">    <span class="keyword">while</span> (p != T)<span class="comment">/* 空树或遍历结束时,p==T */</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (p-&gt;LTag == <span class="number">0</span>)</span><br><span class="line">            p = p-&gt;lchild;</span><br><span class="line">        cout &lt;&lt; p-&gt;data;</span><br><span class="line">        <span class="keyword">while</span> (p-&gt;RTag == <span class="number">1</span> &amp;&amp; p-&gt;rchild != T)</span><br><span class="line">        &#123;</span><br><span class="line">            p = p-&gt;rchild;</span><br><span class="line">            cout &lt;&lt; p-&gt;data;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;rchild;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="树森林与二叉树的转换">树、森林与二叉树的转换</h2>
<h2 id="树转换为二叉树">树转换为二叉树</h2>
<p>1.加线。在所有兄弟结点之间加一条连线。</p>
<p>2.去线。对树中每个结点，只保留它与第一一个孩子结点的连线，
删除它与其他孩子结点之间的连线。</p>
<p>3.层次调整。以树的根结点为轴心，将整棵树顺时针旋转定的角度，
使之结构层次分明。注意第一个孩子是二叉树结点的左孩子，兄弟转换过来的孩子是结点的右孩子。</p>
<h2 id="森林转换为二叉树">森林转换为二叉树</h2>
<p>森林是由若干棵树组成的，所以完全可以理解为，森林中的每一棵树都是兄弟，可以按照兄弟的处理办法来操作。步骤如下:</p>
<p>1.把每个树转换为二叉树。</p>
<p>2.第一棵二又树不动，从第二棵二叉树开始，依次把后一棵二叉树的根结点作为前一棵二叉树的根结点的右孩子用线连接起来。当所有的二叉树连接起来后就得到了由森林转换来的二叉树。</p>
<h2 id="二叉树转换为树">二叉树转换为树</h2>
<p>二叉树转换为树是树转换为二叉树的逆过程，也就是反过来做而已。步骤如下:</p>
<p>1.加线。若某结点的左孩子结点存在，则将这个左孩子的右孩子结点、右孩子的右孩子结点、右孩子的右孩子的右孩子结....哈，反正就是左孩子的n个右孩子结点都作为此结点的孩子。将该结点与这些右孩子结点用线连接起来。</p>
<p>2.去线。删除原二叉树中所有结点与其右孩子结点的连线。</p>
<p>3.层次调整。使之结构层次分明。</p>
<h2 id="二叉树转换为森林">二叉树转换为森林</h2>
<p>判断一棵二叉树能够转换成棵树还是森林，
标准很简单，那就是只要看这棵二叉树的根结点有没有右孩子，有就是森林，没有就是一棵树。那么如果是转换成森林，步骤如下:</p>
<p>1.从根结点开始，若右孩子存在，则把与右孩子结点的连线删除，再查看分离后的二叉树，若右孩子存在，则连线删除....直到所有右孩子连线都删除为止，得到分离的二叉树。</p>
<p>2.再将每棵分离后的二叉树转换为树即可。</p>
<h2 id="树与森林的遍历">树与森林的遍历</h2>
<p>最后我们再谈谈关于树和森林的遍历问题。</p>
<p>树的遍历分为两种方式。</p>
<p>1.一种是先根遍历树，
即先访问树的根结点，然后依次先根遍历根的每棵子树。</p>
<p>2.另一种是后根遍历》即先依次后根遍历每棵子树，然后再访问根结点。</p>
<p>森林的遍历也分为两种方式:</p>
<p>1.前序遍历:先访问森林中第一棵树的根结点，然后再依次先根遍历根的每棵子树，再依次用同样方式遍历除去第一棵树的剩余树构成的森林。</p>
<p>2.后序遍历:是先访问森林中第一棵树，后根遍历的方式遍历每棵子树，然后再访问根结点，再依次同样方式遍历除去第一棵树的剩余树构成的森林。</p>
<h2 id="总结">总结</h2>
<p>二叉树应用很广的。</p>
<p><a
href="https://www.jianshu.com/p/3a8aee2ce593">部分显示问题，请参考</a></p>
]]></content>
      <tags>
        <tag>数据结构&amp;算法</tag>
      </tags>
  </entry>
  <entry>
    <title>云服务开年福利</title>
    <url>/article/acbbcd77.html</url>
    <content><![CDATA[<h1 id="起因">起因</h1>
<p>因为之前用过华为云嘛，白嫖的一个月🐶</p>
<p>使用了华为云的服务器，选的<code>CentOS7</code>，那时候主要用来学习<code>Linux</code></p>
<p>所以前不久收到了华为云开年云福利的邮件和短信</p>
<span id="more"></span>
<h1 id="可以一试">可以一试</h1>
<p>https://activity.huaweicloud.com/newyear_promotion/index.html</p>
<p>点开，第一眼就看到了</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.1xwr7zuivzi8.webp"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>这个<code>1C2G</code>的云服务器对我来说是比较有吸引力的，而且首年35/年！！！</p>
<p>简直了，35块用一年，那可太爽了</p>
<p>第一天点进去已经抢没了，不过每天都有机会</p>
<p>然后，我就想找个机会拿下一个，不过可能需要一个时机，因为现在确实不适合入手，没有想好拿下后做什么</p>
<p>之后又有一个偶然的机会，查了查阿里云、腾讯云、百度云等</p>
<p>发现，原来这些大厂这个时间都推出云服务开年福利</p>
<p>可能是我孤陋寡闻了，应该每年都有</p>
<p>不过这次因为我参与所以它存在了</p>
<h1 id="结">结</h1>
<p>如果有兴趣的话，非常推荐这个开年福利，首年才不到40，真的很值</p>
<p>最后如果缺少<code>SSH</code>工具（<code>Windows</code>平台），非常推荐https://mobaxterm.mobatek.net/</p>
]]></content>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>人类确实不如动物有血性</title>
    <url>/article/7b6feb78.html</url>
    <content><![CDATA[<p>最近看到一则有关大象🐘因被迫工作怒将其主人杀死的新闻，想就此谈一谈。</p>
<p>点开新闻，原来是炎炎夏日下，主人强迫大象🐘在橡胶园内搬运木材导致大象不堪忍受，“发疯”，用象牙将其主人杀死。</p>
<p>当时感慨的一句，“人类确实不如动物有血性”。既是说动物比人类豁得出去，能在重压下直接进行反抗，不像人类，在生活的重压下，还要想一想家人朋友，或是其他的什么牵挂，是少一些血性；又是说人类和动物好像是换了身份，动物不再是我们印象中凶残冷血的动物，更像是我们自认为高贵的自己，他，被束缚，被要求为它们工作，同时我们人类也不是高贵的自己，更像是眼里瞧不起的低级生物，它，强迫他们工作，为了个人利益，这样一想，动物还是有温存的血性，忍受我们的压迫，而我们却没有该有的血性，只会为自己想。</p>
<span id="more"></span>
<p>现在说是保护环境，保护地球生物，维护生态平衡，碳平衡。到现在都成了政治、舆论、道德操作手段了。和谐地球，生物共存，也有点只是口号的意味了。人类就是天性越来越少了，“人性”越来越重了。</p>
<p>结合最近酷暑炎炎的天气，想想人类疯狂发展的进程，地球、地球的生物都在接受严峻的考验。如果硬说这就是“物竞天择，适者生存”，地球历史发展的必然，那我也没什么可说了。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=38018486&amp;auto=1&amp;height=66">
</iframe>
]]></content>
      <tags>
        <tag>思考</tag>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>书单</title>
    <url>/article/e8a1470d.html</url>
    <content><![CDATA[<h1 id="推荐一些书籍吧">推荐一些书籍吧</h1>
<p>目前分类：人文历史、小说、编程</p>
<span id="more"></span>
<h1 id="人文历史">人文历史</h1>
<p>这个暂时没有看过什么的，我都是看影视剧了解的🐶，还是对历史挺感兴趣的。</p>
<h1 id="小说">小说</h1>
<h2 id="西游记">《西游记》</h2>
<p>国人最最最熟悉的故事，依据《西游记》的创作更是数不胜数。在我心中它也是首屈一指的存在。我推荐的不是影视、游戏等作品，是原著！原著！原著！</p>
<h2 id="悟空传">《悟空传》</h2>
<p>这可能是我唯一认认真真看完的一本小说，在高中花了两天（课余时间）。我从来不适合看长篇文章，一旦文章过长我都会分心，看不下去，我之所以能看下《悟空传》，就是因为它是分小节讲述的，一点点就看完了。😂😂😂</p>
<p>《悟空传》对原有的西游宇宙是有些颠覆。</p>
<h1 id="编程">编程</h1>
<h2 id="大话数据结构">《大话数据结构》</h2>
<p><img data-src="https://img2.doubanio.com/view/subject/l/public/s6382631.jpg" /></p>
<p>生动形象地讲解数据结构，配图和讲解方式都很有趣。</p>
<h2 id="算法">《算法》</h2>
<p><img data-src="https://img2.doubanio.com/view/subject/l/public/s29107491.jpg" /></p>
<p>Java语言讲解算法，有一定难度。</p>
<h2 id="剑指offer">《剑指Offer》</h2>
<p><img data-src="https://img9.doubanio.com/view/subject/l/public/s7038106.jpg" /></p>
<p>不仅仅是面试必备，而且对于数据结构的理解、算法实践和代码编写都很有帮助。</p>
<h2 id="mysql必知必会">《MySQL必知必会》</h2>
<p><img data-src="https://img9.doubanio.com/view/subject/m/public/s5968156.jpg" /></p>
<p>很基础的MySQL书籍，很全面。</p>
<h2 id="mysql技术内幕">《MySQL技术内幕》</h2>
<p><img data-src="https://img1.doubanio.com/view/subject/s/public/s29731159.jpg" /></p>
<p>深入了解MySQL技术。</p>
<h2 id="redis设计与实现">《Redis设计与实现》</h2>
<p><img data-src="https://img1.doubanio.com/view/subject/m/public/s27297117.jpg" /></p>
<h2 id="java编程思想">《Java编程思想》</h2>
<p><img data-src="https://img9.doubanio.com/view/subject/l/public/s27243455.jpg" /></p>
<p>非常全面的Java编程书籍，稍微有些晦涩，无论是初学者还是有经验的开发人员都值得反复看。</p>
<h2 id="spring实战">《Spring实战》</h2>
<p><img data-src="https://img9.doubanio.com/view/subject/s/public/s33601406.jpg" /></p>
<p>Spring家族都有些涉及。</p>
<h2 id="java并发编程实战">《Java并发编程实战》</h2>
<p><img data-src="https://img2.doubanio.com/view/subject/m/public/s7663093.jpg" /></p>
<p>如书名：Java并发编程实战</p>
<h2 id="深入理解java虚拟机">《深入理解Java虚拟机》</h2>
<p><img data-src="https://img9.doubanio.com/view/subject/m/public/s33531736.jpg" /></p>
<p>更适合有经验的开发者</p>
<p>暂时到这吧，之后会补充的！！！</p>
]]></content>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>优先队列</title>
    <url>/article/602ee0a8.html</url>
    <content><![CDATA[<p>许多应用程序都需要处理有序的元素，但不一定要求它们全部有序，或是不一定要一次就将它们排序。很多情况下我们会收集些元素，处理当前键值最大的元素，然后再收集更多的元素，再处理当前键值最大的元素，如此这般。例如，你可能有一台能够同时运行多个应用程序的电脑(或者手机)。这是通过为每个应用程序的事件分配一个优先级，并总是处理下一个优先级最高的事件来实现的。例如，绝大多数手机分配给来电的优先级都会比游戏程序的高。</p>
<span id="more"></span>
<p>在这种情况下，一个合适的数据结构应该支持两种操作:
删除最大元素和插入元素。这种数据类型叫做优先队列。优先队列的使用和队列（删除最老的元素）以及栈（删除最新的元素）类似，但高效地实现它则更有挑战性。</p>
<p><a
href="https://wnhyang.github.io/article/a444b428.html">目录</a></p>
<h1 id="api">API</h1>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/pq-api.png"
alt="泛型优先队列的API" />
<figcaption aria-hidden="true">泛型优先队列的API</figcaption>
</figure>
<h1 id="初级实现">初级实现</h1>
<h1 id="数组实现无序">数组实现（无序）</h1>
<h1 id="数组实现有序">数组实现（有序）</h1>
<h1 id="链表表示法">链表表示法</h1>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/pq-array.png"
alt="在一个优先队列上执行的一系列操作" />
<figcaption
aria-hidden="true">在一个优先队列上执行的一系列操作</figcaption>
</figure>
<h1 id="堆的定义">堆的定义</h1>
<p>数据结构二叉堆能够很好地实现优先队列的基本操作。在二叉堆的数组中，每个元素都要保证大于等于另两个特定位置的元素。相应地，这些位置的元素又至少要大于等于数组中的另两个元素，以此类推。如果我们将所有元素画成一棵二叉树，将每个较大元素和两个较小的元素用边连接就可以很容易看出这种结构。</p>
<p>定义。当一棵二又树的每个结点都大于等于它的两个子结点时，它被称为堆有序。</p>
<p>相应地，在堆有序的二叉树中，每个结点都小于等于它的父结点(如果有的话)。从任意结点向上，我们都能得到一列非递减的元素;从任意结点向下，我们都能得到一列非递增的元素。
特别地:根结点是堆有序的二叉树中的最大结点。</p>
<h1 id="二叉堆表示法">二叉堆表示法</h1>
<p>如果我们用指针来表示堆有序的二叉树，那么每个元素都需要三个指针来找到它的上下结点（父结点和两个子结点各需要一个）。</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/heap.png"
alt="一颗堆有序的完全二叉树" />
<figcaption aria-hidden="true">一颗堆有序的完全二叉树</figcaption>
</figure>
<p>二叉堆是一组能够用堆有序的完全二又树排序的元素，并在数组中按照层级储存(不使用数组的第一个位置)。</p>
<p>一棵大小为<span
class="math inline">\(N\)</span>的完全二叉树的高度为<span
class="math inline">\([LgN]\)</span>。</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/heap-representations.png"
alt="堆的表示" />
<figcaption aria-hidden="true">堆的表示</figcaption>
</figure>
<h1 id="堆的算法">堆的算法</h1>
<p>堆实现的比较和交换方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">less</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> pq[i].compareTo(pq[j]) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="type">Key</span> <span class="variable">t</span> <span class="operator">=</span> pq[i];</span><br><span class="line">    pq[i] = pq[j];</span><br><span class="line">    pq[j] = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="由下至上的堆有序化上浮">由下至上的堆有序化（上浮）</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swin</span><span class="params">(<span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (k &gt; <span class="number">1</span> &amp;&amp; less(k / <span class="number">2</span>, k)) &#123;</span><br><span class="line">        exch(k / <span class="number">2</span>, k);</span><br><span class="line">        k = k / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/swim.png"
alt="由下至上的堆有序化（上浮）" />
<figcaption aria-hidden="true">由下至上的堆有序化（上浮）</figcaption>
</figure>
<h1 id="由上至下的堆有序化下沉">由上至下的堆有序化（下沉）</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sink</span><span class="params">(<span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">2</span> * k &lt;= n) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span> * k;</span><br><span class="line">        <span class="keyword">if</span> (j &lt; n &amp;&amp; less(j, j + <span class="number">1</span>)) j++;</span><br><span class="line">        <span class="keyword">if</span> (!less(k, j)) <span class="keyword">break</span>;</span><br><span class="line">        exch(k, j);</span><br><span class="line">        k = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/sink.png"
alt="由上至下的堆有序化（下沉）" />
<figcaption aria-hidden="true">由上至下的堆有序化（下沉）</figcaption>
</figure>
<h1 id="基于堆的优先队列">基于堆的优先队列</h1>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/heap-ops.png"
alt="堆的操作" />
<figcaption aria-hidden="true">堆的操作</figcaption>
</figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MaxPQ</span>&lt;Key <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;Key&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Key[] pq;   <span class="comment">//基于堆的完全二叉树</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">//存储于pq[1..n]中，pq[0]没有使用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MaxPQ</span><span class="params">(<span class="type">int</span> maxn)</span> &#123;</span><br><span class="line">        pq = (Key[]) <span class="keyword">new</span> <span class="title class_">Comparable</span>[maxn + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Key v)</span> &#123;</span><br><span class="line">        pq[++n] = v;</span><br><span class="line">        swin(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Key <span class="title function_">delMax</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Key</span> <span class="variable">max</span> <span class="operator">=</span> pq[<span class="number">1</span>];</span><br><span class="line">        exch(<span class="number">1</span>, n--);</span><br><span class="line">        pq[n + <span class="number">1</span>] = <span class="literal">null</span>;</span><br><span class="line">        sink(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//辅助方法的实现见前</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">less</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swin</span><span class="params">(<span class="type">int</span> k)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sink</span><span class="params">(<span class="type">int</span> k)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/heap-pq.png"
alt="由上至下的堆有序化（下沉）" />
<figcaption aria-hidden="true">由上至下的堆有序化（下沉）</figcaption>
</figure>
<h1 id="多叉堆">多叉堆</h1>
<h1 id="调整数组大小">调整数组大小</h1>
<h1 id="元素的不可变性">元素的不可变性</h1>
<h1 id="索引优先队列">索引优先队列</h1>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/indexpq-api.png"
alt="由上至下的堆有序化（下沉）" />
<figcaption aria-hidden="true">由上至下的堆有序化（下沉）</figcaption>
</figure>
<h1 id="索引优先队列用例">索引优先队列用例</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Multiway</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(In[] streams)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> streams.length;</span><br><span class="line">        IndexMinPQ&lt;String&gt; pq = <span class="keyword">new</span> <span class="title class_">IndexMinPQ</span>&lt;String&gt;(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">if</span> (!streams[i].isEmpty())</span><br><span class="line">                pq.insert(i, streams[i].readString());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!pq.isEmpty()) &#123;</span><br><span class="line">            StdOut.print(pq.minKey() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> pq.delMin();</span><br><span class="line">            <span class="keyword">if</span> (!streams[i].isEmpty())</span><br><span class="line">                pq.insert(i, streams[i].readString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> args.length;</span><br><span class="line">        In[] streams = <span class="keyword">new</span> <span class="title class_">In</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            streams[i] = <span class="keyword">new</span> <span class="title class_">In</span>(args[i]);</span><br><span class="line">        merge(streams);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="堆排序">堆排序</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span>&#123;</span><br><span class="line">    <span class="type">int</span> n=a.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k=n/<span class="number">2</span>;k&gt;=<span class="number">1</span>;k--)</span><br><span class="line">        sink(a,k,n);</span><br><span class="line">    <span class="keyword">while</span> (n&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        exch(a,<span class="number">1</span>,n--);</span><br><span class="line">        sink(a,<span class="number">1</span>,n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码用sink()方法将a[1]到a[N]的元素排序(sink()被修改过，以a[]和N作为参数)。for循环构造了堆，然后while循环将最大的元素a[1]和a[N]交换并修复了堆，如此重复直到堆变空。将exch()和less()的实现中的索引减一即可得到和其他排序算法一致的实现(将a[0]至a[N-1]排序)。堆排序具体流程示意图显示在下图中。</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/heapsort.png"
alt="堆排序的轨迹（每次下沉后数组内容）" />
<figcaption
aria-hidden="true">堆排序的轨迹（每次下沉后数组内容）</figcaption>
</figure>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/heapsort-trace.png"
alt="堆排序：堆的构造（左）和下沉排序（右）" />
<figcaption
aria-hidden="true">堆排序：堆的构造（左）和下沉排序（右）</figcaption>
</figure>
<h1 id="参考资料">参考资料</h1>
<p>《算法（第4版）》第二章排序2.3快速排序</p>
<p><a href="https://algs4.cs.princeton.edu/">本书网站</a></p>
]]></content>
      <tags>
        <tag>数据结构&amp;算法</tag>
      </tags>
  </entry>
  <entry>
    <title>健康生活</title>
    <url>/article/3b29100a.html</url>
    <content><![CDATA[<p>在未工作之前，总是对工作充满美好的畅想，想象那时我就可以完全独立，能很好地处理工作和生活。等到真的工作后就发现真的很难的啦🤧</p>
<p>work life balance 没那么容易的。</p>
<p>当代年轻人（这个定语可能不对），对于工作生活确实是：自己嗨、自己玩，再晚也不累，一旦工作上班就马上焉了。这没有夸大其谈，确实如此啊！只要到了工作场地，规定时间内，就算任务很轻松，还是会感到累🥱可一旦下班和朋友聚在一起，就很快乐，不知疲倦🥰</p>
<span id="more"></span>
<p>工作之后，我的身体状况就变得很差，主要原因还是久坐、不运动、作息不规律、饮食不健康。这个确实很难搞，因为一天的工作已经很累了，回到家已经很晚了，只能躺在床上玩，没有自律的心思了。要说自己身体最棒的时候，大概就是初中了，作息饮食都很规律，日常学习的压力也不是很大，每天还有要跑操、课件锻炼，身体倍棒😁</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/127090A0AB70734AB51B83BE792C7DEA.6b7iphaa86g0.webp"
alt="127090A0AB70734AB51B83BE792C7DEA" />
<figcaption
aria-hidden="true">127090A0AB70734AB51B83BE792C7DEA</figcaption>
</figure>
<p>现在相比过去在互联网，压力小了很多，时间也充裕多了，是时候自律起来，把身体搞好了！之前在上海封闭了三个月，被迫自己做饭（现在也能炒一些菜了😂），可是就是那段封闭的日子没有锻炼，胖了一些，连锁反应，现在也不想动弹了😖更可怕的是，现在稍微运动一下，肌肉都能酸痛好几天，太痛苦了🐶</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/735C707F8E4927853648C12E51C2F9EB.1f8n2rjfd880.webp"
alt="735C707F8E4927853648C12E51C2F9EB" />
<figcaption
aria-hidden="true">735C707F8E4927853648C12E51C2F9EB</figcaption>
</figure>
<p>从小我就被说是“三分钟热度”，总是想一出，是一出。没有什么能一直坚持热爱下去的😔我还老是犟，觉得自己不是的，但事实往往证明我是。</p>
<p>这次，我一定要坚持。</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/E72C523E1D710821636728E26E06A5D0.57g8vz5q7i00.webp"
alt="E72C523E1D710821636728E26E06A5D0" />
<figcaption
aria-hidden="true">E72C523E1D710821636728E26E06A5D0</figcaption>
</figure>
<p>目前规划是，每天锻炼一小时，跑步、俯卧撑、深蹲、练胳膊、跳、拉伸等</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/FC3CFA36A1B0678E4DBAF3820AD0BDDE.lyvni9dvssw.webp"
alt="FC3CFA36A1B0678E4DBAF3820AD0BDDE" />
<figcaption
aria-hidden="true">FC3CFA36A1B0678E4DBAF3820AD0BDDE</figcaption>
</figure>
]]></content>
      <tags>
        <tag>思考</tag>
        <tag>自己</tag>
      </tags>
  </entry>
  <entry>
    <title>免费试用华为云服务器</title>
    <url>/article/e4e09754.html</url>
    <content><![CDATA[<h1 id="提要">提要</h1>
<p>最近在学Linux，虽然安装了Linux虚拟机，但还是很想体验一下云服务器Linux，这不搜资料，逛网站</p>
<p>近几年”云“可太火了，什么都要上云，近日阿里云盘也正式公测了，直面对抗百度云盘，这就有趣了，因为正面竞争是好事，不仅对于百度或是阿里，我们消费者更能从中得到好处，相反一家独大时往往对整个行业不太好，因为站上最高处时往往会迷茫、同时野心也更大，想要垄断整个市场，甚至。。。</p>
<p>云，现在大厂都在做，中国就有<a
href="https://cn.aliyun.com/">阿里云</a>，<a
href="https://cloud.tencent.com/">腾讯云</a>，<a
href="https://cloud.baidu.com/">百度云</a>，<a
href="https://www.huaweicloud.com/">华为云</a>，<a
href="https://www.didiyun.com/">滴滴云</a>，<a
href="https://www.mtyun.com/">美团云</a>。。。</p>
<h1 id="免费试用">免费试用</h1>
<p>这次免费试用了华为云，因为华为云首页最显眼的地方展示着”免费试用“四个大字，点开后有很多产品可以选择，正好我现在需要Linux云服务器，于是9：30花费0元抢购了1核2G的Linux云服务器，其他还有云数据库，云计算，云。。等等种类可以免费体验。</p>
<p>我也是第一次体验云服务器，正好配合SSH终端学习Linux，说不定还能部署项目玩呢</p>
<p>目前还在体验中，用着还是挺好的，我的需求也不大，最小的已够用了</p>
]]></content>
      <tags>
        <tag>记录</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>内卷时代</title>
    <url>/article/14f1450b.html</url>
    <content><![CDATA[<h1 id="简单聊一聊">简单聊一聊</h1>
<p>都年底了，2021都要过去了，不会还有人不知道啥是内卷吧？
内卷作为今年最火的话题之一，我也来简单聊一聊。</p>
<span id="more"></span>
<h1 id="内卷时代">内卷时代</h1>
<h2 id="定义">定义</h2>
<p>可以说今年，不，应该是近年，全社会、全行业都在内卷。如果还有人对内卷的含义不清楚，我再引用百科里的解释：“内卷，网络流行语，原指一类文化模式达到了某种最终的形态以后，既没有办法稳定下来，也没有办法转变为新的形态，而只能不断地在内部变得更加复杂的现象。”什么意思？看完更懵了，有人说科学就是把你原本能看懂的，解释或定义成你看不懂的，这说法不是完全没有道理的。再解释一遍，“内卷指的是同行间竞相付出更多努力以争夺有限资源，从而导致个体“收益努力比”下降的现象。”更简单的说就是努力的“通货膨胀”，也就是努力没那么“值钱了”。要想取得不多的资源，需要更多的努力了。</p>
<h2 id="我们">我们</h2>
<p>前面解释了什么是内卷，这里我不深究其原因。只简单谈谈，内卷时代下的我们。</p>
<p>内卷时代下的我们都会因此受到不少的影响，你说你只想躺平，哦，那没事了。前面提到了，我们的努力在内卷的大环境下不值钱了，只有卷王才能获得“成功”，不过不是人人都能做卷王的，也并非所有人都想做卷王啊！举个例子吧，算是离我比较近的，就那找工作来说吧。先说结论：对比之前，找工作更难了。大环境是：大学扩招，本科学历一抓一大把，更多人选择考研深造，人数也是在不断增加，因此整体学历上升，然而工作岗位数量也没有很大变化，而且加上疫情原因，甚至还有很多公司在裁员节流。所以说要内卷了，正对了它的定义：资源不多，大家都还差不多，所以工作单位的要求更多了，对于我们的要求更加严格了。原本可能达到6就能达到公司招聘标准，但是现在大批差别不大的学生进入人才市场，竞争为数不多的资源，这时公司只能提高标准，6已经无法满足了，因此我们要做的更多了，被迫的陷入内卷。还有拿考研考公来说，考研是大大大大趋势，怎么说？仅仅从近年考研报名人数就能看出来，再加上各种已经工作一些年的同志们也加入了考研大军，考研已经开始挑战高考的地位了。而且目前的就业形势也不是特别好，这个又怎么说呢？大时代下每个必须有不可替代性（在工作中），否则你不敢想象什么时候厄运会降临在你头上。而且整个社会节奏非常快（尤其是大城市），打工人真的没有那么多退路，真的就是打工人。工作压力、住房压力、婚育压力全面袭来，不是人人都能顶得住的。这时人们渐渐发现，公务员、事业单位这种工作稳定轻松，虽然可能赚的不多的岗位还是挺舒服的。所以呢，现在考公考编的也是一大堆。当然内卷的范围不止这些，各种媒体新闻都能看得到的。</p>
<p>我们怎样面对内卷呢？还是从源头来看，往上看内卷的定义，看见内卷前提了吗？在这：“一类文化模式达到了某种最终的形态以后”，明白了吗？一些。。。一些。。。一些，指的是一些啊，所有人都想选择道路A，导致道路A路上塞满了人，都只能生存在夹缝中，喘息都是困难的，同时其他道路B，道路C，道路。行人寥寥无几，这条路可能没有道路A那么宽敞，那么平坦，那么的“高高在上”，不过难道不是“条条道路通罗马吗”。上面我已经说的很清楚了，现在没人或者说很少人愿意去走其他路途艰辛，道路曲折，漫长且看不到尽头的小路，都挤破了皮的冲向道路A，那能不卷吗？</p>
<p>这里我也不敢说都向着其他道路努力吧，毕竟我也是选的道路A啊！但还是想说，勇敢努力、思考你活着的意义与价值，找到属于你道路，坚定地、昂扬挺胸地走下去，至少自己觉得我做的没错，我为我的选择自豪！</p>
<h1 id="最后">最后</h1>
<p>世界是参差不齐的，贫富差距随着时间开始逐渐显现。还有幸存者偏差的存在，我们能看到的都是一些“幸存者”，也因此我们对一些东西的认知其实是存在问题的。</p>
<p>最后送所有人</p>
<p>为何孤独不可光荣 人只有不完美值得歌颂 谁说污泥满身的不算英雄
——《孤勇者》</p>
]]></content>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>初学Linux</title>
    <url>/article/4416a69b.html</url>
    <content><![CDATA[<h1 id="参考">参考</h1>
<ul>
<li><a
href="https://www.bilibili.com/video/BV1dW411M7xL">https://www.bilibili.com/video/BV1dW411M7xL</a></li>
<li><a
href="https://www.runoob.com/linux/linux-tutorial.html">https://www.runoob.com/linux/linux-tutorial.html</a></li>
</ul>
<h1 id="linux">Linux</h1>
<h1 id="简介">简介</h1>
<p>Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus
Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。</p>
<p>Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX 和
UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。</p>
<p>Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和
64 位硬件。Linux 继承了 Unix
以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p>
<h2 id="linux-的发行版">Linux 的发行版</h2>
<p>Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。</p>
<p>目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch
Linux、SolusOS 等。</p>
<h2 id="linux-应用领域">Linux 应用领域</h2>
<p>今天各种场合都有使用各种 Linux
发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位，通常服务器使用
LAMP（Linux + Apache + MySQL + PHP）或 LNMP（Linux + Nginx+ MySQL +
PHP）组合。</p>
<span id="more"></span>
<h1 id="linux-系统启动过程"><a
href="https://www.runoob.com/linux/linux-system-boot.html">Linux
系统启动过程</a></h1>
<h2 id="运行级别">运行级别</h2>
<p>Linux系统有7个运行级别(runlevel)：</p>
<ul>
<li>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</li>
<li>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆</li>
<li>运行级别2：多用户状态(没有NFS)</li>
<li>运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式</li>
<li>运行级别4：系统未使用，保留</li>
<li>运行级别5：X11控制台，登陆后进入图形GUI模式</li>
<li>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</li>
</ul>
<p><strong>切换运行级别</strong></p>
<p><code>init n</code></p>
<p><strong>找回root密码</strong></p>
<p>重启 -&gt; 3 秒之内要按一下回车，出现如下界面 -&gt; 然后输入e -&gt;
看到新界面，选中第二行（编辑内核） -&gt; 在这输入<code>1</code>回车
-&gt; 再次输入b，进入单用户模式</p>
<p>使用passwd修改密码</p>
<h1 id="安装">安装</h1>
<p>宿主机系统：<code>Windows 10</code></p>
<p>虚拟机软件：<a
href="https://my.vmware.com/cn/web/vmware/downloads/info/slug/desktop_end_user_computing/vmware_workstation_pro/16_0"><code>VMware Workstation 16</code></a></p>
<p><code>CentOS</code> 操作系统 <code>ISO</code> 镜像：<a
href="http://mirrors.aliyun.com/centos/7/isos/x86_64/">CentOS 7</a></p>
<p>SSH终端软件：<a
href="https://mobaxterm.mobatek.net/"><code>MobaXterm</code></a></p>
<h2 id="参考-1">参考</h2>
<p>B站视频：<a
href="https://www.bilibili.com/video/BV1bA411b7vs">https://www.bilibili.com/video/BV1bA411b7vs</a></p>
<p>视频配套（windows安装）：<a
href="https://mp.weixin.qq.com/s/onVwwEQ1DAwbvK7qS2YNxg">https://mp.weixin.qq.com/s/onVwwEQ1DAwbvK7qS2YNxg</a></p>
<p>csdn：<a
href="https://blog.csdn.net/java_xinshou1/article/details/100010099">https://blog.csdn.net/java_xinshou1/article/details/100010099</a>、<a
href="https://blog.csdn.net/qq_40950957/article/details/80467513">https://blog.csdn.net/qq_40950957/article/details/80467513</a></p>
<p>菜鸟教程：<a
href="https://www.runoob.com/linux/linux-install.html">https://www.runoob.com/linux/linux-install.html</a></p>
<p>CentOS：http://mirrors.aliyun.com/centos/7/isos/x86_64/</p>
<h1 id="vmtools">VMTools</h1>
<p>可以建立共享目录，剪切板共享</p>
<h1 id="linux目录结构">Linux目录结构</h1>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2014/06/d0c50-linux2bfile2bsystem2bhierarchy.jpg" /></p>
<p><a
href="https://www.runoob.com/linux/linux-system-contents.html">https://www.runoob.com/linux/linux-system-contents.html</a></p>
<h1 id="linux-vivim">Linux vi/vim</h1>
<p>所有的 Unix Like 系统都会内建 vi
文书编辑器，其他的文书编辑器则不一定会存在。</p>
<p>但是目前我们使用比较多的是 vim 编辑器。</p>
<p>vim
具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。</p>
<h2 id="vivim-的使用">vi/vim 的使用</h2>
<p>基本上 vi/vim 共分为三种模式，分别是<strong>命令模式（Command
mode）</strong>，<strong>输入模式（Insert
mode）</strong>和<strong>底线命令模式（Last line mode）</strong>。
这三种模式的作用分别是：</p>
<h2 id="命令模式">命令模式：</h2>
<p>用户刚刚启动 vi/vim，便进入了命令模式。</p>
<p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p>
<p>以下是常用的几个命令：</p>
<ul>
<li><strong>i</strong> 切换到输入模式，以输入字符。</li>
<li><strong>x</strong> 删除当前光标所在处的字符。</li>
<li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。</li>
</ul>
<p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p>
<p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p>
<h2 id="输入模式">输入模式</h2>
<p>在命令模式下按下i就进入了输入模式。</p>
<p>在输入模式中，可以使用以下按键：</p>
<ul>
<li><strong>字符按键以及Shift组合</strong>，输入字符</li>
<li><strong>ENTER</strong>，回车键，换行</li>
<li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li>
<li><strong>DEL</strong>，删除键，删除光标后一个字符</li>
<li><strong>方向键</strong>，在文本中移动光标</li>
<li><strong>HOME</strong>/<strong>END</strong>，移动光标到行首/行尾</li>
<li><strong>Page Up</strong>/<strong>Page Down</strong>，上/下翻页</li>
<li><strong>Insert</strong>，切换光标为输入/替换模式，光标将变成竖线/下划线</li>
<li><strong>ESC</strong>，退出输入模式，切换到命令模式</li>
</ul>
<h2 id="底线命令模式">底线命令模式</h2>
<p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p>
<p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p>
<p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p>
<ul>
<li>q 退出程序</li>
<li>w 保存文件</li>
</ul>
<p>按ESC键可随时退出底线命令模式。</p>
<h2 id="快捷键">快捷键</h2>
<table>
<colgroup>
<col style="width: 21%" />
<col style="width: 78%" />
</colgroup>
<thead>
<tr class="header">
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>+</td>
<td>光标移动到非空格符的下一行</td>
</tr>
<tr class="even">
<td>-</td>
<td>光标移动到非空格符的上一行</td>
</tr>
<tr class="odd">
<td>dd</td>
<td>删除游标所在的那一整行(常用)</td>
</tr>
<tr class="even">
<td>ndd</td>
<td>n 为数字。删除光标所在的向下 n 行，例如 5dd 则是删除 5 行
(常用)</td>
</tr>
<tr class="odd">
<td>yy</td>
<td>复制游标所在的那一行(常用)</td>
</tr>
<tr class="even">
<td>nyy</td>
<td>n 为数字。复制光标所在的向下 n 行，例如 5yy 则是复制 5 行(常用)</td>
</tr>
<tr class="odd">
<td>p</td>
<td>粘贴</td>
</tr>
<tr class="even">
<td>/word</td>
<td>向光标之下搜索</td>
</tr>
<tr class="odd">
<td>?/word</td>
<td>向光标之上搜索</td>
</tr>
<tr class="even">
<td>n</td>
<td>向下找下一个匹配</td>
</tr>
<tr class="odd">
<td>N</td>
<td>向下找上一个匹配</td>
</tr>
<tr class="even">
<td>:set nu</td>
<td>显示行号</td>
</tr>
<tr class="odd">
<td>:set nonu</td>
<td>与 set nu 相反，为取消行号！</td>
</tr>
<tr class="even">
<td>G</td>
<td>移动到这个档案的最后一行(常用)</td>
</tr>
<tr class="odd">
<td>nG</td>
<td>n 为数字。移动到这个档案的第 n 行。可配合 :set nu</td>
</tr>
<tr class="even">
<td>gg</td>
<td>移动到这个档案的第一行，相当于 1G 啊！ (常用)</td>
</tr>
<tr class="odd">
<td>n<Enter></td>
<td>n 为数字。光标向下移动 n 行(常用)</td>
</tr>
<tr class="even">
<td>u</td>
<td>复原前一个动作。(常用)</td>
</tr>
<tr class="odd">
<td>[Ctrl]+r</td>
<td>重做上一个动作。(常用)</td>
</tr>
<tr class="even">
<td>[Ctrl] + [f]</td>
<td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td>
</tr>
<tr class="odd">
<td>[Ctrl] + [b]</td>
<td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td>
</tr>
<tr class="even">
<td>0 或功能键[Home]</td>
<td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td>
</tr>
<tr class="odd">
<td>$ 或功能键[End]</td>
<td>移动到这一行的最后面字符处(常用)</td>
</tr>
</tbody>
</table>
<h1 id="关机重启命令">关机重启命令</h1>
<p><strong>shutdown</strong></p>
<ul>
<li>shutdown -h now 立即关机</li>
<li>shutdown -h 1 一分钟后关机</li>
<li>shutdown -r now 立即重启</li>
</ul>
<p><strong>halt</strong></p>
<p>​ 等同于直接关机</p>
<p><strong>reboot</strong></p>
<p>​ 重启系统</p>
<p><strong>sync</strong></p>
<p>​ 把内存数据同步到磁盘中</p>
<h1 id="帮助指令">帮助指令</h1>
<p><code>man 指令</code></p>
<p><code>help 指令</code></p>
<h1 id="用户管理">用户管理</h1>
<p><strong>用户注销</strong></p>
<p><code>logout</code></p>
<p><a
href="https://www.runoob.com/linux/linux-user-manage.html">https://www.runoob.com/linux/linux-user-manage.html</a></p>
<p><strong>添加用户</strong></p>
<p><code>useradd 选项 用户名</code></p>
<p><code>-d</code>指定用户主目录</p>
<p><code>-g</code>指定用户组</p>
<p><strong>指定/修改密码</strong></p>
<p><code>passwd 选项 用户名</code></p>
<p><strong>删除用户</strong></p>
<p><code>userdel 选项 用户名</code></p>
<p>带选项<code>-r</code>则把用户的主目录一起删除</p>
<p><strong>修改用户</strong></p>
<p><code>usermod 选项 用户名</code></p>
<p>选项与<code>useradd</code>一样</p>
<p><strong>查询用户</strong></p>
<p><code>id 用户名</code></p>
<p><strong>切换用户</strong></p>
<p><code>su 用户名</code></p>
<p>高权限切换低权限不用输密码</p>
<p>当需要返回原来用户时使用<code>exit</code></p>
<p><strong>查看当前用户</strong></p>
<p><code>who am i</code></p>
<h2 id="用户组">用户组</h2>
<p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。</p>
<p><strong>创建组</strong></p>
<p><code>groupadd 选项 组名</code></p>
<p><strong>删除组</strong></p>
<p><code>groupdel 组名</code></p>
<p><strong>修改用户组</strong></p>
<p><code>usermod -g 组名 用户名</code></p>
<h1 id="与用户有关的系统文件">与用户有关的系统文件</h1>
<p>/etc/passwd, /etc/shadow, /etc/group</p>
<p><strong>/etc/passwd</strong></p>
<p>Linux系统中的每个用户都在/etc/passwd文件中有一个对应的记录行，它记录了这个用户的一些基本属性。</p>
<p>这个文件对所有用户都是可读的。</p>
<p><code>用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</code></p>
<p><strong>/etc/shadow</strong></p>
<p>存放加密后的密码。</p>
<p><code>登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</code></p>
<p><strong>/etc/group</strong></p>
<p>存放用户组的所有信息.</p>
<p><code>组名:口令:组标识号:组内用户列表</code></p>
<h1 id="文件基本属性类">文件基本属性类</h1>
<p>在 Linux 中第一个字符代表这个文件是目录、文件或链接文件等等。</p>
<ul>
<li>当为 <strong>d</strong> 则是目录</li>
<li>当为 <strong>-</strong> 则是文件；</li>
<li>若是 <strong>l</strong> 则表示为链接文档(link file)；</li>
<li>若是 <strong>b</strong>
则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</li>
<li>若是 <strong>c</strong>
则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</li>
</ul>
<p>接下来的字符中，以三个为一组，且均为 <strong>rwx</strong>
的三个参数的组合。其中， <strong>r</strong> 代表可读(read)、
<strong>w</strong> 代表可写(write)、 <strong>x</strong>
代表可执行(execute)。
要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号
<strong>-</strong> 而已。</p>
<figure>
<img data-src="https://www.runoob.com/wp-content/uploads/2014/06/file-llls22.jpg"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<p>每个文件的属性由左边第一部分的 10 个字符来确定（如下图）。</p>
<figure>
<img data-src="https://www.runoob.com/wp-content/uploads/2014/06/363003_1227493859FdXT.png"
alt="363003_1227493859FdXT" />
<figcaption aria-hidden="true">363003_1227493859FdXT</figcaption>
</figure>
<p>从左至右用 <strong>0-9</strong> 这些数字来表示。</p>
<p>第 <strong>0</strong> 位确定文件类型，第 <strong>1-3</strong>
位确定属主（该文件的所有者）拥有该文件的权限。</p>
<p>第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p>
<p>目录显示4096</p>
<h1 id="权限管理">权限管理</h1>
<p><strong>文件目录所有者</strong></p>
<p>默认用户创建文件后，文件所有组即为用户所在组</p>
<p><strong>查看所有者</strong></p>
<ul>
<li><p>groupadd police：创建police组</p></li>
<li><p>useradd tom -g police tom：创建tom进police组</p></li>
<li><p>passwd tom：修改/设置tom密码</p></li>
<li><p>切换到tom用户</p></li>
<li><p>touch ok.txt：创建ok.txt文件</p></li>
<li><p>ls -ahl：查看当前目录所有者</p></li>
</ul>
<p><strong>修改所有者</strong></p>
<ul>
<li>chown tom apple.txt：修改apple.txt文件所有者为tom，但组没变</li>
<li>chown -R tom kkk：将kkk目录下所有递归所有者改为tom</li>
<li>chown user/group ：同时修改所有者和所在组</li>
</ul>
<p><strong>修改文件所在组</strong></p>
<ul>
<li>chgrp police orange.txt：将orange.txt文件所在组修改为police组</li>
<li>chgrp -R police kkk：将kkk目录下所有递归所在组改为police</li>
</ul>
<p><strong>其他组</strong></p>
<p>除文件的所有者和所在组的用户外，系统的其他用户都是文件的其他组</p>
<p><strong>修改权限</strong></p>
<p><strong>chmod符号</strong></p>
<ul>
<li>u：所有者；g：所在组；o：其他人；a：所有人</li>
<li>chmod u=rwx,g=rx,o=rw
abc.txt：对于abc.txt，所有者rwx，所在组rx，其他人rw</li>
<li>chmod u-x,g+w abc.txt：对于abc.txt，所有者减去x，所在组加上w</li>
<li>chmod a+w：对所有人加上w</li>
</ul>
<p><strong>chmod数字</strong></p>
<p>各权限的分数对照表如下：</p>
<ul>
<li>r:4</li>
<li>w:2</li>
<li>x:1</li>
</ul>
<p>chmod 754 abc.txt：修改权限为rwx r-x r--</p>
<p>权限修改后需要重新登录才能生效</p>
<h1 id="文件目录类指令">文件目录类指令</h1>
<h2 id="处理目录的常用命令">处理目录的常用命令</h2>
<p>接下来我们就来看几个常见的处理目录的命令吧：</p>
<ul>
<li>ls（英文全拼：list files）: 列出目录及文件名
<ul>
<li>-a ：全部的文件，连同隐藏文件( 开头为 . 的文件)
一起列出来(常用)</li>
<li>-d ：仅列出目录本身，而不是列出目录内的文件数据(常用)</li>
<li>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</li>
<li>-al ~：将家目录下的所有文件列出来(含属性与隐藏档)</li>
</ul></li>
<li>cd（英文全拼：change directory）：切换目录
<ul>
<li>cd ~：回到家目录</li>
<li>cd ..：回到上级目录</li>
<li>cd ./：当前目录下的</li>
</ul></li>
<li>pwd（英文全拼：print work directory）：显示目前的目录</li>
<li>mkdir（英文全拼：make directory）：创建一个新的目录
<ul>
<li>默认只能一级一级创建</li>
<li>-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！</li>
</ul></li>
<li>rmdir（英文全拼：remove directory）：删除一个空的目录
<ul>
<li>不能删除非空目录</li>
<li>rm -rf 删除非空目录</li>
</ul></li>
<li>cp（英文全拼：copy file）: 复制文件或目录
<ul>
<li>cp 来源档(source) 目标档(destination)</li>
<li>cp -r：递归复制</li>
<li>：强制覆盖，不会提示</li>
</ul></li>
<li>rm（英文全拼：remove）: 删除文件或目录
<ul>
<li>rm -rf：删除目录</li>
<li>rm -r：递归删除</li>
<li>rm -f：删除文件不提示</li>
<li>rm -i：提示</li>
</ul></li>
<li>mv（英文全拼：move file）: 移动文件与目录，或修改文件与目录的名称
<ul>
<li>mv source destination：移动/重命名</li>
<li>mv -f：强制移动，不提示</li>
<li>mv -i：提示</li>
<li>mv -u：更新则更新</li>
</ul></li>
<li>touch ：Linux
touch命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。（可一次性创建多个文件）</li>
</ul>
<h2 id="文件内容查看">文件内容查看</h2>
<p>Linux系统中使用以下命令来查看文件的内容：</p>
<ul>
<li>cat 由第一行开始显示文件内容
<ul>
<li>只读方式打开</li>
<li>cat -n：查看显示行号</li>
<li>cat file | more：分页浏览，空格下一页</li>
</ul></li>
<li>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！
<ul>
<li></li>
</ul></li>
<li>nl 显示的时候，顺道输出行号！</li>
<li>more 一页一页的显示文件内容
<ul>
<li>空格：下一页</li>
<li>enter：下一行</li>
<li>b：上一页</li>
<li>q：立即结束浏览</li>
</ul></li>
<li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！
<ul>
<li>快捷键与more类似</li>
</ul></li>
<li>head 只看头几行
<ul>
<li>head -n：头n行</li>
</ul></li>
<li>tail 只看尾巴几行
<ul>
<li>tail -n：尾n行</li>
</ul></li>
</ul>
<p><strong>"&gt;"指令与"&gt;&gt;"指令</strong></p>
<ul>
<li>"&gt;"覆盖，不存在就创建</li>
<li>ls -l &gt; a.txt</li>
<li>"&gt;&gt;"追加</li>
<li>ls -l &gt;&gt; b.txt</li>
</ul>
<p><strong>echo</strong></p>
<ul>
<li>字符串输出</li>
<li>echo $PATH：输出环境变量</li>
</ul>
<p><strong>ln</strong></p>
<ul>
<li>连接：硬连接；软连接（快捷方式）</li>
<li>ln -s 文件或目录 链接</li>
<li>删除链接 rm -rf 链接</li>
<li>pwd查看时仍是当前目录</li>
</ul>
<p><strong>history</strong></p>
<ul>
<li>查看已执行的指令</li>
<li>history n：最近n条</li>
<li>!n：执行历史编号n的指令</li>
</ul>
<h1 id="时间日期类">时间日期类</h1>
<p><strong>date</strong></p>
<ul>
<li>data：当前年月日 星期 时分秒</li>
<li>data "+%Y-%m-%d"：当前年月日</li>
<li>date "+%Y年%m月%d日 %H:%M:%S"：当前年月日时分秒</li>
<li>data -s：设置时间</li>
</ul>
<p><strong>cal</strong></p>
<ul>
<li>cal：当月日历</li>
<li>cal 年：某年日历</li>
</ul>
<h1 id="搜索查找类">搜索查找类</h1>
<p><strong>find</strong></p>
<ul>
<li>find /home -name hello.txt：在home目录查找名字为hello.txt文件</li>
<li>find /opt -user nobody：在opt目录下查找用户名为nobody文件</li>
<li>find / -size +20M：根目录下查找大于20M的文件</li>
<li>find /home *.txt：查找home目录下txt文件</li>
</ul>
<p><strong>locate</strong></p>
<p>ocate 与 find 不同: find 是去硬盘找，locate 只在 /var/lib/slocate
资料库中找。</p>
<p>locate 的速度比 find
快，它并不是真的查找，而是查数据库，一般文件数据库在
/var/lib/slocate/slocate.db 中，所以 locate
的查找并不是实时的，而是以数据库的更新为准，一般是系统自己维护，也可以手工升级数据库
，命令为：updatedb</p>
<ul>
<li>locate 文件名：查找文件</li>
</ul>
<p><strong>grep</strong></p>
<p>grep 命令用于查找文件里符合条件的字符串。</p>
<ul>
<li>与|一起使用</li>
<li>cat hello.txt | grep hello：查找</li>
<li>cat hello.txt | grep -n hello：查找并显示行号</li>
</ul>
<h1 id="压缩和解压缩类">压缩和解压缩类</h1>
<p><strong>gzip</strong></p>
<ul>
<li>压缩，不保留原文件</li>
</ul>
<p><strong>gunzip</strong></p>
<ul>
<li>解压</li>
</ul>
<p><strong>zip</strong></p>
<ul>
<li>zip -r mypackage.zip ./test/：将/test/目录解压到 mypackage.zip</li>
</ul>
<p><strong>unzip</strong></p>
<ul>
<li>unzip -d ./xm/mypackage.zip：将mypackage.zip解压到xm目录下</li>
</ul>
<p><strong>tar</strong></p>
<ul>
<li>tar -zcvf a.tar.gz a.txt b.txt：将a.txt和b.txt压缩到a.tar.gz</li>
<li>tar -zcvf myhome.tar.gz /home/：对整个文件/目录压缩</li>
<li>tar -zxvf a.tar.gz：解压到当前目录</li>
<li>tar -zxvf myhome.tar -C /opt/：解压指定目录，目录要存在</li>
</ul>
<h1 id="任务调度">任务调度</h1>
<p>Linux crontab是用来定期执行程序的命令。</p>
<p>当安装完成操作系统之后，默认便会启动此任务调度命令。</p>
<p>crond
命令每分锺会定期检查是否有要执行的工作，如果有要执行的工作便会自动执行该工作。</p>
<p><strong>注意：</strong>新创建的 cron 任务，不会马上执行，至少要过 2
分钟后才可以，当然你可以重启 cron 来马上执行。</p>
<p>而 linux 任务调度的工作主要分为以下两类：</p>
<ul>
<li>1、系统执行的工作：系统周期性所要执行的工作，如备份系统数据、清理缓存</li>
<li>2、个人执行的工作：某个用户定期要做的工作，例如每隔10分钟检查邮件服务器是否有新信，这些工作可由每个用户自行设置</li>
</ul>
<p>如果是简单的任务，可以不用写脚本，直接在crontab中加入任务即可</p>
<p>如果任务复杂，需要写脚本</p>
<p><strong>语法</strong></p>
<p>crontab [选项]</p>
<p><strong>参数说明：</strong></p>
<ul>
<li>-e : 执行文字编辑器来设定时程表</li>
<li>-r : 删除目前的时程表</li>
<li>-l : 列出目前的时程表</li>
</ul>
<p><strong>时间格式如下：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*    *    *    *    *</span><br><span class="line">-    -    -    -    -</span><br><span class="line">|    |    |    |    |</span><br><span class="line">|    |    |    |    +----- 星期中星期几 (0 - 6) (星期天 为0)</span><br><span class="line">|    |    |    +---------- 月份 (1 - 12) </span><br><span class="line">|    |    +--------------- 一个月中的第几天 (1 - 31)</span><br><span class="line">|    +-------------------- 小时 (0 - 23)</span><br><span class="line">+------------------------- 分钟 (0 - 59)</span><br></pre></td></tr></table></figure>
<p><strong>例：</strong></p>
<ul>
<li><p>crontab -e</p></li>
<li><p><em>/1 </em> * * * ls -l /etc &gt;&gt; /tmp/to.txt</p></li>
<li><p>保存退出</p></li>
<li><p>每一分钟执行一次追加到/tmp/to.txt</p></li>
<li><p>cd /home/</p></li>
<li><p>vim mytask.sh：编辑脚本mytask.sh</p></li>
<li><p>date &gt;&gt; /tmp/mydate</p></li>
<li><p>chmod 744 mytask.sh：给mytask.sh执行权限</p></li>
<li><p>crontab -e</p></li>
<li><p>加上 <em>/1 </em> * * * /home/mytask.sh</p></li>
<li><p>cd /home/</p></li>
<li><p>vim mytask2.sh：编辑脚本mytask2.sh</p></li>
<li><p>date &gt;&gt; /tmp/mycal</p></li>
<li><p>cal &gt;&gt;/tmp/mycal</p></li>
<li><p>chmod 744 mytask2.sh：给mytask2.sh执行权限</p></li>
<li><p>crontab -e</p></li>
<li><p>加上 <em>/1 </em> * * * /home/mytask2.sh</p></li>
<li><p>完成</p></li>
</ul>
<p>下面再看看几个具体的例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0 */2 * * * /sbin/service httpd restart  意思是每两个小时重启一次apache </span><br><span class="line"></span><br><span class="line">50 7 * * * /sbin/service sshd start  意思是每天7：50开启ssh服务 </span><br><span class="line"></span><br><span class="line">50 22 * * * /sbin/service sshd stop  意思是每天22：50关闭ssh服务 </span><br><span class="line"></span><br><span class="line">0 0 1,15 * * fsck /home  每月1号和15号检查/home 磁盘 </span><br><span class="line"></span><br><span class="line">1 * * * * /home/bruce/backup  每小时的第一分执行 /home/bruce/backup这个文件 </span><br><span class="line"></span><br><span class="line">00 03 * * 1-5 find /home &quot;*.xxx&quot; -mtime +4 -exec rm &#123;&#125; \;  每周一至周五3点钟，在目录/home中，查找文件名为*.xxx的文件，并删除4天前的文件。</span><br><span class="line"></span><br><span class="line">30 6 */10 * * ls  意思是每月的1、11、21、31日是的6：30执行一次ls命令</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>当程序在你所指定的时间执行后，系统会发一封邮件给当前的用户，显示该程序执行的内容，若是你不希望收到这样的邮件，请在每一行空一格之后加上
<strong>&gt; /dev/null 2&gt;&amp;1</strong> 即可，如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">20 03 * * * . /etc/profile;/bin/sh /var/www/runoob/test.sh &gt; /dev/null 2&gt;&amp;1 </span><br></pre></td></tr></table></figure>
<h1 id="磁盘管理">磁盘管理</h1>
<p>Linux磁盘管理好坏直接关系到整个系统的性能问题。</p>
<p>Linux磁盘管理常用三个命令为df、du和fdisk。</p>
<ul>
<li><p>df：列出文件系统的整体磁盘使用量</p>
<ul>
<li><p>df：将系统内所有的文件系统列出来</p></li>
<li><p>df -h：将容量结果以易读的容量格式显示出来</p></li>
</ul></li>
<li><p>du：检查磁盘空间使用量</p>
<ul>
<li>du：只列出当前目录下的所有文件夹容量（包括隐藏文件夹）</li>
<li>du -a：将文件的容量也列出来</li>
<li>du -ach --max-depth=1 /opt：查询opt目录磁盘占用情况，深度为1</li>
<li>ls -l /home | grep "^-" | wc
-l：统计home目录下，以”-“打头的文件（文件个数）</li>
<li>ls -l /home | grep "^d" | wc
-l：统计home目录下，以”d“打头的文件（目录个数）</li>
<li>ls -lR /home | grep "^-" | wc
-l：统计home目录下（包括子目录下），以”-“打头的文件（文件个数）</li>
<li>ls -lR /home | grep "^d" | wc
-l：统计home目录下（包括子目录下），以”d“打头的文件（目录个数）</li>
</ul></li>
<li><p>fdisk：用于磁盘分区</p></li>
<li><p>mkfs：格式化磁盘</p></li>
</ul>
<p>tree</p>
<ul>
<li>yum install tree</li>
<li>树状显示目录文件</li>
</ul>
<p>分区 - 文件系统</p>
<ul>
<li>lsblk -f：查看分区和挂载情况</li>
<li>lsblk ：还可以查看大小</li>
</ul>
<p>磁盘挂载使用 <code>mount</code> 命令，卸载使用 <code>umount</code>
命令。</p>
<h1 id="进程管理">进程管理</h1>
<p><strong>ps</strong></p>
<p>ps （英文全拼：process status）命令用于显示当前进程的状态，类似于
windows 的任务管理器。</p>
<p><strong>参数</strong>：</p>
<ul>
<li>ps 的参数非常多, 在此仅列出几个常用的参数并大略介绍含义</li>
<li>-A 列出所有的进程</li>
<li>-w 显示加宽可以显示较多的资讯</li>
<li>-au 显示较详细的资讯</li>
<li>-aux 显示所有包含其他使用者的行程</li>
</ul>
<p>au(x) 输出格式 :</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND</span><br></pre></td></tr></table></figure>
<ul>
<li>USER: 行程拥有者</li>
<li>PID: pid</li>
<li>%CPU: 占用的 CPU 使用率</li>
<li>%MEM: 占用的记忆体使用率</li>
<li>VSZ: 占用的虚拟记忆体大小</li>
<li>RSS: 占用的记忆体大小</li>
<li>TTY: 终端的次要装置号码 (minor device number of tty)</li>
<li>STAT: 该行程的状态:
<ul>
<li>D: 无法中断的休眠状态 (通常 IO 的进程)</li>
<li>R: 正在执行中</li>
<li>S: 静止状态</li>
<li>T: 暂停执行</li>
<li>Z: 不存在但暂时无法消除（僵尸进程）</li>
<li>W: 没有足够的记忆体分页可分配</li>
<li>&lt;: 高优先序的行程</li>
<li>N: 低优先序的行程</li>
<li>L: 有记忆体分页分配并锁在记忆体内 (实时系统或捱A I/O)</li>
</ul></li>
<li>START: 行程开始时间</li>
<li>TIME: 执行的时间</li>
<li>COMMAND:所执行的指令</li>
</ul>
<p>ps -aux | grep sshd：查看关键字有sshd的进程</p>
<p>ps -ef | more：查看父进程ppid</p>
<p>pstree -u：树状显示进程</p>
<p><strong>top</strong></p>
<ul>
<li>top命令用于实时显示 process 的动态。使用权限：所有使用者。</li>
<li>top -u 用户名：查看给用户的进程</li>
<li>top -d 时间：默认3秒刷新一次</li>
<li>top -n 5：刷新5次则退出</li>
</ul>
<p><strong>kill</strong></p>
<p>kill 命令用于删除执行中的程序或工作。</p>
<p><strong>语法</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill [-s &lt;信息名称或编号&gt;][程序]　或　kill [-l &lt;信息编号&gt;]</span><br></pre></td></tr></table></figure>
<p><strong>参数说明</strong>：</p>
<ul>
<li>-l <信息编号> 　若不加<信息编号>选项，则 -l
参数会列出全部的信息名称。</li>
<li>-s <信息名称或编号> 　指定要送出的信息。</li>
<li>[程序] 　[程序]可以是程序的PID或是PGID，也可以是工作编号。</li>
</ul>
<p>使用 kill -l 命令列出所有可用信号。</p>
<p>最常用的信号是：</p>
<ul>
<li>1 (HUP)：重新加载进程。</li>
<li>9 (KILL)：杀死一个进程。</li>
<li>15 (TERM)：正常停止一个进程。</li>
</ul>
<p><strong>服务</strong></p>
<p><a
href="https://blog.csdn.net/u012486840/article/details/53161574?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.baidujs&amp;dist_request_id=1328696.39.16166599641468569&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.baidujs">参考</a></p>
<p><strong>systemctl</strong></p>
<p>#启动网络服务</p>
<ul>
<li>systemctl start network.service</li>
</ul>
<p>#停止网络服务</p>
<ul>
<li>systemctl stop network.service</li>
</ul>
<p>#重启网络服务</p>
<ul>
<li>systemctl restart network.service</li>
</ul>
<p>#查看网络服务状态</p>
<ul>
<li>systemctl status network.serivce</li>
</ul>
<p><strong>查看服务</strong></p>
<p>setup</p>
<ul>
<li>图形终端，查看服务</li>
</ul>
<p>ls -l /etc/init.d/</p>
<ul>
<li>终端使用，查看服务</li>
</ul>
<p><strong>服务级别</strong></p>
<p>chkconfig</p>
<ul>
<li>chkconfig -level5 sshd off：运行级别为5时sshd关闭</li>
<li>chkconfig -level5 firewalld off：运行级别为5时防火墙关闭</li>
<li>chkconfig firewalld off：所有运行级别下关闭防火墙</li>
<li>chkconfig firewalld on：所有运行级别下开启防火墙</li>
<li>重启后生效</li>
</ul>
<p><strong>telnet</strong></p>
<p>telnet命令用于远端登入。</p>
<p>执行telnet指令开启终端机阶段作业，并登入远端主机。</p>
<p><strong>实例</strong></p>
<p>登录远程主机</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">telnet 192.168.0.5</span> </span><br><span class="line"></span><br><span class="line">//登录IP为 192.168.0.5 的远程主机</span><br></pre></td></tr></table></figure>
<p><strong>netstat</strong></p>
<p>netstat 命令用于显示网络状态。</p>
<p>利用 netstat 指令可让你得知整个 Linux 系统的网络情况。</p>
<ul>
<li>netstat -anp | more：查看全部服务</li>
</ul>
<h1 id="包管理">包管理</h1>
<p><strong>rpm</strong></p>
<p>rpm 命令用于管理套件。</p>
<p>rpm（英文全拼：redhat package manager） 原本是 Red Hat Linux
发行版专门用来管理 Linux 各项套件的程序，由于它遵循 GPL
规则且功能强大方便，因而广受欢迎。逐渐受到其他发行版的采用。RPM
套件管理方式的出现，让 Linux 易于安装，升级，间接提升了 Linux
的适用度。</p>
<ul>
<li>rpm -qa | grep firefox：查询火狐</li>
<li>rpm -qa：查询所有</li>
<li>rpm -q firefox：查询火狐</li>
<li>rpm -qi firefox：查询软件包信息</li>
<li>rpm -ql firefox：查询火狐安装了哪些文件/位置</li>
<li>rpm -qf /etc/passwd：查询/etc/passwd属于那个软件包</li>
<li>rpm -e firefox：卸载火狐</li>
<li>如果存在依赖性会提示，不推荐强制删除</li>
</ul>
<p><strong>安装</strong></p>
<ul>
<li>找到要安装的rpm包，挂载centos的ios文件，在/media/下找</li>
<li>移动到 /opt/下</li>
<li>rpm -ivh rpm软件包</li>
</ul>
<p><strong>yum</strong></p>
<p>yum（ Yellow dog Updater, Modified）是一个在 Fedora 和 RedHat 以及
SUSE 中的 Shell 前端软件包管理器。</p>
<p>基于 RPM 包管理，能够从指定的服务器自动下载 RPM
包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。</p>
<p>yum
提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。</p>
<p><strong>yum常用命令</strong></p>
<p>1、列出所有可更新的软件清单命令：<strong>yum
check-update</strong></p>
<p>2、更新所有软件命令：<strong>yum update</strong></p>
<p>3、仅安装指定的软件命令：<strong>yum install
<package_name></strong></p>
<p>4、仅更新指定的软件命令：<strong>yum update
<package_name></strong></p>
<p>5、列出所有可安裝的软件清单命令：<strong>yum list</strong></p>
<p>6、删除软件包命令：<strong>yum remove <package_name></strong></p>
<p>7、查找软件包命令：<strong>yum search <keyword></strong></p>
<p>8、清除缓存命令:</p>
<ul>
<li><strong>yum clean packages</strong>: 清除缓存目录下的软件包</li>
<li><strong>yum clean headers</strong>: 清除缓存目录下的 headers</li>
<li><strong>yum clean oldheaders</strong>: 清除缓存目录下旧的
headers</li>
<li><strong>yum clean, yum clean all (= yum clean packages; yum clean
oldheaders)</strong> :清除缓存目录下的软件包及旧的 headers</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>初级排序算法</title>
    <url>/article/2e8ba7ec.html</url>
    <content><![CDATA[<p>作为对排序算法领域的第一次探索，我们将学习两种初级的排序算法以及其中一种的一个变体。深人学习这些相对简单的算法的原因在于:第一，我们将通过它们熟悉一些术语和简单的技巧；第二，这些简单的算法在某些情况下比我们之后将会讨论的复杂算法更有效；第三，以后你会发现，它们有助于我们改进复杂算法的效率。那么开始吧！</p>
<p><a
href="https://wnhyang.github.io/article/a444b428.html">目录</a></p>
<span id="more"></span>
<h1 id="排序算法类的模板">排序算法类的模板</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="comment">//将a[]按升序排列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span> &#123;</span><br><span class="line">        <span class="comment">/*请见本文算法2.1、算法2.2、算法2.3*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">less</span><span class="params">(Comparable v, Comparable w)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(Comparable[] a, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">Comparable</span> <span class="variable">t</span> <span class="operator">=</span> a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在单行打印数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(Comparable[] a)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++)</span><br><span class="line">            print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试数组元素是否有序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isSort</span><span class="params">(Comparable[] a)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; a.length; i++)</span><br><span class="line">            <span class="keyword">if</span> (less(a[i], a[i - <span class="number">1</span>]))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的print()、println()为自定义的静态方法，不再详细说明。</p>
<h1 id="选择排序">选择排序</h1>
<p>一种最简单的排序算法是这样的:
首先，找到数组中最小的那个元素，其次，将它和数组的第个元素交换位置
(如果第一个元素就是最小元素那么它就和自己交换)。再次，在剩下的元素中找到最小的元素，将它与数组的第二个元素交换位置。如此往复，直到将整个数组排序。这种方法叫做选择排序，因为它在不断地选择剩余元素之中的最小者。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Selection</span> &#123;</span><br><span class="line">    <span class="comment">//将a[]按升序排列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n=a.length; <span class="comment">//数组长度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;   <span class="comment">//将a[i]和a[i+1..n]中最小的元素交换</span></span><br><span class="line">            <span class="type">int</span> min=i;          <span class="comment">//最小元素的索引</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">                <span class="keyword">if</span>(less(a[j],a[min]))</span><br><span class="line">                    min=j;</span><br><span class="line">                exch(a,i,min);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// less()、exch()、isSorted()方法见“排序算法类的模板”</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/selection.png"
alt="选择排序的轨迹（每次交换后的数组内容）" />
<figcaption
aria-hidden="true">选择排序的轨迹（每次交换后的数组内容）</figcaption>
</figure>
<h1 id="插入排序">插入排序</h1>
<p>与选择排序一样，当前索引左边的所有元素都是有序的，但它们的最终位置还不确定，为了给更小的元素腾出空间，它们可能会被移动。但是当索引到达数组的右端时，数组排序就完成了。和选择排序不同的是，插人排序所需的时间取决于输人中元素的初始顺序。例如，对一个很大且其中的元素已经有序(或接近有序)的数组进行排序将会比对随机顺序的数组或是逆序数组进行排序要快得多。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Insertion</span> &#123;</span><br><span class="line">    <span class="comment">//将a[]按升序排列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> a.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;   <span class="comment">//将a[i]插入到a[i-1]、a[i-2]、a[i-3]...之中</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt; <span class="number">0</span> &amp;&amp; less(a[j], a[j - <span class="number">1</span>]); j--)</span><br><span class="line">                exch(a, j, j - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// less()、exch()、isSorted()方法见“排序算法类的模板”</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/insertion.png"
alt="插入排序的轨迹（每次插入后的数组内容）" />
<figcaption
aria-hidden="true">插入排序的轨迹（每次插入后的数组内容）</figcaption>
</figure>
<h1 id="比较两种排序算法">比较两种排序算法</h1>
<p>说实话这部分我还说不清楚，感兴趣的可以看原著。</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/bars.png"
alt="初级排序算法的可视轨迹图" />
<figcaption aria-hidden="true">初级排序算法的可视轨迹图</figcaption>
</figure>
<h1 id="希尔排序">希尔排序</h1>
<p>为了展示初级排序算法性质的价值，接下来我们将学习一种基于插人排序的快速的排序算法。对于大规模乱序数组插人排序很慢，因为它只会交换相邻的元素，因此元素只能一点一点地从数组的一端移动到另-端。例如，如果主键最小的元素正好在数组的尽头，要将它挪到正确的位置就需要N-1次移动。希尔排序为了加快速度简单地改进了插人排序，交换不相邻的元素以对数组的局部进行排序，并最终用插入排序将局部有序的数组排序。</p>
<p>希尔排序的思想是使数组中任意间隔为h的元素都是有序的。这样的数组被称为h有序数组。换句话说，一个h有序数组就是h个互相独立的有序数组编织在一起组成的一一个数组(见图2.1.2)。在进行排序时，如果h很大，我们就能将元素移动到很远的地方，为实现更小的h有序创造方便。用这种方式，对于任意以1结尾的h序列，我们都能够将数组排序。这就是希尔排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell</span> &#123;</span><br><span class="line">    <span class="comment">//将a[]按升序排列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> a.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (h &lt; n / <span class="number">3</span>) h = <span class="number">3</span> * h + <span class="number">1</span>;<span class="comment">//1,4,13,40,121,364,1093,...</span></span><br><span class="line">        <span class="keyword">while</span> (h &gt;= <span class="number">1</span>) &#123;    <span class="comment">//将数组变为h有序</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> h; i &lt; n; i++) &#123;   <span class="comment">//将a[i]插入到a[i-h]、a[i-2*h]、a[i-3*h]...之中</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt;= h &amp;&amp; less(a[j], a[j - h]); j -= h)</span><br><span class="line">                    exch(a, j, j - h);</span><br><span class="line">            &#125;</span><br><span class="line">            h /=  <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// less()、exch()、isSorted()方法见“排序算法类的模板”</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/shell.png"
alt="希尔排序的详细轨迹（各种插入）" />
<figcaption
aria-hidden="true">希尔排序的详细轨迹（各种插入）</figcaption>
</figure>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/shell-bars.png"
alt="希尔排序的可视轨迹）" />
<figcaption aria-hidden="true">希尔排序的可视轨迹）</figcaption>
</figure>
<h1 id="总结">总结</h1>
<p>最开始看这本书有点费劲，看不下去，尤其是书中那些自定义的API不给详细代码，只给API的作用说明，想看代码只能上本书网站查看，当然这里有对java不熟悉的原因，后来觉得其实没影响的，那些都是一些简单的java系统类库的简单改写。现在越读越有意思，首先本书非常严谨，然后就是书中排版包括前后照应关系安排的太厉害了，最特殊的是本书的图文照应，几乎所有复杂难以理解的算法都有可视化图片，命题+论证+测试都是非常有意思的，就是需要一些数学知识。还有我也是初读这样的书，肯定有理解不到位的地方，谅解！</p>
<h1 id="参考资料">参考资料</h1>
<p>《算法（第4版）》第二章排序2.1初级排序算法</p>
<p><a href="https://algs4.cs.princeton.edu/">本书网站</a></p>
]]></content>
      <tags>
        <tag>数据结构&amp;算法</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Python</title>
    <url>/article/596b7022.html</url>
    <content><![CDATA[<h1
id="section"><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/9787121339387.jpg" width = "200" height = "" alt="一往无前"/></h1>
<p>因为这学期选上《Python数据分析基础教程》这门课，也是第一次接触Python，早有耳闻Python的大名，什么“人生苦短，我用Python”早早就听过了，这次可算能揭开她神秘的面纱了！</p>
<p>因为我也是初学，还有对编程语言认识的不够深入，我接下来的话仅仅是就我目前了解的知识而说出的，如有错误，还望见谅！</p>
<p>接下来我会就我目前对Python的了解谈一谈我的想法，几乎没什么干货。</p>
<span id="more"></span>
<h1 id="简介与环境配置">简介与环境配置</h1>
<p>这篇博客并不是百科，我又懒得复制粘贴，这里直接省略。。。</p>
<h1 id="语法">语法</h1>
<p>这个我一定要好好聊一聊了，Python对于我的第一感受是：简单（精妙）。Python真的太有意思了！！！</p>
<p>最有意思应该是缩进了，下面会提。</p>
<p>因为我之前学过C++、C#和java，所以学起Python还是很简单的，在我看来Python就像是考试在草稿纸上的涂涂画画，只要你清楚你画的是啥，不管看起来再乱，但它对于你都是有意义的，而像C++、C#和java就看起来就很规范，一步一步整洁了然。在这个方面Python就和我很契合，因为我的草稿纸都特别乱，毫无章法可言，正因如此，大多数工作都交给了经验与临场发挥，所以最后的速度也不算慢。可能我的表达不好，我想说的就是相同功能的用这几种语言写，Python代码更少。</p>
<h1 id="基本数据类型">基本数据类型</h1>
<p>Python3
中有六个标准的数据类型：Number（数字）、String（字符串）、List（列表）、Tuple（元组）、Set（集合）和Dictionary（字典）。</p>
<p>不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）；
可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。</p>
<p>每个数据类型都很容易操作，很方便，很有趣。</p>
<h1 id="运算符">运算符</h1>
<p>这方面Python与其他语言差别不大。</p>
<h1 id="条件控制与循环语句">条件控制与循环语句</h1>
<p>它来了——缩进，我们通常了解的语句都要有{}，但在Python里没有，它仅仅采用了缩进的方式就完美的解决了这个问题，同一语句块的要有合适的缩进，因此Python对于排版还是有要求的。</p>
<h1 id="函数">函数</h1>
<p>没什么说的“简洁”，返回值很有意思，很轻松返回多个值，有意思！</p>
<h1 id="数据结构">数据结构</h1>
<p>这个更有意思，还记得前面的List吗，这里它可以堆栈和队列。有兴趣可以了解一下。</p>
<h1 id="输入输出等其他">输入输出等其他</h1>
<p>库函数差别不大，输入输出也是，Python的面向对象我了解的还不太够，不说了。</p>
<h1 id="参考">参考</h1>
<p><a
href="https://www.runoob.com/python3/python3-tutorial.html">菜鸟教程</a></p>
<p><a
href="https://www.runoob.com/python3/python3-examples.html">实例</a></p>
<h1 id="总结">总结</h1>
<p>说实话这篇写的很烂可以说是“啥也不是”，但不会删，因为这是一种记录，记录现在我初学Python的那一点热情。</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>初识SpringBoot</title>
    <url>/article/cd6beb9c.html</url>
    <content><![CDATA[<h1 id="参考">参考</h1>
<ul>
<li><a
href="https://www.bilibili.com/video/BV19K4y1L7MT">https://www.bilibili.com/video/BV19K4y1L7MT</a></li>
<li><a
href="https://www.yuque.com/atguigu/springboot/rmxq85">https://www.yuque.com/atguigu/springboot/rmxq85</a></li>
<li><a
href="https://docs.spring.io/spring-boot/docs/2.4.3/reference/html/getting-started.html">https://docs.spring.io/spring-boot/docs/2.4.3/reference/html/getting-started.html</a></li>
</ul>
<span id="more"></span>
<p>早有耳闻
SpringBoot，这次终于是见识到了，在见识之前就有听说过“started”，“脚手架”，“简化开发”等等关于
SpringBoot的优点，这次总算是初识庐山真面目了。</p>
<p>首先我要说<a
href="https://www.bilibili.com/video/BV19K4y1L7MT">雷丰阳2021版SpringBoot2零基础入门springboot全套完整版（spring
boot2）</a>讲的真是太棒了，第一次接触真的能收获太多了，尤其感觉讲的非常有条理，循序渐进，先讲简单应用，再从源码分析原理。有一次看到一个章节直呼SpringBoot实在是太妙了，感叹了半天。</p>
<h1 id="自动装配原理">自动装配原理</h1>
<p>我不奢求能把它说清楚，我只是想把我目前的理解说一说，有不对的还请见谅。</p>
<h2 id="首先">首先</h2>
<p>要知道SpringBoot几个基本注解</p>
<h3 id="configuration"><span class="citation"
data-cites="Configuration">@Configuration</span></h3>
<ul>
<li>声明为配置类</li>
<li>proxyBeanMethods 默认为true，表示组件是单实例的</li>
</ul>
<h3 id="beancomponentcontrollerservicerepository"><span class="citation"
data-cites="Bean">@Bean</span>、<span class="citation"
data-cites="Component">@Component</span>、<span class="citation"
data-cites="Controller">@Controller</span>、<span class="citation"
data-cites="Service">@Service</span>、<span class="citation"
data-cites="Repository">@Repository</span></h3>
<ul>
<li>这些在Spring、SpringMVC都见识到了，都是用来配置组件的</li>
</ul>
<h3 id="componentscanimport"><span class="citation"
data-cites="ComponentScan">@ComponentScan</span>、<span class="citation"
data-cites="Import">@Import</span></h3>
<ul>
<li>组件扫描和组件导入</li>
</ul>
<h3 id="conditional"><span class="citation"
data-cites="Conditional">@Conditional</span></h3>
<ul>
<li>条件装配，非常重要，在我看来自动装配主要由它实现</li>
</ul>
<h3 id="importresource"><span class="citation"
data-cites="ImportResource">@ImportResource</span></h3>
<ul>
<li>SpringBoot几乎不使用Spring传统的xml配置，如果还是想用则可以使用这个配置，声明xml的classpath即可</li>
</ul>
<h3 id="configurationproperties"><span class="citation"
data-cites="ConfigurationProperties">@ConfigurationProperties</span></h3>
<ul>
<li>属性绑定</li>
<li>因为它可以在配置文件实现properties或是yaml配置</li>
</ul>
<h3 id="enableautoconfiguration"><span class="citation"
data-cites="EnableAutoConfiguration">@EnableAutoConfiguration</span></h3>
<ul>
<li>依据配置自动导入相关配置，重要，理解自动装配，要研读源码中的xxxAutoConfiguration相关类</li>
</ul>
<h2 id="原理初解">原理初解</h2>
<p>自动装配就是利用上面的注解（当然还有许多其他的）实现的</p>
<p>查看如下SpringBoot是如何实现web.servlet的自动装配的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.boot.autoconfigure.web.servlet;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">		ValidationAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfiguration</span> &#123;</span><br><span class="line">       </span><br></pre></td></tr></table></figure>
<h3 id="configurationproxybeanmethods-false"><span class="citation"
data-cites="Configuration">@Configuration</span>(proxyBeanMethods =
false)</h3>
<ul>
<li>声明配置类，并不使用单例模式（实现单例模式相对于不实现更快一些，因为不用检查）</li>
</ul>
<h3 id="conditionalonwebapplicationtype-type.servlet"><span
class="citation"
data-cites="ConditionalOnWebApplication">@ConditionalOnWebApplication</span>(type
= Type.SERVLET)</h3>
<ul>
<li>条件装配，这个表示是web项目时装配</li>
</ul>
<h3
id="conditionalonclass-servlet.class-dispatcherservlet.class-webmvcconfigurer.class"><span
class="citation"
data-cites="ConditionalOnClass">@ConditionalOnClass</span>({
Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class })</h3>
<ul>
<li>条件装配，类路径下有指定的类时装配</li>
</ul>
<h3 id="conditionalonmissingbeanwebmvcconfigurationsupport.class"><span
class="citation"
data-cites="ConditionalOnMissingBean">@ConditionalOnMissingBean</span>(WebMvcConfigurationSupport.class)</h3>
<ul>
<li>条件装配，当容器中没有该组件时装配</li>
</ul>
<h3 id="autoconfigureorderordered.highest_precedence-10"><span
class="citation"
data-cites="AutoConfigureOrder">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE
+ 10)</h3>
<ul>
<li>声明类加载优先级</li>
</ul>
<h3 id="autoconfigureafter..."><span class="citation"
data-cites="AutoConfigureAfter">@AutoConfigureAfter</span>(...)</h3>
<ul>
<li>声明类加载在...之后</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc.hiddenmethod.filter&quot;, name = &quot;enabled&quot;, matchIfMissing = false)</span></span><br><span class="line"><span class="keyword">public</span> OrderedHiddenHttpMethodFilter <span class="title function_">hiddenHttpMethodFilter</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderedHiddenHttpMethodFilter</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="bean"><span class="citation" data-cites="Bean">@Bean</span></h3>
<ul>
<li>组件声明</li>
</ul>
<h3 id="conditionalonmissingbeanhiddenhttpmethodfilter.class"><span
class="citation"
data-cites="ConditionalOnMissingBean">@ConditionalOnMissingBean</span>(HiddenHttpMethodFilter.class)</h3>
<ul>
<li>条件装配，当没有xxx组件时装配</li>
</ul>
<h3
id="conditionalonpropertyprefix-spring.mvc.hiddenmethod.filter-name-enabled-matchifmissing-false"><span
class="citation"
data-cites="ConditionalOnProperty">@ConditionalOnProperty</span>(prefix
= "spring.mvc.hiddenmethod.filter", name = "enabled", matchIfMissing =
false)</h3>
<ul>
<li>配置绑定，前缀时"spring.mvc.hiddenmethod.filter"，该配置为前缀下的”enabled“属性</li>
<li>matchIfMissing若缺少配置这配置为false，相当于默认配置</li>
</ul>
<h2 id="小结">小结</h2>
<h3 id="自动装配">自动装配</h3>
<ul>
<li>加载自动配置类</li>
<li>条件装配</li>
<li>用户配置优先</li>
</ul>
<p>下面是<a
href="https://www.yuque.com/atguigu/springboot/na3pfd#jj7XF">复制</a>的一段</p>
<h2 id="springboot优点">SpringBoot优点</h2>
<ul>
<li><p>Create stand-alone Spring applications</p></li>
<li><ul>
<li>创建独立Spring应用</li>
</ul></li>
<li><p>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR
files)</p></li>
<li><ul>
<li>内嵌web服务器</li>
</ul></li>
<li><p>Provide opinionated 'starter' dependencies to simplify your build
configuration</p></li>
<li><ul>
<li>自动starter依赖，简化构建配置</li>
</ul></li>
<li><p>Automatically configure Spring and 3rd party libraries whenever
possible</p></li>
<li><ul>
<li>自动配置Spring以及第三方功能</li>
</ul></li>
<li><p>Provide production-ready features such as metrics, health checks,
and externalized configuration</p></li>
<li><ul>
<li>提供生产级别的监控、健康检查及外部化配置</li>
</ul></li>
<li><p>Absolutely no code generation and no requirement for XML
configuration</p></li>
<li><ul>
<li>无代码生成、无需编写XML</li>
</ul></li>
</ul>
<blockquote>
<p>SpringBoot是整合Spring技术栈的一站式框架</p>
<p>SpringBoot是简化Spring技术栈的快速开发脚手架</p>
</blockquote>
<h2 id="springboot缺点">SpringBoot缺点</h2>
<ul>
<li>人称版本帝，迭代快，需要时刻关注变化</li>
<li>封装太深，内部原理复杂，不容易精通</li>
</ul>
]]></content>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划A计数问题</title>
    <url>/article/5aa54489.html</url>
    <content><![CDATA[<p>接下来用一道例题来认识动态规划的计数问题，首先声明一下，这些题可能有其他解法，但在这里我只是说一说关于动态规划的解法。</p>
<p>开始吧！</p>
<span id="more"></span>
<h1 id="不同路径">62. 不同路径</h1>
<p><a
href="https://leetcode-cn.com/problems/unique-paths/">题目地址</a></p>
<p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start”
）。</p>
<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p>
<p>问总共有多少条不同的路径？</p>
<p><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/robot_maze.png" width="400" height="" alt="141-1" /></p>
<p>例如，上图是一个7 x 3 的网格。有多少可能的路径？</p>
<p>示例1： &gt;输入: m = 3, n = 2<br />
&gt;输出: 3<br />
&gt;解释:从左上角开始，总共有 3 条路径可以到达右下角。</p>
<ol type="1">
<li>向右 -&gt; 向右 -&gt; 向下</li>
<li>向右 -&gt; 向下 -&gt; 向右</li>
<li>向下 -&gt; 向右 -&gt; 向右</li>
</ol>
<p>示例2： &gt;输入: m = 7, n = 3<br />
&gt;输出: 28</p>
<p>提示：</p>
<ul>
<li>1 &lt;= m, n &lt;= 100</li>
<li>题目数据保证答案小于等于 2 * <span class="math inline">\(10 ^
9\)</span></li>
</ul>
<h1 id="begin">begin</h1>
<p>题目描述得很清楚了，你是否有了想法，建议先尝试一下，考虑用动态规划怎么解。</p>
<h1 id="动态规划">动态规划</h1>
<p>A 计数问题 B 最值问题 C 可行性问题</p>
<h2 id="一确定状态">一、确定状态</h2>
<blockquote>
<ol type="1">
<li>最后一步</li>
<li>子问题</li>
</ol>
</blockquote>
<h2 id="二转移方程">二、转移方程</h2>
<h2 id="三初始条件和边界问题">三、初始条件和边界问题</h2>
<blockquote>
<p>初始条件：用转移方程算不出来，需要手工定义<br />
边界情况：数组不能越界</p>
</blockquote>
<h2 id="四计算顺序">四、计算顺序</h2>
<h1 id="a计数问题">A计数问题</h1>
<p>很明显这是一个关于计数的问题，题目要求解的是机器人有多少种方案走到右下角，而不是要求这些方案里是怎样走到右下角的，这就是动态规划的一个标志吧，不要过程要结果。</p>
<p>按照上面的顺序来：</p>
<h1 id="一确定状态-1">一、确定状态</h1>
<ol type="1">
<li>最后一步</li>
</ol>
<blockquote>
<p>我们假设机器人走了最后一步到达终点，也只有两种可能，从上方向下走，从左方向右走。即从(m-2,n-1)或(m-1,n-2)走到了终点(m-1,n-1)。</p>
</blockquote>
<ol start="2" type="1">
<li>子问题</li>
</ol>
<blockquote>
<p>根据最后一步，我们把终点换了个位置，即上方的(m-2,n-1)和(m-1,n-2)，并且到这两点之和作为结果。很明显是将一个大问题变成一个规模更小的问题了，所以这个就是子问题。</p>
</blockquote>
<h1 id="二转移方程-1">二、转移方程</h1>
<blockquote>
<p>f[i][j]=f[i-1][j]+f[i][j-1]。</p>
</blockquote>
<h1 id="三初始条件和边界问题-1">三、初始条件和边界问题</h1>
<blockquote>
<p>出发点f[0][0]=1，最上一层和最左一层都是只有一条路。</p>
</blockquote>
<h1 id="四计算顺序-1">四、计算顺序</h1>
<blockquote>
<p>二维数组更注重顺序，要清楚我们要求的所有条件都在上一步求出了。</p>
</blockquote>
<p>一种java题解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n][m];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span>||j==<span class="number">0</span>)&#123;</span><br><span class="line">                    dp[i][j]=<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j]=dp[i-<span class="number">1</span>][j]+dp[i][j-<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n-<span class="number">1</span>][m-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>应该都能看懂吧。</p>
<p><a
href="https://leetcode-cn.com/problems/unique-paths/solution/">详细题解</a></p>
<h1 id="推荐视频">推荐视频</h1>
<p><a
href="https://www.bilibili.com/video/BV1xb411e7ww">动态规划入门</a></p>
]]></content>
      <tags>
        <tag>数据结构&amp;算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划B最值问题</title>
    <url>/article/14b10894.html</url>
    <content><![CDATA[<p>接下来用一道例题来认识动态规划的最值问题，首先声明一下，这些题可能有其他解法，但在这里我只是说一说关于动态规划的解法。</p>
<p>开始吧！</p>
<span id="more"></span>
<h1 id="零钱兑换">322. 零钱兑换</h1>
<p><a
href="https://leetcode-cn.com/problems/coin-change/">题目地址</a></p>
<p>给定不同面额的硬币 coins 和一个总金额
amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。</p>
<p>你可以认为每种硬币的数量是无限的。</p>
<p>示例1： &gt;输入：coins = [1, 2, 5], amount = 11<br />
&gt;输出：3<br />
&gt;解释：11 = 5 + 5 + 1</p>
<p>示例2： &gt;输入：coins = [2], amount = 3<br />
&gt;输出：-1</p>
<p>示例3： &gt;输入：coins = [1], amount = 0<br />
&gt;输出：0</p>
<p>示例4： &gt;输入：coins = [1], amount = 1<br />
&gt;输出：1</p>
<p>示例5： &gt;输入：coins = [1], amount = 2<br />
&gt;输出：2</p>
<p>提示：</p>
<ul>
<li>1 &lt;= coins.length &lt;= 12</li>
<li>1 &lt;= coins[i] &lt;= <span class="math inline">\(2^{31}\)</span> -
1</li>
<li>0 &lt;= amount &lt;= <span class="math inline">\(10^4\)</span></li>
</ul>
<h1 id="begin">begin</h1>
<p>题目描述得很清楚了，你是否有了想法，建议先尝试一下，考虑用动态规划怎么解。</p>
<h1 id="动态规划">动态规划</h1>
<p>A 计数问题 B 最值问题 C 可行性问题</p>
<h2 id="一确定状态">一、确定状态</h2>
<blockquote>
<ol type="1">
<li>最后一步</li>
<li>子问题</li>
</ol>
</blockquote>
<h2 id="二转移方程">二、转移方程</h2>
<h2 id="三初始条件和边界问题">三、初始条件和边界问题</h2>
<blockquote>
<p>初始条件：用转移方程算不出来，需要手工定义<br />
边界情况：数组不能越界</p>
</blockquote>
<h2 id="四计算顺序">四、计算顺序</h2>
<h1 id="b最值问题">B最值问题</h1>
<p>很明显这是一个关于最值的问题，题目要求解的是用最少的硬币组成目标数字，如果没有这样的解就返回-1。题目让求的仅仅是最少需要几个硬币，而不是要求这最少的那些组合是什么，这就是动态规划的一个标志吧，不要过程要结果。</p>
<p>按照上面的顺序来：</p>
<h1 id="一确定状态-1">一、确定状态</h1>
<ol type="1">
<li>最后一步</li>
</ol>
<blockquote>
<p>我们假设有这么最后一块硬币使我们组成了目标数字，并且这就是最少组合，如我们要凑出n，那么我们设最少方案是a1,a2,...ak,组成了n。那么我们的最后一块就是ak，前面则是a1-ak-1组成了n-ak，并且他们都是最少方案。</p>
</blockquote>
<ol start="2" type="1">
<li>子问题</li>
</ol>
<blockquote>
<p>根据最后一步，我们把由k块硬币组成n的问题变成了由k-1块组成n-ak的问题，很明显是将一个大问题变成一个规模更小的问题了，所以这个就是子问题。</p>
</blockquote>
<h1 id="二转移方程-1">二、转移方程</h1>
<blockquote>
<p>我们设f(n)表示组成n的最少个数，那么f(n)=min(f(n-ak1)+1,f(n-ak2)+1)，这里的ak1、ak2代表的是所有可能的硬币，例如我们要组成27，并且我们只有2、5、7三种硬币，f(27)=min(f(27-2)+1,f(27-5)+1,f(27-7)+1)，这就是我们的转移方程。</p>
</blockquote>
<h1 id="三初始条件和边界问题-1">三、初始条件和边界问题</h1>
<blockquote>
<p>我们可以用数组来保存小于等于n的最少个数，这时候我们要确认用转移方程算不出来，需要手工定义的初始条件，关于这个题是f(0)=0,之后当然还要考虑数组边界问题。</p>
</blockquote>
<h1 id="四计算顺序-1">四、计算顺序</h1>
<blockquote>
<p>关于这个题的计算顺序还是比较清晰的，我们并需要从小到大逐个计算，最后得到f(n)。</p>
</blockquote>
<p>一种java题解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">coinChange</span><span class="params">(<span class="type">int</span>[] coins, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="type">int</span> A=coins.length;</span><br><span class="line">        <span class="type">int</span> max=amount+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span>[] f=<span class="keyword">new</span> <span class="title class_">int</span>[amount+<span class="number">1</span>];</span><br><span class="line">        Arrays.fill(f,max);</span><br><span class="line">        f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=amount;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;A;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&gt;=coins[j])&#123;</span><br><span class="line">                    f[i]=Math.min(f[i],f[i-coins[j]]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[amount]&gt;amount? -<span class="number">1</span>:f[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个题解还是做了很好处理的，就在那个“int[] f=new
int[amount+1];”这样在最后就可以比较amount直接确定结果了。</p>
<p><a
href="https://leetcode-cn.com/problems/coin-change/solution/">详细题解</a></p>
<h1 id="推荐视频">推荐视频</h1>
<p><a
href="https://www.bilibili.com/video/BV1xb411e7ww">动态规划入门</a></p>
]]></content>
      <tags>
        <tag>数据结构&amp;算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划C可行性问题</title>
    <url>/article/b56a63ef.html</url>
    <content><![CDATA[<p>接下来用一道例题来认识动态规划的可行性问题，首先声明一下，这些题可能有其他解法，但在这里我只是说一说关于动态规划的解法。</p>
<p>开始吧！</p>
<span id="more"></span>
<h1 id="跳跃游戏">55. 跳跃游戏</h1>
<p><a
href="https://leetcode-cn.com/problems/jump-game/">题目地址</a></p>
<p>给定一个非负整数数组，你最初位于数组的第一个位置。</p>
<p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p>
<p>判断你是否能够到达最后一个位置。</p>
<p>示例1： &gt;输入: [2,3,1,1,4]<br />
&gt;输出: true<br />
&gt;解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3
步到达最后一个位置。</p>
<p>示例2： &gt;输入: [3,2,1,0,4]<br />
&gt;输出: false<br />
&gt;解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是
0 ， 所以你永远不可能到达最后一个位置。</p>
<h1 id="begin">begin</h1>
<p>题目描述得很清楚了，你是否有了想法，建议先尝试一下，考虑用动态规划怎么解。</p>
<h1 id="动态规划">动态规划</h1>
<p>A 计数问题 B 最值问题 C 可行性问题</p>
<h2 id="一确定状态">一、确定状态</h2>
<blockquote>
<ol type="1">
<li>最后一步</li>
<li>子问题</li>
</ol>
</blockquote>
<h2 id="二转移方程">二、转移方程</h2>
<h2 id="三初始条件和边界问题">三、初始条件和边界问题</h2>
<blockquote>
<p>初始条件：用转移方程算不出来，需要手工定义<br />
边界情况：数组不能越界</p>
</blockquote>
<h2 id="四计算顺序">四、计算顺序</h2>
<h1 id="c可行性问题">C可行性问题</h1>
<p>很明显这是一个关于可行性的问题，题目要求解的是能否到达最后的位置。题目让求的仅仅是true或是false，这就是动态规划的一个标志吧，不要过程要结果。</p>
<p>按照上面的顺序来：</p>
<h1 id="一确定状态-1">一、确定状态</h1>
<ol type="1">
<li>最后一步</li>
</ol>
<blockquote>
<p>我们假设有这么一块位置使我们跳到了最后一个位置。</p>
</blockquote>
<ol start="2" type="1">
<li>子问题</li>
</ol>
<blockquote>
<p>根据最后一步，我们把由起点能否跳到最后一个位置的问题变成了能否跳到它前一个的位置（能从这跳到终点），很明显是将一个大问题变成一个规模更小的问题了，所以这个就是子问题。</p>
</blockquote>
<h1 id="二转移方程-1">二、转移方程</h1>
<blockquote>
<p>f[j]表示能跳到j，f[j]=OR(0&lt;=i&lt;j)(f[i] AND i+a[i]&gt;=j)。</p>
</blockquote>
<h1 id="三初始条件和边界问题-1">三、初始条件和边界问题</h1>
<blockquote>
<p>出发点f[0]=true，其它认真考虑考虑，不要出现大错误。</p>
</blockquote>
<h1 id="四计算顺序-1">四、计算顺序</h1>
<blockquote>
<p>关于这个题的计算顺序还是比较清晰的，我们从出发点算到终点即可，需要注意若可到达即退出，因为这是OR或问题，最后得到f(n)。</p>
</blockquote>
<p>一种java题解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canJump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n=nums.length;</span><br><span class="line">        <span class="type">boolean</span>[] f=<span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        f[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            f[i]=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(f[j]&amp;&amp;nums[j]+j&gt;=i)&#123;</span><br><span class="line">                    f[i]=<span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意这个题用动态规划并不是最优解，贪心算法更优一些，可以了解一下，下面给出代码了，思考思考。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canJump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> maxjump=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length&amp;&amp;i&lt;=maxjump;i++)&#123;</span><br><span class="line">            maxjump=Math.max(maxjump,i+nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(maxjump&gt;=nums.length-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a
href="https://leetcode-cn.com/problems/jump-game/solution/">详细题解</a></p>
<h1 id="推荐视频">推荐视频</h1>
<p><a
href="https://www.bilibili.com/video/BV1xb411e7ww">动态规划入门</a></p>
]]></content>
      <tags>
        <tag>数据结构&amp;算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>博客从Github迁移至Gitee</title>
    <url>/article/70023c40.html</url>
    <content><![CDATA[<h1 id="起因">起因</h1>
<p>本来是没有这个打算的，但最近 <a href="https://github.com/">github</a>
怎么也上不去，实在是受不了了，就只能转到 <a
href="https://gitee.com/">gitee</a>，在这里做个记录吧</p>
<span id="more"></span>
<h1 id="过程">过程</h1>
<p>其实之前就有过这样的想法了，但去做却没做好，这次下定了决心，终于搞好了</p>
<h2 id="参考">参考：</h2>
<ul>
<li><p><a
href="https://www.jianshu.com/p/26a726baf70e">https://www.jianshu.com/p/26a726baf70e</a></p></li>
<li><p>...</p></li>
</ul>
<h2 id="重点">重点</h2>
<h3 id="新建-gitee仓库">1、新建 gitee仓库</h3>
<p><img data-src="https://img.imgdb.cn/item/6040c41c360785be54636a8d.jpg" style="zoom:67%;" />2、</p>
<h3 id="打开-gitee-pages-服务">2、打开 Gitee Pages 服务</h3>
<p><img data-src="https://img.imgdb.cn/item/6040c49b360785be5463c45c.jpg" /></p>
<hr />
<p><img data-src="https://img.imgdb.cn/item/6040c546360785be546461e1.jpg" style="zoom:67%;" /></p>
<h3 id="更新原-_config.yml文件">3、更新原 _config.yml文件</h3>
<p>修改 _config.yml</p>
<p>url 改为新的（gitee pages 生成的 url）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://wnhyang.gitee.io</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>
<p><img data-src="https://img.imgdb.cn/item/6040c69a360785be5464e95f.jpg" /></p>
<p>repo 改为新仓库的 HTTPS 或 SHH 链接</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@gitee.com:wnhyang/wnhyang.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<p>使用 SSH，要事先配置好 SSH密钥（github 与 gitee
可以同时使用一个密钥）</p>
<h2 id="老几样">老几样</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n <span class="string">&quot;&quot;</span> <span class="comment"># 创建新博客</span></span><br><span class="line">hexo clean <span class="comment"># 清理</span></span><br><span class="line">hexo g <span class="comment"># 生成</span></span><br><span class="line">hexo s <span class="comment"># 本地端口测试 默认4000端口</span></span><br><span class="line">hexo d <span class="comment"># 部署</span></span><br></pre></td></tr></table></figure>
<h2 id="更新-pages">更新 Pages</h2>
<p>转到 Gitee 后，发现部署后还需要在手动到 Gitee Pages 页面
更新，毕竟是免费使用的</p>
<h1 id="结束">结束</h1>
<p>结果还是好的，现在访问就很轻松了，舒服</p>
<p><code>2022.12.04</code>更新，我又后悔了。鱼和熊掌就不可兼得吗？<code>Github</code>访问慢，但内容不会有什么限制；<code>Gitee</code>访问快，但有着奇怪的审核机制，最近无法通过<code>Gitee Page</code>部署我的最新博客了，很是烦恼，真的很想放弃<code>Gitee</code>了，现在只能勉强重新转向<code>Github</code>，哎，换来换去，还有有个人服务器方便啊！</p>
]]></content>
      <tags>
        <tag>Git/GitHub/Gitee</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>博客升级Hexo+NexT</title>
    <url>/article/cf29ecfe.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p><code>20</code>年，在<code>7</code>月通过<code>hexo</code>搭建了属于自己的个人博客，如今过去已经<code>2</code>年多了，期间也不断进行博客的小优化，包括但不限于：主题的个性化配置、字数统计、访问量统计、文章链接生成算法配置、百度网站采集等等。使用的一直是<a
href="https://github.com/litten/hexo-theme-yilia">Yilia</a>主题（已经很长时间不维护了），也是因此遇到了许许多多问题，趁着最近准备更换设备，准备把之前的博客换一个面貌，是的，我要放弃<a
href="https://github.com/litten/hexo-theme-yilia">Yilia</a>，选择<a
href="https://github.com/next-theme/hexo-theme-next">NexT</a>，我不是爱趋同，而是想稳定，不想浪费时间在维护和解决问题上，<code>NexT</code>是应该是<code>hexo</code>主题中体量最大，最为活跃的，<code>so</code>，就是你了，顺便<code>npm</code>、<code>node</code>、<code>hexo</code>都升级一下，为此在这里记录一下。</p>
<p>非常建议直接参考<code>hexo-next</code>官网</p>
<p><a href="https://hexo-next.readthedocs.io/zh_CN/latest/"
class="uri">https://hexo-next.readthedocs.io/zh_CN/latest/</a></p>
<p><a href="https://hexo.io/zh-cn/docs/"
class="uri">https://hexo.io/zh-cn/docs/</a></p>
<p><a href="https://theme-next.js.org/docs/getting-started/"
class="uri">https://theme-next.js.org/docs/getting-started/</a></p>
<p>没有哪里能比官网更有参考意义了！</p>
<p>说实话，看完官网，我真想把下面我的记录全部删掉，但最终还是保留了我的配置供大家参考吧</p>
<span id="more"></span>
<h1 id="根目录依赖">根目录依赖</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;hexo-site&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;hexo generate&quot;,</span><br><span class="line">    &quot;clean&quot;: &quot;hexo clean&quot;,</span><br><span class="line">    &quot;deploy&quot;: &quot;hexo deploy&quot;,</span><br><span class="line">    &quot;server&quot;: &quot;hexo server&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hexo&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;6.3.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;hexo&quot;: &quot;^6.3.0&quot;,</span><br><span class="line">    &quot;hexo-abbrlink&quot;: &quot;^2.2.1&quot;,</span><br><span class="line">    &quot;hexo-deployer-git&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-archive&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-category&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-feed&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-index&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-searchdb&quot;: &quot;^1.4.1&quot;,</span><br><span class="line">    &quot;hexo-generator-sitemap&quot;: &quot;^3.0.1&quot;,</span><br><span class="line">    &quot;hexo-generator-tag&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-ejs&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-pandoc&quot;: &quot;^0.3.1&quot;,</span><br><span class="line">    &quot;hexo-renderer-stylus&quot;: &quot;^2.1.0&quot;,</span><br><span class="line">    &quot;hexo-server&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;hexo-theme-landscape&quot;: &quot;^0.0.3&quot;,</span><br><span class="line">    &quot;hexo-theme-next&quot;: &quot;^8.14.0&quot;,</span><br><span class="line">    &quot;hexo-word-counter&quot;: &quot;^0.1.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="hexo配置">hexo配置</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="line">## Source: https://github.com/hexojs/hexo/</span><br><span class="line"></span><br><span class="line"># Site</span><br><span class="line">title: 无奈和杨（wnhyang）</span><br><span class="line">subtitle: I will keep to fight</span><br><span class="line">description: 学习记录所用</span><br><span class="line">keywords: blog</span><br><span class="line">author: 无奈和杨（wnhyang）</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: &quot;Asia/Shanghai&quot;</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="line"># url: https://wnhyang.gitee.io</span><br><span class="line">url: https://wnhyang.github.io</span><br><span class="line"># permalink: :year/:month/:day/:title/</span><br><span class="line">permalink: article/:abbrlink.html</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32 # 算法：crc16(default) and crc32</span><br><span class="line">  rep: hex # 进制：dec(default) and hex</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br><span class="line">  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br><span class="line"></span><br><span class="line"># Directory</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"># Writing</span><br><span class="line">new_post_name: :title.md # File name of new posts</span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">external_link:</span><br><span class="line">  enable: true # Open external links in new tab</span><br><span class="line">  field: site # Apply to the whole site</span><br><span class="line">  exclude: &quot;&quot;</span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: false</span><br><span class="line">post_asset_folder: false</span><br><span class="line">relative_link: false</span><br><span class="line">future: true</span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace: &quot;&quot;</span><br><span class="line">  wrap: true</span><br><span class="line">  hljs: false</span><br><span class="line">prismjs:</span><br><span class="line">  enable: false</span><br><span class="line">  preprocess: true</span><br><span class="line">  line_number: true</span><br><span class="line">  tab_replace: &quot;&quot;</span><br><span class="line"></span><br><span class="line"># Home page setting</span><br><span class="line"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span><br><span class="line"># per_page: Posts displayed per page. (0 = disable pagination)</span><br><span class="line"># order_by: Posts order. (Order by date descending by default)</span><br><span class="line">index_generator:</span><br><span class="line">  path: &quot;&quot;</span><br><span class="line">  per_page: 10</span><br><span class="line">  order_by: -date</span><br><span class="line"></span><br><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"># Metadata elements</span><br><span class="line">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span><br><span class="line">meta_generator: true</span><br><span class="line"></span><br><span class="line"># Date / Time format</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span><br><span class="line">updated_option: &quot;mtime&quot;</span><br><span class="line"></span><br><span class="line"># Pagination</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"># Include / Exclude file(s)</span><br><span class="line">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span><br><span class="line">include:</span><br><span class="line">exclude:</span><br><span class="line">ignore:</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  - type: git</span><br><span class="line">    repo:</span><br><span class="line">      gitee: git@gitee.com:wnhyang/wnhyang.git</span><br><span class="line">      github: git@github.com:wnhyang/wnhyang.github.io.git</span><br><span class="line">    branch: master</span><br><span class="line"></span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br><span class="line">  format: html</span><br><span class="line"></span><br><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br><span class="line">  exclude_codeblock: false</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br><span class="line">  suffix: &quot;mins.&quot;</span><br><span class="line"></span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line"></span><br><span class="line">feed:</span><br><span class="line">  enable: true</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">  hub:</span><br><span class="line">  content:</span><br><span class="line">  content_limit: 140</span><br><span class="line">  content_limit_delim: &quot; &quot;</span><br><span class="line">  order_by: -date</span><br><span class="line">  icon: icon.png</span><br><span class="line">  autodiscovery: true</span><br><span class="line">  template:</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="next配置">NexT配置</h1>
<p>因为这个配置文件过于长，我就不粘上了，需要的下载看吧</p>
<p><a href="/download/_config.next.yml">_config.next.yml下载</a></p>
<h1 id="插件">插件</h1>
<p>参考前面的依赖即可</p>
]]></content>
      <tags>
        <tag>NPM</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>哈夫曼树及应用</title>
    <url>/article/29d55788.html</url>
    <content><![CDATA[<p>在计算机和互联网技术中，文本压缩就是一个非常重要的技术。玩电脑的人几乎都会应用压缩和解压缩软件来处理文档。因为它除了可以减少文档在磁盘上的空间外，还有重要的一点，
就是我们可以在网络上以压缩的形式传输大量数据，使得保存和传递都更加高效。</p>
<p>那么压缩而不出错是如何做到的呢?简单说，就是把我们要压缩的文本进行重新编码，以减少不必要的空间。尽管现在最新技术在编码上已经很好很强大，但这一切都来自于曾经的技术积累，我们今天就来介绍一下最基本的压缩编码方法-赫夫曼编码。</p>
<span id="more"></span>
<p>在介绍赫夫曼编码前，我们必须得介绍赫夫曼树，而介绍赫夫曼树，我们不得不提这样一个人，美国数学家赫夫曼(David
Huffman)，
也有的翻译为哈夫曼。他在1952年发明了赫夫曼编码，为了纪念他的成就，于是就把他在编码中用到的特殊的C叉树称之为赫夫曼树，他的编码方法称为赫夫曼编码。也就是说，我们现在介绍的知识全都来自于近60年前这位伟大科学家的研究成果，而我们平时所用的压缩和解压缩技术也都是基于赫夫曼的研究之上发展而来，我们应该要记住他。</p>
<p><a
href="https://www.jianshu.com/p/acd06b8ed06b">部分显示问题，请参考</a></p>
<h1 id="哈夫曼树的相关术语">哈夫曼树的相关术语</h1>
<blockquote>
<p>路径</p>
</blockquote>
<ul>
<li>从树中一个结点到另一个结点之间的分支构成这两个结点间的路径</li>
</ul>
<blockquote>
<p>路径长度</p>
</blockquote>
<ul>
<li>路径上的分支数目</li>
</ul>
<blockquote>
<p>带权路径长度</p>
</blockquote>
<ul>
<li>结点到根的路径长度与结点上权的乘积</li>
</ul>
<blockquote>
<p>树的带权路径长度(weighted path length)</p>
</blockquote>
<ul>
<li>树中所有叶子结点的带权路径长度之和</li>
</ul>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/WPL.png"
alt="WPL" />
<figcaption aria-hidden="true">WPL</figcaption>
</figure>
<h1 id="定义">定义</h1>
<p>设有n个权值{w1,w2,…,wn}，构造一棵有n个叶子结点的二叉树，每个叶子的权值为wi，则wpl最小的二叉树叫哈夫曼树。</p>
<h1 id="哈夫曼树的构造过程">哈夫曼树的构造过程</h1>
<p>(1).
初始化：根据给定的n个权值{w1,w2,…,wn}，构成n棵二叉树的集合F={T1,T2,…,Tn}，其中每棵二叉树Ti只有一个带权为wi的根结点，其左右子树均空。</p>
<p>(2). 选取与合并：在 F
中选取两棵根结点的权值最小的树作为左右子树，构造一棵新的二叉树，且置新的二叉树的根结点的权值为其左、右子树上根结点的权值之和。</p>
<p>(3). 删除与加入：在 F 中删除这两棵树，同时将新得到的二叉树加入 F
中。</p>
<p>(4). 重复(2)和(3)，直到 F
只含一棵树为止。这棵树便是所求的哈夫曼树。</p>
<h1 id="例">例：</h1>
<p>w={5, 29, 7, 8, 14, 23, 3, 11}的构造过程</p>
<p><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/w1.png"
alt="w1" /> <img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/w2.png"
alt="w2" /> <img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/w3.png"
alt="w3" /> <img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/w4.png"
alt="w4" /> <img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/w5.png"
alt="w5" /> <img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/w6.png"
alt="w6" /> <img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/w7.png"
alt="w7" /> <img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/w8.png"
alt="w8" /></p>
<h1 id="哈夫曼编码">哈夫曼编码</h1>
<p>一般地， 设需要编码的字符集为{ d1,d2,···,dn
}，各个字符在电文中出现的次数或频率集合为{
W1,W2,···,Wn},以d1,d2,···,dn作为叶子结点，以W1,W,···,Wn作为相应叶子结点的权值来构造一棵哈夫曼树。规定哈夫曼树的左分支代表0，右分支代表1,则从根结点到叶子结点所经过的路径分支组成的0和1的序列便为该结点对应字符的编码，这就是哈夫曼编码。</p>
<h1 id="哈夫曼树及编码存储结构">哈夫曼树及编码存储结构</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    <span class="type">int</span> weight;</span><br><span class="line">    <span class="type">int</span> parent, lchild, rchild;</span><br><span class="line">&#125;HTNode, * HuffmanTree;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span>** HuffmanCode;<span class="comment">//动态分配数组存储哈夫曼编码</span></span><br></pre></td></tr></table></figure>
<h1 id="哈夫曼树建立">哈夫曼树建立</h1>
<h1
id="返回两个双亲域为0且权值最小的点的下标">返回两个双亲域为0且权值最小的点的下标</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Select</span><span class="params">(HuffmanTree HT, <span class="type">int</span> n, <span class="type">int</span>&amp; s1, <span class="type">int</span>&amp; s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*n代表HT数组的长度*/</span></span><br><span class="line">    <span class="comment">//前两个for循环找所有结点中权值最小的点（字符）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (HT[i].parent == <span class="number">0</span>)<span class="comment">//利用for循环找出一个双亲为0的结点</span></span><br><span class="line">        &#123;</span><br><span class="line">            s1 = i;<span class="comment">//s1初始化为i</span></span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//找到一个后立即退出循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*利用for循环找到所有结点（字符）权值最小的一个并且保证该结点的双亲为0*/</span></span><br><span class="line">        <span class="keyword">if</span> (HT[i].weight &lt; HT[s1].weight &amp;&amp; HT[i].parent == <span class="number">0</span>)</span><br><span class="line">            s1 = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后两个for循环所有结点中权值第二小的点（字符）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (HT[i].parent == <span class="number">0</span> &amp;&amp; i != s1)<span class="comment">//利用for循环找出一个双亲为0的结点，并且不能是s1</span></span><br><span class="line">        &#123;</span><br><span class="line">            s2 = i;<span class="comment">//s2初始化为i</span></span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//找到一个后立即退出循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*利用for循环找到所有结点（字符）权值第二小的一个，该结点满足不能是s1且双亲是0*/</span></span><br><span class="line">        <span class="keyword">if</span> (HT[i].weight &lt; HT[s2].weight &amp;&amp; HT[i].parent == <span class="number">0</span> &amp;&amp; i != s1)</span><br><span class="line">            s2 = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="建树">建树</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateHuffmanTree</span><span class="params">(HuffmanTree&amp; HT, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> m = <span class="number">2</span> * n - <span class="number">1</span>;  <span class="comment">//总结点数2n-1</span></span><br><span class="line">    HT = <span class="keyword">new</span> HTNode[m + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将1~m号单元中的双亲，左孩子，右孩子的下标都初始化为0</span></span><br><span class="line">        HT[i].data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        HT[i].parent = <span class="number">0</span>;</span><br><span class="line">        HT[i].lchild = <span class="number">0</span>;</span><br><span class="line">        HT[i].rchild = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;输入结点信息和权值：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; HT[i].data &gt;&gt; HT[i].weight; <span class="comment">//输入前n个单元中叶子结点的信息和权值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*-----------初始化工作结束，下面建树---------------------------*/</span></span><br><span class="line">    <span class="type">int</span> s1, s2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Select</span>(HT, i - <span class="number">1</span>, s1, s2);</span><br><span class="line">        HT[s1].parent = i;</span><br><span class="line">        HT[s2].parent = i;</span><br><span class="line">        HT[i].lchild = s1;</span><br><span class="line">        HT[i].rchild = s2;</span><br><span class="line">        HT[i].weight = HT[s1].weight + HT[s2].weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="哈夫曼编码-1">哈夫曼编码</h1>
<h1 id="根据树对每个元素编码">根据树对每个元素编码</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateHuffmanCode</span><span class="params">(HuffmanTree HT, HuffmanCode&amp; HC, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HC = <span class="keyword">new</span> <span class="type">char</span>* [n + <span class="number">1</span>]; <span class="comment">//分配储存n个字符编码的编码表空间</span></span><br><span class="line">    <span class="type">char</span>* cd = <span class="keyword">new</span> <span class="type">char</span>[n]; <span class="comment">//分配临时存储字符编码的动态空间</span></span><br><span class="line">    cd[n - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;       <span class="comment">//编码结束符</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//逐个求字符编码</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> start = n - <span class="number">1</span>; <span class="comment">//start 开始指向最后，即编码结束符位置</span></span><br><span class="line">        <span class="type">int</span> c = i;</span><br><span class="line">        <span class="type">int</span> f = HT[c].parent;<span class="comment">//f指向结点c的双亲</span></span><br><span class="line">        <span class="keyword">while</span> (f != <span class="number">0</span>)<span class="comment">//从叶子结点开始回溯，直到根结点</span></span><br><span class="line">        &#123;</span><br><span class="line">            --start;<span class="comment">//回溯一次，start向前指向一个位置</span></span><br><span class="line">            <span class="keyword">if</span> (HT[f].lchild == c)</span><br><span class="line">                cd[start] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cd[start] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">            c = f;</span><br><span class="line">            f = HT[c].parent;</span><br><span class="line">        &#125;</span><br><span class="line">        HC[i] = <span class="keyword">new</span> <span class="type">char</span>[n - start];<span class="comment">//为第i个字符编码分配空间</span></span><br><span class="line">        <span class="built_in">strcpy</span>(HC[i], &amp;cd[start]);<span class="comment">//把求得编码的首地址从cd[start]复制到HC的当前行中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>[] cd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="哈夫曼解码">哈夫曼解码</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">DeCode</span><span class="params">(HuffmanTree HT, string a, string&amp; b, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> q = <span class="number">2</span> * n - <span class="number">1</span>;<span class="comment">//q初始化为根结点的下标</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">length</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//for循环结束条件是读入的字符是结束符（二进制编码）</span></span><br><span class="line">        <span class="comment">//此代码块用来判断读入的二进制字符是0还是1</span></span><br><span class="line">        <span class="keyword">if</span> (a[i] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/*读入0，把根结点(HT[q])的左孩子的下标值赋给q下次循环的时候把HT[q]的左孩子作为新的根结点*/</span></span><br><span class="line">            q = HT[q].lchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a[i] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            q = HT[q].rchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此代码块用来判断HT[q]是否为叶子结点</span></span><br><span class="line">        <span class="keyword">if</span> (HT[q].lchild == <span class="number">0</span> &amp;&amp; HT[q].rchild == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/*是叶子结点，说明已经译出一个字符该字符的下标就是找到的叶子结点的下标*/</span></span><br><span class="line">            b += HT[q].data;<span class="comment">//把下标为q的字符赋给字符数组b[] q = 2 * n - 1;//初始化q为根结点的下标</span></span><br><span class="line">            q = <span class="number">2</span> * n - <span class="number">1</span>;<span class="comment">//继续译下一个字符的时候从哈夫曼树的根结点开始</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="哈夫曼译码">哈夫曼译码</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Code</span><span class="params">(HuffmanTree HT, HuffmanCode HC, string c, string&amp; d, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    d = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; c.<span class="built_in">length</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (c[i] == HT[j].data)  <span class="comment">//找到字符后再d后追加编码</span></span><br><span class="line">                d.<span class="built_in">append</span>(HC[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结">总结</h1>
<p>学习哈夫曼树和哈夫曼编码有助于初步理解数据压缩原理。</p>
<p><a
href="https://www.jianshu.com/p/acd06b8ed06b">部分显示问题，请参考</a></p>
]]></content>
      <tags>
        <tag>数据结构&amp;算法</tag>
      </tags>
  </entry>
  <entry>
    <title>复现&#39;新闻发布&#39;项目</title>
    <url>/article/716baca7.html</url>
    <content><![CDATA[<h1 id="提要">提要</h1>
<p>如题，之前做过“新闻发布”这个项目，这里讲一下复现</p>
<p>之前文章如下</p>
<p>https://wnhyang.github.io/article/48213f39.html</p>
<p>https://wnhyang.github.io/article/54805cfd.html</p>
<span id="more"></span>
<p>之前也说过我的一些设计是参考<a
href="https://www.jianshu.com/">简书</a>的，所以下面展示的也是很像</p>
<h1 id="开始">开始</h1>
<p>一个简易的新闻发布系统，前台可实现，新闻的在线编辑（富文本编辑器实现），查看新闻，评论新闻，问题反馈，个人信息修改等功能，后台就是实现包括用户、新闻分类、新闻信息、评论等管理</p>
<p>首页参考下图</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/首页.1me80kgmur9c.webp"
alt="首页" />
<figcaption aria-hidden="true">首页</figcaption>
</figure>
<p>反馈参考下图</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/反馈.6d7hvnr6llw0.webp"
alt="反馈" />
<figcaption aria-hidden="true">反馈</figcaption>
</figure>
<h1 id="架构图">架构图</h1>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/系统架构图.25aidkaka5pc.webp"
alt="系统架构图" />
<figcaption aria-hidden="true">系统架构图</figcaption>
</figure>
<h1 id="数据库设计">数据库设计</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">	`id` <span class="type">BIGINT</span> ( <span class="number">20</span> ) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增主键id&#x27;</span>,</span><br><span class="line">	`user_name` <span class="type">VARCHAR</span> ( <span class="number">20</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">	`password` <span class="type">VARCHAR</span> ( <span class="number">100</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;123456&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">	`email` <span class="type">VARCHAR</span> ( <span class="number">30</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">	`user_type` TINYINT ( <span class="number">4</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;用户类型（0:普通用户，1:媒体人，2:管理员）&#x27;</span>,</span><br><span class="line">	`phone` <span class="type">VARCHAR</span> ( <span class="number">50</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">	`show_phone` TINYINT ( <span class="number">1</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;是否展示手机号（0:是，1否）&#x27;</span>,</span><br><span class="line">	`sign` <span class="type">VARCHAR</span> ( <span class="number">30</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;签名&#x27;</span>,</span><br><span class="line">	`intro` <span class="type">VARCHAR</span> ( <span class="number">100</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;介绍&#x27;</span>,</span><br><span class="line">	`valid` TINYINT ( <span class="number">1</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;是否有效（0:无效，1有效）&#x27;</span>,</span><br><span class="line">	`create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">	`update_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY ( `id` ),</span><br><span class="line">	<span class="keyword">UNIQUE</span> KEY `idx_user_name` ( `user_name` ),</span><br><span class="line">	<span class="keyword">UNIQUE</span> KEY `idx_email` ( `email` ),</span><br><span class="line">	KEY `idx_update_time` ( `update_time` ) </span><br><span class="line">) ENGINE <span class="operator">=</span> INNODB AUTO_INCREMENT <span class="operator">=</span> <span class="number">20</span> <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4 COMMENT <span class="operator">=</span> <span class="string">&#x27;新闻用户表&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_cert` (</span><br><span class="line">	`id` <span class="type">BIGINT</span> ( <span class="number">20</span> ) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增主键id&#x27;</span>,</span><br><span class="line">	`user_id` <span class="type">BIGINT</span> ( <span class="number">20</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;-1&#x27;</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">	`cert_info` <span class="type">VARCHAR</span> ( <span class="number">50</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;认证信息&#x27;</span>,</span><br><span class="line">	`cert_material` <span class="type">VARCHAR</span> ( <span class="number">255</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;认证材料&#x27;</span>,</span><br><span class="line">	`state` TINYINT ( <span class="number">4</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;认证状态（0:待审核，1:通过，2:未通过）&#x27;</span>,</span><br><span class="line">	`remark` <span class="type">VARCHAR</span> ( <span class="number">50</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;备注&#x27;</span>,</span><br><span class="line">	`valid` TINYINT ( <span class="number">1</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;是否有效（0:无效，1有效）&#x27;</span>,</span><br><span class="line">	`create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">	`update_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY ( `id` ),</span><br><span class="line">	KEY `idx_update_time` ( `update_time` ),</span><br><span class="line">	KEY `idx_user_id` ( `user_id` ) </span><br><span class="line">) ENGINE <span class="operator">=</span> INNODB AUTO_INCREMENT <span class="operator">=</span> <span class="number">12</span> <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4 COMMENT <span class="operator">=</span> <span class="string">&#x27;用户认证表&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `news` (</span><br><span class="line">	`id` <span class="type">BIGINT</span> ( <span class="number">20</span> ) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增主键id&#x27;</span>,</span><br><span class="line">	`category_id` <span class="type">BIGINT</span> ( <span class="number">20</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;-1&#x27;</span> COMMENT <span class="string">&#x27;新闻分类id&#x27;</span>,</span><br><span class="line">	`user_id` <span class="type">BIGINT</span> ( <span class="number">20</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;-1&#x27;</span> COMMENT <span class="string">&#x27;作者id&#x27;</span>,</span><br><span class="line">	`title` <span class="type">VARCHAR</span> ( <span class="number">50</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;新闻标题&#x27;</span>,</span><br><span class="line">	`summary` <span class="type">VARCHAR</span> ( <span class="number">30</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;新闻摘要&#x27;</span>,</span><br><span class="line">	`content` <span class="type">VARCHAR</span> ( <span class="number">1000</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;新闻内容&#x27;</span>,</span><br><span class="line">	`state` TINYINT ( <span class="number">4</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;新闻状态（0:未操作，草稿状态，1:等待，2:通过，3:不通过）&#x27;</span>,</span><br><span class="line">	`remark` <span class="type">VARCHAR</span> ( <span class="number">50</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;备注&#x27;</span>,</span><br><span class="line">	`comment_count` <span class="type">INT</span> ( <span class="number">10</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;评论数，只计算一级评论&#x27;</span>,</span><br><span class="line">	`star_count` <span class="type">INT</span> ( <span class="number">10</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;收藏数&#x27;</span>,</span><br><span class="line">	`like_count` <span class="type">INT</span> ( <span class="number">10</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;喜欢数&#x27;</span>,</span><br><span class="line">	`valid` TINYINT ( <span class="number">1</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;是否有效（0:无效，1有效）&#x27;</span>,</span><br><span class="line">	`create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">	`update_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY ( `id` ),</span><br><span class="line">	KEY `idx_news_title` ( `title` ),</span><br><span class="line">	KEY `idx_update_time` ( `update_time` ),</span><br><span class="line">	KEY `idx_user_id` ( `user_id` ),</span><br><span class="line">	KEY `idx_category_id` ( `category_id` ) </span><br><span class="line">) ENGINE <span class="operator">=</span> INNODB AUTO_INCREMENT <span class="operator">=</span> <span class="number">32</span> <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4 COMMENT <span class="operator">=</span> <span class="string">&#x27;新闻表&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `news_category` (</span><br><span class="line">	`id` <span class="type">BIGINT</span> ( <span class="number">20</span> ) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增主键id&#x27;</span>,</span><br><span class="line">	`category_name` <span class="type">VARCHAR</span> ( <span class="number">10</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;新闻分类名&#x27;</span>,</span><br><span class="line">	`valid` TINYINT ( <span class="number">1</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;是否有效（0:无效，1有效）&#x27;</span>,</span><br><span class="line">	`create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">	`update_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY ( `id` ),</span><br><span class="line">	KEY `idx_update_time` ( `update_time` ) </span><br><span class="line">) ENGINE <span class="operator">=</span> INNODB AUTO_INCREMENT <span class="operator">=</span> <span class="number">23</span> <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4 COMMENT <span class="operator">=</span> <span class="string">&#x27;新闻分类表&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `news_comment` (</span><br><span class="line">	`id` <span class="type">BIGINT</span> ( <span class="number">20</span> ) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增主键id&#x27;</span>,</span><br><span class="line">	`news_id` <span class="type">BIGINT</span> ( <span class="number">20</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;-1&#x27;</span> COMMENT <span class="string">&#x27;新闻id&#x27;</span>,</span><br><span class="line">	`user_id` <span class="type">BIGINT</span> ( <span class="number">20</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;-1&#x27;</span> COMMENT <span class="string">&#x27;作者id&#x27;</span>,</span><br><span class="line">	`parent_id` <span class="type">BIGINT</span> ( <span class="number">20</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;-1&#x27;</span> COMMENT <span class="string">&#x27;父评论id&#x27;</span>,</span><br><span class="line">	`is_top` TINYINT ( <span class="number">1</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;是否一级评论，只有两级评论&#x27;</span>,</span><br><span class="line">	`content` <span class="type">VARCHAR</span> ( <span class="number">100</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;评论内容&#x27;</span>,</span><br><span class="line">	`valid` TINYINT ( <span class="number">1</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;是否有效（0:无效，1有效）&#x27;</span>,</span><br><span class="line">	`create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">	`update_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY ( `id` ),</span><br><span class="line">	KEY `idx_update_time` ( `update_time` ),</span><br><span class="line">	KEY `idx_news_id` ( `news_id` ) </span><br><span class="line">) ENGINE <span class="operator">=</span> INNODB AUTO_INCREMENT <span class="operator">=</span> <span class="number">20</span> <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4 COMMENT <span class="operator">=</span> <span class="string">&#x27;新闻评论表&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_like_news` (</span><br><span class="line">	`id` <span class="type">BIGINT</span> ( <span class="number">20</span> ) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增主键id&#x27;</span>,</span><br><span class="line">	`news_id` <span class="type">BIGINT</span> ( <span class="number">20</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;-1&#x27;</span> COMMENT <span class="string">&#x27;新闻id&#x27;</span>,</span><br><span class="line">	`user_id` <span class="type">BIGINT</span> ( <span class="number">20</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;-1&#x27;</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">	`valid` TINYINT ( <span class="number">1</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;是否有效（0:无效，1有效）&#x27;</span>,</span><br><span class="line">	`create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">	`update_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY ( `id` ),</span><br><span class="line">	KEY `idx_update_time` ( `update_time` ),</span><br><span class="line">	KEY `idx_user_id` ( `user_id` ),</span><br><span class="line">	KEY `idx_news_id` ( `news_id` ) </span><br><span class="line">) ENGINE <span class="operator">=</span> INNODB AUTO_INCREMENT <span class="operator">=</span> <span class="number">25</span> <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4 COMMENT <span class="operator">=</span> <span class="string">&#x27;用户喜欢新闻表&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_star_news` (</span><br><span class="line">	`id` <span class="type">BIGINT</span> ( <span class="number">20</span> ) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增主键id&#x27;</span>,</span><br><span class="line">	`news_id` <span class="type">BIGINT</span> ( <span class="number">20</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;-1&#x27;</span> COMMENT <span class="string">&#x27;新闻id&#x27;</span>,</span><br><span class="line">	`user_id` <span class="type">BIGINT</span> ( <span class="number">20</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;-1&#x27;</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">	`valid` TINYINT ( <span class="number">1</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;是否有效（0:无效，1有效）&#x27;</span>,</span><br><span class="line">	`create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">	`update_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY ( `id` ),</span><br><span class="line">	KEY `idx_update_time` ( `update_time` ),</span><br><span class="line">	KEY `idx_user_id` ( `user_id` ),</span><br><span class="line">	KEY `idx_news_id` ( `news_id` ) </span><br><span class="line">) ENGINE <span class="operator">=</span> INNODB AUTO_INCREMENT <span class="operator">=</span> <span class="number">14</span> <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4 COMMENT <span class="operator">=</span> <span class="string">&#x27;用户收藏新闻表&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `feedback` (</span><br><span class="line">	`id` <span class="type">BIGINT</span> ( <span class="number">20</span> ) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增主键id&#x27;</span>,</span><br><span class="line">	`user_id` <span class="type">BIGINT</span> ( <span class="number">20</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;-1&#x27;</span> COMMENT <span class="string">&#x27;反馈人id&#x27;</span>,</span><br><span class="line">	`type_id` <span class="type">BIGINT</span> ( <span class="number">20</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;-1&#x27;</span> COMMENT <span class="string">&#x27;反馈类型id&#x27;</span>,</span><br><span class="line">	`content` <span class="type">VARCHAR</span> ( <span class="number">100</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;反馈内容&#x27;</span>,</span><br><span class="line">	`state` TINYINT ( <span class="number">1</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;反馈状态（0:未处理，1:处理）&#x27;</span>,</span><br><span class="line">	`remark` <span class="type">VARCHAR</span> ( <span class="number">50</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;备注&#x27;</span>,</span><br><span class="line">	`valid` TINYINT ( <span class="number">1</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;是否有效（0:无效，1有效）&#x27;</span>,</span><br><span class="line">	`create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">	`update_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY ( `id` ),</span><br><span class="line">	KEY `idx_update_time` ( `update_time` ),</span><br><span class="line">	KEY `idx_user_id` ( `user_id` ),</span><br><span class="line">	KEY `idx_type_id` ( `type_id` ) </span><br><span class="line">) ENGINE <span class="operator">=</span> INNODB AUTO_INCREMENT <span class="operator">=</span> <span class="number">9</span> <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4 COMMENT <span class="operator">=</span> <span class="string">&#x27;反馈表&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `feedback_type` (</span><br><span class="line">	`id` <span class="type">BIGINT</span> ( <span class="number">20</span> ) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增主键id&#x27;</span>,</span><br><span class="line">	`type_name` <span class="type">VARCHAR</span> ( <span class="number">20</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;反馈类型名&#x27;</span>,</span><br><span class="line">	`valid` TINYINT ( <span class="number">1</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;是否有效（0:无效，1有效）&#x27;</span>,</span><br><span class="line">	`create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">	`update_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY ( `id` ),</span><br><span class="line">KEY `idx_update_time` ( `update_time` ) </span><br><span class="line">) ENGINE <span class="operator">=</span> INNODB AUTO_INCREMENT <span class="operator">=</span> <span class="number">21</span> <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4 COMMENT <span class="operator">=</span> <span class="string">&#x27;反馈类型表&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h1 id="接口设计">接口设计</h1>
<table>
<colgroup>
<col style="width: 4%" />
<col style="width: 31%" />
<col style="width: 31%" />
<col style="width: 31%" />
</colgroup>
<thead>
<tr class="header">
<th>操作人</th>
<th>可</th>
<th>主要接口</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>管理员</td>
<td>对几乎所有内容的管理<br />用户认证审核<br />用户管理<br />新闻分类管理<br />新闻审核<br />新闻管理<br />新闻评论管理<br />反馈管理</td>
<td>/user/info/(list/update/add/delete)<br />/user/cert/(list/update/delete)<br />/news/category/(list/update/add/delete)<br />/news/info/(list/update/add/delete)<br />/comment/info/list<br />/comment/delete<br />/feedback/type/(list/update/add/delete)<br />/feedback/info/(list/update/delete)</td>
<td>就正常管理界面</td>
</tr>
<tr class="even">
<td>媒体人</td>
<td>新闻来源<br />需要通过认证审核可发新闻（可限制时间，一段时间后还需认证）<br />个人新闻增删改<br />个人信息修改提交认证<br />查看新闻<br />喜欢收藏新闻<br />评论新闻<br />反馈</td>
<td>/news/add<br />/news/delete<br />/news/{userId}/news<br />/news/{userId}/content<br />/news/{userId}/submit<br />/news/{userId}/cancel</td>
<td>编辑界面参考如下在此可看到自己所有新闻（所有状态），可编辑修改<br /><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/编辑.2mpj1wfngrs0.webp"
alt="编辑" /><br /><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/认证成功.62egr4bsnf40.webp"
alt="认证成功" /><br /><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/认证失败.rzhztkdrykg.webp"
alt="认证失败" /></td>
</tr>
<tr class="odd">
<td>一般用户</td>
<td>普通用户<br />个人信息修改<br />提交认证，通过认证可变为媒体人<br />查看新闻<br />喜欢收藏新闻<br />评论新闻<br />反馈</td>
<td>/news/{newsId}/comment<br />/news/{newsId}/star<br />/news/{newsId}/like<br />/news/{newsId}/unlike<br />/user/update<br />/user/delete<br />/user/cert/add<br />/user/{userId}/cert<br />/feedback/all<br />/feedback/add<br />/user/{userId}/feedback</td>
<td>个人主页参考如下展示基本个人信息同时，显示已过审核新闻，喜欢收藏新闻<br /><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/个人主页.9simffpbemw.webp"
alt="个人主页" /></td>
</tr>
<tr class="even">
<td>游客</td>
<td>查看新闻</td>
<td>/news/{newsId}<br />/comment/list<br />/user/{userId}<br />/user/{userId}/like<br />/user/like/list<br />/user/{userId}/star<br />/user/star/list<br />/news/category/all<br />/{cId}</td>
<td>查看新闻参考如下显示新闻标题、内容、分类、评论、推荐新闻等<br /><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/新闻详情.60zybiv50vg0.webp"
alt="新闻详情" /></td>
</tr>
</tbody>
</table>
<h1 id="新闻状态转换图">新闻状态转换图</h1>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/流程图.ty73c13oxog.webp"
alt="流程图" />
<figcaption aria-hidden="true">流程图</figcaption>
</figure>
<h1 id="部分数据流转图">部分数据流转图</h1>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/数据流转.7gr37ncgogw0.webp"
alt="数据流转" />
<figcaption aria-hidden="true">数据流转</figcaption>
</figure>
<h1 id="缓存设计">缓存设计</h1>
<p>新闻点赞缓存设计</p>
<p>https://wnhyang.github.io/article/1e9afcf1.html</p>
<p>新闻分类名和反馈类型名转为JSON字符串存储，因为这部分只由管理员修改，而且几乎不变，所以没有设置过期时间，并在修改时删除缓存，以做到数据一致</p>
<p>单个新闻分类名、单个反馈类型名、用户名、新闻标题、用户邮箱存对应字符串，有过期时间，也会在删除修改时删除缓存</p>
<h2 id="没做的">没做的</h2>
<p>新闻评论数、点击量的缓存hash</p>
<p>每个用户的新闻列表缓存set/zset</p>
<p>新闻简单信息缓存hash</p>
<p>热门新闻内容缓存hash</p>
<p>推荐列表list</p>
<p>收藏夹set/zset</p>
<p>新闻总热榜，分类热榜set/zset</p>
<h1 id="总结">总结</h1>
<h1 id="问题需要改进">问题/需要改进</h1>
<p>评论关联其他评论（一级评论或回复之间的），数据库需要再设计，删除需要重新考虑逻辑</p>
<p>在扩展功能时要考虑数据库表是否需要重新设计</p>
<p>简单的关联表（两个id组成的），可以省去关联表的id，由关联的两个id组成复合主键</p>
<h1 id="展望">展望</h1>
<ul>
<li><p>用户权限，可使用SpringSecurity等安全框架，同时对敏感信息加密存储</p></li>
<li><p>单个服务过大时，考虑拆分服务</p></li>
<li><p>分布式场景考虑，事务问题，定时任务同样也要考虑分布式下的问题</p></li>
<li><p>加入ES优化查询</p></li>
<li><p>数据表结构，索引优化</p></li>
</ul>
]]></content>
      <tags>
        <tag>Git/GitHub/Gitee</tag>
        <tag>Spring Boot</tag>
        <tag>Dubbo</tag>
        <tag>MySQL</tag>
        <tag>Mybatis/Mybatis-plus</tag>
        <tag>Redis</tag>
        <tag>RocketMQ</tag>
        <tag>Apollo</tag>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>好失败呀</title>
    <url>/article/c74b39ee.html</url>
    <content><![CDATA[<p>我本不是属于那种悲观的人，但在某天某个时辰某一秒会觉得自己真的好失败啊，当然大多是时候还是积极乐观的。失败可以被铭记，但绝不能陷入那样的情绪中去，他会摧毁一个人。写这篇文章就是发现自己的不足做下的总结并努力改变的一次记录。来吧，勇敢地面对它！</p>
<span id="more"></span>
<h1 id="事件">事件</h1>
<p>前几天上一节算法设计与分析实验课，老师让做两道“简单”的算法题，我饶有兴趣地准备施展身手，没想到啊没想到，开始半小时就放弃了，因为实在是不知道怎么做啊，始终没有一个我觉得较为完美的解决方案，虽然有一些想法了，但实施加完善还是有很多错误的。这下我的自信心彻底崩塌了，就这，我还想毕业直接出去找工作，有人要吗？难不成去工地搬砖去？好失败啊！</p>
<p>我是属于那种好胜心比较强的，将近2个小时一道题也没有头目，挺打击人的，之后4、5个小时对这俩题都充满反感，没有回过去看一眼，很多人是不是也会这样啊！但是还是要面对的，这才是我自己啊！</p>
<h1 id="开始解决">开始解决</h1>
<p>那些杀不死你的，会让你变得更强大！</p>
<p>下面是第一题在LeetCode搜到的</p>
<h1 id="编辑距离">72. 编辑距离</h1>
<p><a
href="https://leetcode-cn.com/problems/edit-distance/">题目地址</a></p>
<p>给你两个单词 word1 和 word2，请你计算出将 word1 转换成 word2
所使用的最少操作数 。</p>
<p>你可以对一个单词进行如下三种操作：</p>
<ol type="1">
<li>插入一个字符</li>
<li>删除一个字符</li>
<li>替换一个字符</li>
</ol>
<p>示例1： &gt;输入：word1 = "horse", word2 = "ros"<br />
&gt;输出：3<br />
&gt;解释：<br />
&gt;horse -&gt; rorse (将 'h' 替换为 'r')<br />
&gt;rorse -&gt; rose (删除 'r')<br />
&gt;rose -&gt; ros (删除 'e')</p>
<p>示例2： &gt;输入：word1 = "intention", word2 = "execution"<br />
&gt;输出：5<br />
&gt;解释：<br />
&gt;intention -&gt; inention (删除 't')<br />
&gt;inention -&gt; enention (将 'i' 替换为 'e')<br />
&gt;enention -&gt; exention (将 'n' 替换为 'x')<br />
&gt;exention -&gt; exection (将 'n' 替换为 'c')<br />
&gt;exection -&gt; execution (插入 'u')</p>
<p>题目描述大概就是这样，虽然示例和实验时的不一样，但题干是一模一样，这在LeetCode也算一道经典的题了！</p>
<h1 id="begin">begin</h1>
<p>不看题解不知道，这是一道动态规划的问题，啊？动态规划，早有耳闻它的大名，真遇到了，果然名不虚传啊。看题解有些费力，一些地方看不懂，所以我就先从<strong>动态规划</strong>下手了。</p>
<p>我在B站看了这个<a
href="https://www.bilibili.com/video/BV1xb411e7ww">动态规划视频</a>，真心觉得讲的非常好，学到了不少东西，尤其对动态规划这种思想深深敬佩，太厉害了。</p>
<p>视频里讲了三个例题，将动态规划呈现在初学者的面前。</p>
<p>下面是我的简要总结，有机会我会把三个例题详细说一说。</p>
<h1 id="动态规划">动态规划</h1>
<p>A 计数问题 B 最值问题 C 可行性问题</p>
<h2 id="一确定状态">一、确定状态</h2>
<blockquote>
<ol type="1">
<li>最后一步</li>
<li>子问题</li>
</ol>
</blockquote>
<h2 id="二转移方程">二、转移方程</h2>
<h2 id="三初始条件和边界问题">三、初始条件和边界问题</h2>
<blockquote>
<p>初始条件：用转移方程算不出来，需要手工定义<br />
边界情况：数组不能越界</p>
</blockquote>
<h2 id="四计算顺序">四、计算顺序</h2>
<p>做动态规划就按上面的来</p>
<h1 id="针对这个题">针对这个题</h1>
<p>一、初始条件</p>
<ol type="1">
<li>最后一步： dp[i][j] 代表 word1 到 i 位置转换成 word2 到 j
位置需要最少步数</li>
</ol>
<p>所以，</p>
<p>当 word1[i] == word2[j]，dp[i][j] = dp[i-1][j-1]；</p>
<p>当 word1[i] != word2[j]，dp[i][j] = min(dp[i-1][j-1], dp[i-1][j],
dp[i][j-1]) + 1</p>
<p>其中，dp[i-1][j-1] 表示替换操作，dp[i-1][j] 表示删除操作，dp[i][j-1]
表示插入操作。</p>
<p>注意，针对第一行，第一列要单独考虑，我们引入 '' 下图所示：</p>
<p><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/72.png" width="400" height="" alt="141-1" /></p>
<p>第一行，是 word1 为空变成 word2 最少步数，就是插入操作</p>
<p>第一列，是 word2 为空，需要的最少步数，就是删除操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(String word1, String word2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> word1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> word2.length();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 有一个字符串为空串</span></span><br><span class="line">        <span class="keyword">if</span> (n * m == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n + m;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// DP 数组</span></span><br><span class="line">        <span class="type">int</span>[][] D = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][m + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 边界状态初始化</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            D[i][<span class="number">0</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m + <span class="number">1</span>; j++) &#123;</span><br><span class="line">            D[<span class="number">0</span>][j] = j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算所有 DP 值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; m + <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> D[i - <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">down</span> <span class="operator">=</span> D[i][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">left_down</span> <span class="operator">=</span> D[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (word1.charAt(i - <span class="number">1</span>) != word2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    left_down += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                D[i][j] = Math.min(left, Math.min(down, left_down));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> D[n][m];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="题解参考">题解参考</h1>
<p>作者：powcai<br />
链接：https://leetcode-cn.com/problems/edit-distance/solution/zi-di-xiang-shang-he-zi-ding-xiang-xia-by-powcai-3/</p>
<p><a
href="https://leetcode-cn.com/problems/edit-distance/solution/">详细题解</a></p>
<h1 id="总结">总结</h1>
<p>如果想再试试其他类的动态规划问题可以尝试<a
href="https://leetcode-cn.com/problems/coin-change/">零钱兑换</a>、<a
href="https://leetcode-cn.com/problems/unique-paths/">不同路径</a>、<a
href="https://leetcode-cn.com/problems/jump-game/">跳跃游戏</a>、<a
href="https://leetcode-cn.com/problems/frog-jump/">青蛙过河</a>，要说的是这些题可能用动态规划解不是最优方案，但都是能做的。</p>
<p>说句题外话，前些日发生了一件事，“大连理工研究生自杀”，一个文章的标题是这样写的——大连理工研究生自杀，遗言曝光：这世界一直教我们成功，却没教会我们接受平庸。看到这样的遗言挺有感悟的，是啊，从生到是这个世界，周围的所有人、家长、老师、朋友，都在Push我们希望我们能成功，但成功的永远是少部分，成功这种向上的心态精神是好的，但对一些人会有很大的压力，包括我，反而没有人教会我们去接受平庸，平庸也不是什么坏事，平庸也可以不平凡啊！</p>
<p>追求成功的路上要放平心态，勇敢的面对失败，没什么大不了的。</p>
]]></content>
      <tags>
        <tag>数据结构&amp;算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>定时任务</title>
    <url>/article/1e885c14.html</url>
    <content><![CDATA[<h1 id="参考">参考</h1>
<p><a
href="https://chenssy.blog.csdn.net/article/details/32703499?spm=1001.2101.3001.6650.12&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-12.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-12.no_search_link&amp;utm_relevant_index=19">详解java定时任务</a></p>
<p><a
href="https://blog.csdn.net/u013332124/article/details/79603943?spm=1001.2101.3001.6650.16&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-16.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-16.no_search_link&amp;utm_relevant_index=23">Java
定时任务实现原理详解</a></p>
<p><a
href="https://blog.csdn.net/weixin_44742132/article/details/108091097?ops_request_misc=%7B%22request%5Fid%22%3A%22164165064716780274192796%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=164165064716780274192796&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-108091097.first_rank_v2_pc_rank_v29&amp;utm_term=%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&amp;spm=1018.2226.3001.4187">定时任务最简单的3种实现方法（超好用）</a></p>
<p><a
href="https://blog.csdn.net/u013987258/article/details/106671908?ops_request_misc=%7B%22request%5Fid%22%3A%22164165064716780274192796%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=164165064716780274192796&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-106671908.first_rank_v2_pc_rank_v29&amp;utm_term=%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&amp;spm=1018.2226.3001.4187">【定时任务】Spring
Boot 定时执行任务详解,每天定时几点钟执行任务</a></p>
<p><a
href="https://blog.csdn.net/hu_dongyang/article/details/114270232?ops_request_misc=%7B%22request%5Fid%22%3A%22164165064716780274192796%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=164165064716780274192796&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-3-114270232.first_rank_v2_pc_rank_v29&amp;utm_term=%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&amp;spm=1018.2226.3001.4187">SpringBoot定时任务@Scheduled注解详解</a></p>
<p><a
href="https://blog.csdn.net/qq_41463655/article/details/100839629?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-100839629.first_rank_v2_pc_rank_v29&amp;spm=1018.2226.3001.4187">job
定时任务的五种创建方式 || xxl-job 定时任务调度中心</a></p>
<p><a
href="https://blog.csdn.net/kegumingxin2626/article/details/72854823/">Java
定时任务的几种实现方式</a></p>
<p>看了上面这些可以简单应用一些定时任务了，上面文章写的很好，我就不多说了</p>
]]></content>
      <tags>
        <tag>定时任务</tag>
      </tags>
  </entry>
  <entry>
    <title>好想为农村做点什么</title>
    <url>/article/d36a1c6.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p>更新ing</p>
<span id="more"></span>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1949108901&amp;auto=1&amp;height=66">
</iframe>
]]></content>
      <tags>
        <tag>思考</tag>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>富文本编辑器CKEditor配置与使用</title>
    <url>/article/f2ba51cc.html</url>
    <content><![CDATA[<h1 id="起因">起因</h1>
<p>因为这学期 <strong>Java Web</strong>
大作业项目选的是在线新闻发布系统，有在线编辑器的需求，所以有了这篇文章。</p>
<p>最开始选的是 <strong>Markdown</strong>
编辑器，但又想了想，Markdown好想不怎么合适，因为对于编辑新闻来说，主要就是排版和图片这些，而且对于不擅长Markdown语法的编辑者更是十分困难去编写新闻，与Markdown相比，富文本更适合这个需求，它就像一个在线的Word，只需要操作上方的按钮即可完成简单的排版工作。</p>
<span id="more"></span>
<h1 id="开始">开始</h1>
<p>放弃了 <a href="https://pandao.github.io/editor.md/">Editor.md</a>
的Markdown编辑器，转向了 <a href="https://ckeditor.com/">CKEditor</a>
的富文本编辑器，之后便是搜索各种资料，再加上官方文档，已完成CKEditor的配置。</p>
<h1 id="参考">参考</h1>
<p><a
href="https://www.jianshu.com/p/47e25447b771">CKEditor5基本使用</a></p>
<p><a
href="https://blog.csdn.net/sinat_31986807/article/details/79667543">富文本编辑器CKEditor配置及使用</a></p>
<p><a
href="https://blog.csdn.net/wuhouchao/article/details/97645662">CKEditor
4.12.1富文本编辑器的配置与使用（详细版）</a></p>
<p><a
href="https://itmyhome.blog.csdn.net/article/details/17264627">CKEditor实现图片上传</a></p>
<p>CKEditor已升级到5.x以上的版本了，可能是因为版本较新，使用和写教程配置的不多，可参考的并不多，而且在阅读官方文档遇到很多困难，就我的感觉是，5以上版本给使用者自由度很大，因此配置也较复杂多样。</p>
<p>搞了很久之后终于放弃了版本5，最终选择的是版本4.8，上面参考链接对我帮助最大的是第二的和第三个。</p>
<blockquote>
<p>下载官方js文件</p>
</blockquote>
<p>进入<a
href="https://ckeditor.com/ckeditor-4/download/">官网</a>点击Release
notes选择4.8.0版本点击Download.Zip下载</p>
<p>备注：目前最新版本4.9.0有bug，所以用4.8.0版本</p>
<figure>
<img data-src="https://pic.downk.cc/item/5fd1f1bc3ffa7d37b364f273.jpg"
alt="官网" />
<figcaption aria-hidden="true">官网</figcaption>
</figure>
<p>访问官网有点慢，耐心等待就好</p>
<blockquote>
<p>官方js解压后复制到项目中，引入CKEditor的js文件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/Static/js/lib/ckEditor/ckeditor.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>页面中使用CKEditor</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在需要使用编辑器的地方插入textarea标签 --&gt;</span></span><br><span class="line">内容：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--将相应的控件替换成编辑器代码 若想要自定义高度加入&#123;height:&quot;xxx&quot;&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable constant_">CKEDITOR</span>.<span class="title function_">replace</span>(<span class="string">&#x27;content&#x27;</span>, &#123;<span class="attr">height</span>: <span class="string">&quot;475px&quot;</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/Static/js/lib/ckEditor/ckeditor.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable constant_">CKEDITOR</span>.<span class="title function_">replace</span>(<span class="string">&#x27;content&#x27;</span>, &#123;<span class="attr">height</span>: <span class="string">&quot;475px&quot;</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/addNews&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;sessionScope.user.user_id&#125;&quot;</span>/&gt;</span></span><br><span class="line">        标题：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        类别：<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;category_id&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;requestScope.categorys&#125;&quot;</span> <span class="attr">var</span>=<span class="string">&quot;category&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;category.category_id&#125;&quot;</span>&gt;</span>$&#123;category.category_name&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        内容：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;state&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发布&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果展示：</p>
<figure>
<img data-src="https://pic.downk.cc/item/5fd2264c3ffa7d37b3a48e77.jpg"
alt="新闻编辑" />
<figcaption aria-hidden="true">新闻编辑</figcaption>
</figure>
<p>后台取值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;addNews&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addNews</span><span class="params">(News news)</span> &#123;......&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>图片上传</p>
</blockquote>
<ul>
<li>清空图像预览框中的文字</li>
</ul>
<figure>
<img data-src="https://pic.downk.cc/item/5fd227693ffa7d37b3a5c082.jpg"
alt="原始图像上传" />
<figcaption aria-hidden="true">原始图像上传</figcaption>
</figure>
<p>找到项目下的ckeditor文件夹下的config.js中添加：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">config.<span class="property">image_previewText</span>=<span class="string">&#x27; &#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img data-src="https://pic.downk.cc/item/5fd228413ffa7d37b3a6df34.jpg" /></p>
<p>效果如下：</p>
<p><img data-src="https://pic.downk.cc/item/5fd228e33ffa7d37b3a7a5ca.jpg" /></p>
<ul>
<li>配置上传图片请求地址</li>
</ul>
<p>接着上面config.js中添加：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">config.<span class="property">filebrowserUploadUrl</span>=<span class="string">&quot;/xxx/uploadImage&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>参考的文章里都说了，这里还需要回传一段js脚本：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">out.println(<span class="string">&quot;&lt;script type=\&quot;text/javascript\&quot;&gt;&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">callback</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;CKEditorFuncNum&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;window.parent.CKEDITOR.tools.callFunction(&quot;</span> + callback+ <span class="string">&quot;,&#x27;&quot;</span> + imageContextPath + <span class="string">&quot;&#x27;,&#x27;&#x27;)&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;&lt;/script&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>有了这段代码，图片上传成功后，由你设置的上传地址 +
filename（自己可设定）相对地址，就可以使用这个图片，直接转到“图像”页面。这时可以对图片大小等进行修改。</p>
<figure>
<img data-src="https://pic.downk.cc/item/5fd22b873ffa7d37b3aabdf9.jpg"
alt="上传预览" />
<figcaption aria-hidden="true">上传预览</figcaption>
</figure>
<p>点击确定后编辑器如下：</p>
<figure>
<img data-src="https://pic.downk.cc/item/5fd22c893ffa7d37b3abd2c2.jpg"
alt="上传成功并显示" />
<figcaption aria-hidden="true">上传成功并显示</figcaption>
</figure>
<ul>
<li>上传的图片重新显示到页面</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/updateNews&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;news_id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;requestScope.news.news_id&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;sessionScope.user.user_id&#125;&quot;</span>/&gt;</span></span><br><span class="line">    标题：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;requestScope.news.title&#125;&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    类别：<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;category_id&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;requestScope.categorys&#125;&quot;</span> <span class="attr">var</span>=<span class="string">&quot;category&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;category.category_id&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                &lt;<span class="attr">c:if</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;category.category_id==requestScope.news.category_id&#125;&quot;</span>&gt;</span></span><br><span class="line">                    selected=&quot;true&quot;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">c:if</span>&gt;</span>&gt;$&#123;category.category_name&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    内容：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span>$&#123;news.content&#125;<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;state&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;news.state&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;修改&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>我的后台上传代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ImageUploadUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 图片上传工具类，包括ckeditor操作</span></span><br><span class="line"><span class="comment"> * created by Vinne.WU</span></span><br><span class="line"><span class="comment"> * 2019.7.17 14:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageUploadUtils</span> &#123;</span><br><span class="line">    <span class="comment">// 图片类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; fileTypes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        fileTypes.add(<span class="string">&quot;.jpg&quot;</span>);</span><br><span class="line">        fileTypes.add(<span class="string">&quot;.jpeg&quot;</span>);</span><br><span class="line">        fileTypes.add(<span class="string">&quot;.bmp&quot;</span>);</span><br><span class="line">        fileTypes.add(<span class="string">&quot;.gif&quot;</span>);</span><br><span class="line">        fileTypes.add(<span class="string">&quot;.png&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图片上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> DirectoryName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalStateException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Title</span> upload</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">upload</span><span class="params">(HttpServletRequest request, String DirectoryName)</span> <span class="keyword">throws</span> IllegalStateException,</span><br><span class="line">            IOException &#123;</span><br><span class="line">        <span class="comment">// 创建一个通用的多部分解析器</span></span><br><span class="line">        <span class="type">CommonsMultipartResolver</span> <span class="variable">multipartResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsMultipartResolver</span>(request.getSession().getServletContext());</span><br><span class="line">        <span class="comment">// 图片名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 判断 request 是否有文件上传,即多部分请求</span></span><br><span class="line">        <span class="keyword">if</span> (multipartResolver.isMultipart(request)) &#123;</span><br><span class="line">            <span class="comment">// 转换成多部分request</span></span><br><span class="line">            <span class="type">MultipartHttpServletRequest</span> <span class="variable">multiRequest</span> <span class="operator">=</span> (MultipartHttpServletRequest) request;</span><br><span class="line">            <span class="comment">// 取得request中的所有文件名</span></span><br><span class="line">            Iterator&lt;String&gt; iter = multiRequest.getFileNames();</span><br><span class="line">            <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">                <span class="comment">// 记录上传过程起始时的时间，用来计算上传时间</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">pre</span> <span class="operator">=</span>System.currentTimeMillis();</span><br><span class="line">                <span class="comment">// 取得上传文件</span></span><br><span class="line">                <span class="type">MultipartFile</span> <span class="variable">file</span> <span class="operator">=</span> multiRequest.getFile(iter.next());</span><br><span class="line">                <span class="keyword">if</span> (file != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 取得当前上传文件的文件名称</span></span><br><span class="line">                    <span class="comment">//String myFileName = file.getOriginalFilename();</span></span><br><span class="line">                    String oFileName=file.getOriginalFilename();</span><br><span class="line">                    <span class="comment">//时间命名图片</span></span><br><span class="line">                    String myFileName=Long.toString(pre)+oFileName.substring(oFileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">                    System.out.println(myFileName);</span><br><span class="line">                    <span class="comment">// 如果名称不为“”,说明该文件存在，否则说明该文件不存在</span></span><br><span class="line">                    <span class="keyword">if</span> (myFileName.trim() != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">                        <span class="comment">// 获得图片的原始名称</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">                        <span class="comment">// 获得图片后缀名称,如果后缀不为图片格式，则不上传</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>)).toLowerCase();</span><br><span class="line">                        <span class="keyword">if</span> (!fileTypes.contains(suffix)) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 获得上传路径的绝对路径地址(/upload)--&gt;</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> request.getSession().getServletContext().getRealPath(<span class="string">&quot;/&quot;</span> + DirectoryName);</span><br><span class="line"></span><br><span class="line">                        System.out.println(realPath);</span><br><span class="line">                        <span class="comment">//String realPath=request.getContextPath()+&quot;/Static/img&quot; ;</span></span><br><span class="line">                        <span class="comment">// 如果路径不存在，则创建该路径</span></span><br><span class="line">                        <span class="type">File</span> <span class="variable">realPathDirectory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(realPath);</span><br><span class="line">                        <span class="keyword">if</span> (realPathDirectory == <span class="literal">null</span> || !realPathDirectory.exists()) &#123;</span><br><span class="line">                            realPathDirectory.mkdirs();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 重命名上传后的文件名 111112323.jpg</span></span><br><span class="line">                        fileName = myFileName;</span><br><span class="line">                        <span class="comment">// 定义上传路径 .../upload/111112323.jpg</span></span><br><span class="line">                        <span class="type">File</span> <span class="variable">uploadFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(realPathDirectory + <span class="string">&quot;/&quot;</span> + fileName);</span><br><span class="line">                        System.out.println(uploadFile);</span><br><span class="line">                        file.transferTo(uploadFile);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ckeditor文件上传功能，回调，传回图片路径，实现预览效果。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> DirectoryName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Title</span> ckeditor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ckeditor</span><span class="params">(HttpServletRequest request, HttpServletResponse response, String DirectoryName)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> upload(request, DirectoryName);</span><br><span class="line">        <span class="comment">// 结合ckeditor功能</span></span><br><span class="line">        <span class="comment">// imageContextPath为图片在服务器地址，如upload/123.jpg,非绝对路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">imageContextPath</span> <span class="operator">=</span> request.getContextPath() + <span class="string">&quot;/&quot;</span> + DirectoryName + <span class="string">&quot;/&quot;</span> + fileName;</span><br><span class="line">        System.out.println(request.getContextPath());</span><br><span class="line">        System.out.println(DirectoryName);</span><br><span class="line">        System.out.println(fileName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建json回调消息</span></span><br><span class="line">        PrintWriter out=response.getWriter();</span><br><span class="line">        <span class="comment">// 返回&quot;图像&quot;选项卡并显示图片  request.getContextPath()为web项目名</span></span><br><span class="line">        out.println(<span class="string">&quot;&lt;script type=\&quot;text/javascript\&quot;&gt;&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">callback</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;CKEditorFuncNum&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;window.parent.CKEDITOR.tools.callFunction(&quot;</span> + callback</span><br><span class="line">                + <span class="string">&quot;,&#x27;&quot;</span> + imageContextPath + <span class="string">&quot;&#x27;,&#x27;&#x27;)&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/script&gt;&quot;</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为我的最终大作业是SSM框架的所以在配置SpringMVC是要加入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义文件上传解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设定默认编码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设定文件上传的最大值为10M，单位B，10*1024*1024 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设定文件上传时写入内存的最大值，如果小于这个参数不会生成临时文件，默认为10240 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;40960&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用过程中发现上传含中文图片回显会有问题，js代码传中文不行，所以将就把图片命名为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.currentTimeMillis();</span><br></pre></td></tr></table></figure>
<p>这样也能避免上传图片名称一样时覆盖问题，不过一定程度上会导致用户同一时间点上传图片覆盖，不过这个几率挺小的，毕竟毫秒单位啊。</p>
<h1 id="最后分享java-获取html文本img标签的src地址">最后分享“java
获取HTML文本IMG标签的src地址”</h1>
<p><a href="https://www.jianshu.com/p/5d57b5d9d768">参考</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取HTML文件里面的IMG标签的SRC地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> htmlText 带html格式的文本</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">GetHtmlImageSrcList</span><span class="params">(String htmlText)</span>   </span><br><span class="line">&#123;</span><br><span class="line">    List&lt;String&gt; imgSrc = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;src=\&quot;?(.*?)(\&quot;|&gt;|\\s+)&quot;</span>).matcher(htmlText);</span><br><span class="line">    <span class="keyword">while</span>(m.find())</span><br><span class="line">    &#123;    </span><br><span class="line">        imgSrc.add(m.group(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> imgSrc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 去掉所有的HTML,获取其中的文本信息 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> htmlText</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">GetHtmlText</span><span class="params">(String htmlText)</span>   </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">regEx_html</span> <span class="operator">=</span> <span class="string">&quot;&lt;[^&gt;]+&gt;&quot;</span>; <span class="comment">// 定义HTML标签的正则表达式 </span></span><br><span class="line">    <span class="type">Pattern</span> <span class="variable">p_html</span> <span class="operator">=</span> Pattern.compile(regEx_html, Pattern.CASE_INSENSITIVE);  </span><br><span class="line">    <span class="type">Matcher</span> <span class="variable">m_html</span> <span class="operator">=</span> p_html.matcher(htmlText);</span><br><span class="line">    htmlText = m_html.replaceAll(<span class="string">&quot;&quot;</span>); <span class="comment">// 过滤HTML标签</span></span><br><span class="line">    <span class="keyword">return</span> htmlText;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="这次分享结束">这次分享结束</h1>
<p>再次强调这是个人学习记录，谈不上教程</p>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>小米10周年</title>
    <url>/article/6433d656.html</url>
    <content><![CDATA[<h1
id="section"><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/一往无前.jpg" width = "500" height = "" alt="一往无前"/></h1>
<p>在长时间的预热后，终于在8月11日，雷军带来了它的10周年演讲和发布会。</p>
<p>作为一个非专业人士，想在这里谈一谈我的想法，本篇文章仅代表个人观点，如有说法不当之处，还望见谅。</p>
<span id="more"></span>
<h1 id="周年新品">10周年新品</h1>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/新品.jpg"
alt="新品" />
<figcaption aria-hidden="true">新品</figcaption>
</figure>
<p>作为一非专业的学生党，不想搬用官方或其他人关于新品的详细测评与分析，当然我看好几个关于这个10周年的视频了，我的推荐有下：</p>
<p><a href="https://www.bilibili.com/video/BV1g54y1U7W4">两分钟发布会 |
雷军小米十周年演讲，回顾十年发展历程，展望未来；“超大杯”至尊纪念版产品亮相，120W快充、透明电视以及1999不忘初心</a></p>
<p><a
href="https://www.bilibili.com/video/BV1yA411Y76c">【辛体验】雷军十周年巅峰之作，小米10至尊纪念版上手</a></p>
<p><a
href="https://www.bilibili.com/video/BV1gZ4y1K7ab">【享拆】小米10至尊纪念版拆解：拾级而上，一往无前</a></p>
<p><a
href="https://www.bilibili.com/video/BV12D4y1U7FA">「小白测评」“超级水桶”
关于小米10 Ultra 至尊纪念版的一切！</a></p>
<p><a
href="https://www.bilibili.com/video/BV18k4y1174d">「小白测评」120W+55W无线+20W追踪无线充
小米充电新品体验</a></p>
<p>等等还有很多</p>
<h1 id="我的一些想法">我的一些想法</h1>
<p>前面的都是铺垫，我不是专业的测评师和分析师，只是想谈一谈我的一些想法。</p>
<h1 id="我的手机">我的手机</h1>
<p>第一次听说小米是在初中大概是2014-2015左右，听同学说这个牌子的手机很厉害，性价比很高，这是小米的初印象。初中时候几乎没怎么接触智能手机，升高中后，终于拥有了第一部手机，是一部700元左右的Vivo，高中学习压力大，学校管的还严，玩手机的机会很少。直到上大学，旧的手机真的顶不住了，必须要换了，也就是现在用的一部中端的小米6x手机。</p>
<h1 id="想法">想法</h1>
<p>在那之后，就对手机和相关的科技产品很感兴趣，关注了很多科技博主，经常看相关测评视频，还有大厂的发布会，当然还有相关分析的文章，很有趣。</p>
<p>其实在去年小米9发布后，我就想写与之有关的文章了，但一直没有行动，直到这次10周年的机会，终于下决心写下这篇文章。</p>
<p>记得当时在看小米9的发布会（手机上看的），因为当时红米刚刚从小米独立出来，小米的规划就是类似于华为-荣耀，想要让小米去冲击高端市场，极致性价比交给红米来做。过去了解小米红米的人，都知道红米一直定位于中低端市场，小米的底就是红米的顶，红米一直有所限制没什么拿出手的出色产品。改革之后，小米跨开了迈向高端市场的第一步——小米9，说实话这一步是很难的，因为小米给人固有印象是性价比，要做高端产品，必须要将最优秀的科技堆叠在手掌大小的手机里，成本很自然的上升，而那些只关注价格而不了解手机本身的人都会那“小米初心变了”来“绑架”小米。记得当时战斗天使（小米9的内部代号）预热时，雷军不断发微博投票询问网友关于新产品的意见，生怕米粉们失望不喜欢，终于发布了，但价格定在了2999￥（原本是3299￥），终于是压在了3000￥以内，尽管这样，还是有很多唏嘘声。</p>
<p>一些人感受我也能体会到一些，但我还是很支持小米这样做的，不要让价格限制好产品。接下来一年小米收购美图，推出CC系列和一个美图定制版，这一款其实更像是OV家的产品，中端处理器+美图算法买到接近3000，很多人又坐不住了。作为一个计算机专业的学生，真心觉得研究出一套精妙算法很难，价钱上升也是理所当然的，很多人不理解也正常。下半年震惊业界的小米MIX
Alpha发布了，价值19999￥，但并没有量产发售。我觉得这个是小米真正下决心冲击高端市场信号。当时正是华为和三星折叠手机火热的时候，小米拿出这样的产品很有意思（好像是在示威）。</p>
<h1 id="年">10年</h1>
<p><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/RUOK.jpg" width = "250" height = "" alt="一往无前"/></p>
<p><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/10周年.jpg" width = "250" height = "" alt="一往无前"/></p>
<p>10年了，小米从一个十几人的团队变成一家世界500强的企业，很厉害的呀！</p>
<p>雷军也是一个网红了，尤其是那句R U OK ？ 哈哈哈</p>
<p>当然雷军与小米面临的机遇与挑战还有很多。</p>
<h1 id="回想小米当年的那些口号">回想小米当年的那些口号：</h1>
<blockquote>
<p>探索黑科技，小米为发烧而生</p>
</blockquote>
<blockquote>
<p>让每个人都能享受科技的乐趣</p>
</blockquote>
<blockquote>
<p>做米粉心中最酷的公司</p>
</blockquote>
<blockquote>
<p>永远相信美好的事情即将发生</p>
</blockquote>
<blockquote>
<p>始终坚持做“感动人心，价格厚道”的好产品</p>
</blockquote>
<blockquote>
<p>优秀的公司赚取利润，伟大的公司赢得人心</p>
</blockquote>
<blockquote>
<p>用望远镜看创新，用显微镜看品质</p>
</blockquote>
<blockquote>
<p>厚道的人运气不会太差</p>
</blockquote>
<p>小米10周年很多元素都是在致敬过去，小米10至尊纪念版中，致敬小米6亮银版，致敬经典首次采用陶瓷机身，致敬小米8透明探索版。还有那个Redmi
K30至尊纪念版最经典的1999￥和经典的包装，简直让人疯狂。最后还要谈的一点是，小米生态，小米应该是众多互联网公司，在这方面下最大功夫的公司了。生活中各种智能设备和常用必需品小米都在做，而且还很优秀，真的是“让每个人都享受科技的乐趣”，回眼看现在，哪家大厂还在做百元机，很少了，要么就是没有什么性价比的产品，小米去没放弃这个市场，虽然利润不高而且耗时费心思，但还在做（如：Redmi
9A），很让人感动的。</p>
<h1 id="一往无前">一往无前</h1>
<p>近几年美国对中国打压越来越过分，很奇怪，世界要经济全球化，美国要逆全球化，还不是杀敌1000自损800。</p>
<p>中国一定行！！！</p>
]]></content>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>归并排序</title>
    <url>/article/1599bffe.html</url>
    <content><![CDATA[<p>在本节中我们所讨论的算法都基于归并这个简单的操作，即将两个有序的数组归并成个更大的有序数组。很快人们就根据这个操作发明了一种简单的递归排序算法:归并排序。要将一个数组排序，可以先(递归地)将它分成两半分别排序，然后将结果归并起来。你将会看到，归并排序最吸引人的性质是它能够保证将任意长度为<span
class="math inline">\(N\)</span>的数组排序所需时间和<span
class="math inline">\(NlogN\)</span>成正比;它的主要缺点则是它所需的额外空间和<span
class="math inline">\(N\)</span>成正比。</p>
<p><a
href="https://wnhyang.github.io/article/a444b428.html">目录</a></p>
<span id="more"></span>
<h1 id="原地归并的抽象方法">原地归并的抽象方法</h1>
<p>实现归并的一种直截了当的办法是将两个不同的有序数组归并到第三个数组中，两个数组中的元素应该都实现了Comparable接口。实现的方法很简单，创建一个适当大小的数组然后将两个输人数组中的元素一个个从小到大放
人这个数组中。</p>
<p>但是，当用归并将-个大数组排序时，我们需要进行很多次归并，因此在每次归并时
都创建一个新数组来存储排序结果会带来问题。我们更希望有一种能够在原地归并的方法，这样就可以先将前半部分排序，再将后半部分排序，然后在数组中移动元素而不需要使用额外的空间。你可以先停下来想想应该如何实现这一点，乍一看很容易做到，但实际上已有的实现都非常复杂，尤其是和使用额外空间的方法相比。</p>
<p>尽管如此，将原地归并抽象化仍然是有帮助的。与之对应的是我们的方法签名merge(a,
lo,mid, hi), 它会将子数组a[lo.
.mid]和a[mid+1..hi]归并成一个有序的数组并将结果存放在a[1o..hi]中。下面的代码只用几行就实现了这种归并。它将涉及的所有元素复制到一个辅助数组中，再把归并的结果放回原数组中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将a[lo..mid]和a[mid+1..hi]归并</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(Comparable[] a, <span class="type">int</span> lo, <span class="type">int</span> mid, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> lo, j = mid + <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> lo; k &lt;= hi; k++)  <span class="comment">//将a[lo..hi]复制到aux[lo..hi]</span></span><br><span class="line">           aux[k] = a[k];</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> lo; k &lt;= hi; k++)  <span class="comment">//归并回到a[lo..hi]</span></span><br><span class="line">           <span class="keyword">if</span> (i &gt; mid) a[k] = aux[j++];</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi) a[k] = aux[i++];</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (less(aux[j], aux[i])) a[k] = aux[j++];</span><br><span class="line">           <span class="keyword">else</span> a[k] = aux[i++];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/merge.png"
alt="原地归并的抽象方法的轨迹" />
<figcaption aria-hidden="true">原地归并的抽象方法的轨迹</figcaption>
</figure>
<h1 id="自顶向下的归并排序">自顶向下的归并排序</h1>
<p>下面算法基于原地归并的抽象实现了另一种递归归并，这也是应用高效算法设计中分治思想的最典型的一个例子。这段递归代码是归纳证明算法能够正确地将数组排序的基础:如果它能将两个子数组排序，它就能够通过归并两个子数组来将整个数组排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Merge</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Comparable[] aux;    <span class="comment">//归并所需的辅助数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span> &#123;</span><br><span class="line">        aux = <span class="keyword">new</span> <span class="title class_">Comparable</span>[a.length];   <span class="comment">//一次性分配空间</span></span><br><span class="line">        sort(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数组a[lo..hi]排序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a, <span class="type">int</span> lo, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">        sort(a, lo, mid);   <span class="comment">//将左半边排序</span></span><br><span class="line">        sort(a, mid + <span class="number">1</span>, hi);   <span class="comment">//将右半边排序</span></span><br><span class="line">        merge(a, lo, mid, hi);  <span class="comment">//归并结果（代码见“原地归并的抽象方法”）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/mergesortTD.png"
alt="自顶向下的归并排序中归并结果的轨迹" />
<figcaption
aria-hidden="true">自顶向下的归并排序中归并结果的轨迹</figcaption>
</figure>
<h1 id="对小规模子数组使用插入排序">对小规模子数组使用插入排序</h1>
<p>用不同的方法处理小规模问题能改进大多数递归算法的性能，因为递归会使小规模问题中方法的调用过于频繁，所以改进对它们的处理方法就能改进整个算法。对排序来说，我们已经知道插人排序(或者选择排序)非常简单，因此很可能在小数组上比归并排序更快。和之前一样，一幅可视轨迹图能够很好地说明归并排序的行为方式。下图中的可视轨迹图显示的是改良后的归并排序的所有操作。使用插人排序处理小规模的子数组(比如长度小于15)一般可以将归并排序的运行时间缩短10%
~ 15%。</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/mergesortTD-bars.png"
alt="改进了小规模子数组排序方法后的自顶向下的归并排序的可视轨迹" />
<figcaption
aria-hidden="true">改进了小规模子数组排序方法后的自顶向下的归并排序的可视轨迹</figcaption>
</figure>
<h1 id="不将元素复制到辅助数组">不将元素复制到辅助数组</h1>
<p>我们可以节省将数组元素复制到用于归并的辅助数组所用的时间(但空间不行)。要做到这一点我们要调用两种排序方法，一种将数据从输人数组排序到辅助数组，一种将数据从辅助数组排序到输人数组。这种方法需要一些技巧，我们要在递归调用的每个层次交换输人数组和辅助数组的角色。</p>
<h1 id="自底向上的归并排序">自底向上的归并排序</h1>
<p>递归实现的归并排序是算法设计中分治思想的典型应用。我们将一个大问题分割成小问题分别解决，然后用所有小问题的答案来解决整个大问题。尽管我们考虑的问题是归并两个数组，实际上我们归并的数组大多数都非常小。实现归并排序的另一种方法是先归并那些微型数组，然后再成对归并得到的子数组，如此这般，直到我们将整个数组归并在一起。这种实现方法比标准递归方法所需要的代码量更少。首先我们进行的是两两归并(把每个元素想象成一个大小为1的数组)，然后是四四归并(将两个大小为2的数组归并成一个有4个元素的数组)，然后是八八的归并，一直下去。在每轮归并中，最后一次归并的第二个子数组可能比第一个子数组要小(但这对merge()方法不是问题)，如果不是的话所有都应该一一样，而在轮中子数组的大小会翻倍。此过程的可视轨迹如下图所示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergeBU</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Comparable[] aux;    <span class="comment">//归并所需的辅助数组</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//merge()方法的代码请见“原地归并的抽象方法”</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span>&#123;</span><br><span class="line">        <span class="type">int</span> n=a.length;</span><br><span class="line">        aux=<span class="keyword">new</span> <span class="title class_">Comparable</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> sz=<span class="number">1</span>;sz&lt;n;sz=sz+sz)    <span class="comment">//sz子数组大小</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> lo=<span class="number">1</span>;lo&lt;n-sz;lo+=sz+sz)    <span class="comment">//lo：子数组索引</span></span><br><span class="line">                merge(a,lo,lo+sz-<span class="number">1</span>,Math.min(lo+sz+sz-<span class="number">1</span>,n-<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/mergesortBU.png"
alt="d" />
<figcaption aria-hidden="true">d</figcaption>
</figure>
<h1 id="排序算法的复杂度">排序算法的复杂度</h1>
<p>学习归并排序的一个重要原因是它是证明计算复杂性领域的一个重要结论的基础，而计算复杂性能够帮助我们理解排序自身固有的难易程度。计算复杂性在算法设计中扮演着非常重要的角色，而这个结论正是和排序算法的设计直接相关的，因此接下来我们就要详细地讨论它。</p>
<p>研究复杂度的第一步是建立一个计算模型。一般来说，研究者会尽量寻找一个和问题相关的最简单的模型。对排序来说，我们的研究对象是基于比较的算法，它们对数组元素的操作方式是由主键的比较决定的。一个基于比较的算法在两次比较之间可能会进行任意规模的计算，但它只能通过主键之间的比较得到关于某个主键的信息。因为我们局限于实现了Comparable接口的对象，本章中的所有算法都属于这一类
(注意，我们忽略了访问数组的开销)。在本书第5章中，我们会讨论不局限于Comparable元素的算法。</p>
<h1 id="参考资料">参考资料</h1>
<p>《算法（第4版）》第二章排序2.2归并排序</p>
<p><a href="https://algs4.cs.princeton.edu/">本书网站</a></p>
]]></content>
      <tags>
        <tag>数据结构&amp;算法</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务学习</title>
    <url>/article/3dfd0f5c.html</url>
    <content><![CDATA[<h1 id="参考">参考</h1>
<p>官网：<a
href="https://spring.io/projects/spring-cloud">https://spring.io/projects/spring-cloud</a></p>
<p>B站：<a
href="https://www.bilibili.com/video/BV18E411x7eT">https://www.bilibili.com/video/BV18E411x7eT</a></p>
<p>CSDN笔记：</p>
<p>https://blog.csdn.net/u011863024/article/details/114298270</p>
<p>https://blog.csdn.net/u011863024/article/details/114298282</p>
<p>https://blog.csdn.net/u011863024/article/details/114298288</p>
<p>版本选择</p>
<p><a
href="https://start.spring.io/actuator/info">https://start.spring.io/actuator/info</a></p>
<span id="more"></span>
<h1 id="简介">简介</h1>
<p>花了大概半个多月的时间学习微服务，主要是看<a
href="https://www.bilibili.com/video/BV18E411x7eT">B站周阳老师的视频</a>，一边看视频一边自己实践一边记笔记（视频评论区有“课代表”已经整理的不错了，参考中可查看）</p>
<p>可以看到下图IDEA项目已经非常臃肿了，所有的项目实操几乎都在这了，这就是我目前构建的最大、最复杂的项目了</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.6hftj58tr9s0.png"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>可以看到下图Typora笔记中已经记录了5w多字，所以不太适合整个作为几篇博客</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.3g6vewfimug0.png"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>微服务学习的内容可以用下图概括</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/xxx.4dt6x07jup60.png"
alt="xxx" />
<figcaption aria-hidden="true">xxx</figcaption>
</figure>
<p>上面提到的</p>
<p>服务注册中心除了Consul，都有实操记录，最后Seata配置一直出问题所以暂时放弃（因为视频中的版本是0.9，而我在整个构建中都使用与目前最新版本相接近的，所以在配置1.4.1出现了问题）</p>
<h1 id="下载">下载</h1>
<p>我会将我的整个项目源码和笔记放在我的<a
href="https://github.com/wnhyang/cloud2020">GitHub</a>和<a
href="https://gitee.com/wnhyang/cloud2020">Gitee</a>仓库，另外还有一些必要的软件使用时资料都有记录，欢迎自取！</p>
<h1 id="最后">最后</h1>
<p><strong>Spring Cloud组件总结</strong></p>
<table>
<colgroup>
<col style="width: 3%" />
<col style="width: 21%" />
<col style="width: 11%" />
<col style="width: 21%" />
<col style="width: 21%" />
<col style="width: 21%" />
</colgroup>
<thead>
<tr class="header">
<th>组件</th>
<th>简介</th>
<th>分类</th>
<th>官网</th>
<th>笔记</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Eureka</td>
<td>Eureka is the Netflix Service Discovery Server and Client.</td>
<td>服务注册中心</td>
<td><a
href="https://docs.spring.io/spring-cloud-netflix/docs/2.2.7.RELEASE/reference/html/#service-discovery-eureka-clients">link</a></td>
<td><a
href="https://blog.csdn.net/u011863024/article/details/114298270#15_Eureka_1148">link</a></td>
<td>eureka中文解释：int.(因找到某物，尤指问题的答案而高兴)我发现了，我找到了</td>
</tr>
<tr class="even">
<td>Zookeeper</td>
<td>ZooKeeper is a centralized service for maintaining configuration
information, naming, providing distributed synchronization, and
providing group services.</td>
<td>服务注册中心</td>
<td><a href="https://zookeeper.apache.org/">link</a></td>
<td><a
href="https://blog.csdn.net/u011863024/article/details/107434932">link</a></td>
<td>zookeeper中文解释：n.动物园管理员</td>
</tr>
<tr class="odd">
<td>Consul</td>
<td>Consul is a service mesh solution providing a full featured control
plane with service discovery, configuration, and segmentation
functionality.</td>
<td>服务注册中心</td>
<td><a href="https://www.consul.io/">link</a></td>
<td><a
href="https://blog.csdn.net/u011863024/article/details/114298270#31_Consul_2333">link</a></td>
<td>consul中文解释：n.领事</td>
</tr>
<tr class="even">
<td>Ribbon</td>
<td>Ribbon is a client-side load balancer that gives you a lot of
control over the behavior of HTTP and TCP clients.</td>
<td>服务调用</td>
<td><a
href="https://docs.spring.io/spring-cloud-netflix/docs/2.2.7.RELEASE/reference/html/#spring-cloud-ribbon">link</a></td>
<td><a
href="https://blog.csdn.net/u011863024/article/details/114298270#36_Ribbon_2780">link</a></td>
<td>ribbon中文解释：n.(用于捆绑或装饰的)带子;丝带;带状物;</td>
</tr>
<tr class="odd">
<td>OpenFeign</td>
<td>Feign is a declarative web service client. It makes writing web
service clients easier.</td>
<td>服务调用</td>
<td><a
href="https://docs.spring.io/spring-cloud-openfeign/docs/2.2.7.RELEASE/reference/html/">link</a></td>
<td><a
href="https://blog.csdn.net/u011863024/article/details/114298270#43_OpenFeign_3304">link</a></td>
<td>feign中文意思：v.假装，装作，佯装(有某种感觉或生病、疲倦等)</td>
</tr>
<tr class="even">
<td>Hystrix</td>
<td>Netflix has created a library called Hystrix that implements the
circuit breaker pattern.</td>
<td>服务降级</td>
<td><a
href="https://docs.spring.io/spring-cloud-netflix/docs/2.2.7.RELEASE/reference/html/#circuit-breaker-spring-cloud-circuit-breaker-with-hystrix">link</a></td>
<td><a
href="https://blog.csdn.net/u011863024/article/details/114298270#47_Hystrix_3696">link</a></td>
<td>hystrix中文意思：n.豪猪属;猬草属;豪猪;豪猪亚属</td>
</tr>
<tr class="odd">
<td>GateWay</td>
<td>Spring Cloud Gateway aims to provide a simple, yet effective way to
route to APIs and provide cross cutting concerns to them such as:
security, monitoring/metrics, and resiliency.</td>
<td>服务网关</td>
<td><a
href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.7.RELEASE/reference/html/">link</a></td>
<td><a
href="https://blog.csdn.net/u011863024/article/details/114298282#66_GateWay_771">link</a></td>
<td>gateway中文意思：n.网关;途径;门道;手段</td>
</tr>
<tr class="even">
<td>Config</td>
<td>Spring Cloud Config provides server-side and client-side support for
externalized configuration in a distributed system.</td>
<td>服务配置</td>
<td><a
href="https://docs.spring.io/spring-cloud-config/docs/2.2.7.RELEASE/reference/html/">link</a></td>
<td><a
href="https://blog.csdn.net/u011863024/article/details/114298282#74_Config_1524">link</a></td>
<td>-</td>
</tr>
<tr class="odd">
<td>Bus</td>
<td>Spring Cloud Bus links nodes of a distributed system with a
lightweight message broker.</td>
<td>服务总线</td>
<td><a
href="https://docs.spring.io/spring-cloud-bus/docs/2.2.3.RELEASE/reference/html/">link</a></td>
<td><a
href="https://blog.csdn.net/u011863024/article/details/114298282#78_Bus_2078">link</a></td>
<td>-</td>
</tr>
<tr class="even">
<td>Stream</td>
<td>Spring Cloud Stream is a framework for building message-driven
microservice applications.</td>
<td>消息队列</td>
<td><a
href="https://docs.spring.io/spring-cloud-stream/docs/3.0.10.RELEASE/reference/html/spring-cloud-stream.html#spring-cloud-stream-overview-introducing">link</a></td>
<td><a
href="https://blog.csdn.net/u011863024/article/details/114298282#83_Stream_2576">link</a></td>
<td>-</td>
</tr>
<tr class="odd">
<td>Sleuth</td>
<td>Spring Cloud Sleuth implements a distributed tracing solution for
Spring Cloud.</td>
<td>服务跟踪</td>
<td><a
href="https://docs.spring.io/spring-cloud-sleuth/docs/2.2.7.RELEASE/reference/html/">link</a></td>
<td><a
href="https://blog.csdn.net/u011863024/article/details/114298282#92_Sleuth_3191">link</a></td>
<td>sleuth中文意思：n.侦探</td>
</tr>
<tr class="even">
<td>Nacos</td>
<td>Nacos致力于帮助您发现、配置和管理微服务。</td>
<td>服务注册中心、服务配置、服务总线</td>
<td><a
href="https://nacos.io/zh-cn/docs/what-is-nacos.html">link</a></td>
<td><a
href="https://blog.csdn.net/u011863024/article/details/114298282#96_Nacos_3488">link</a></td>
<td>NAme + COnfiguration + Service</td>
</tr>
<tr class="odd">
<td>Sentinel</td>
<td>Sentinel是面向分布式服务架构的流量控制组件，主要以流量为切入点，从流量控制、熔断降级、系统自适应保护等多个维度来帮助您保障微服务的稳定性。</td>
<td>服务降级</td>
<td><a
href="https://sentinelguard.io/zh-cn/docs/introduction.html">link</a></td>
<td><a
href="https://blog.csdn.net/u011863024/article/details/114298288#111_Sentinel_240">link</a></td>
<td>sentinel中文意思：n.哨兵</td>
</tr>
<tr class="even">
<td>Seata</td>
<td>Seata
是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务。</td>
<td>分布式事务</td>
<td><a href="https://seata.io/zh-cn/">link</a></td>
<td><a
href="https://blog.csdn.net/u011863024/article/details/114298288#139_Seata_2287">link</a></td>
<td>-</td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>Git/GitHub/Gitee</tag>
        <tag>Spring Boot</tag>
        <tag>MySQL</tag>
        <tag>Mybatis/Mybatis-plus</tag>
        <tag>Redis</tag>
        <tag>Spring Cloud Alibaba</tag>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>我们会变得越来越孤独吗</title>
    <url>/article/da855e87.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p>相信绝大多数人都已经看到了<a
href="http://www.stats.gov.cn/">国家统计局</a>发布的关于2021中国人口的一些数据了吧，其中最引人注意的就是“2021中国人口净增长48万”这个数据</p>
<p>多家主流媒体都对于这份报告进行了报道分析</p>
<p>新华网：http://www.news.cn/politics/2022-01/17/c_1128272028.htm</p>
<p>国家统计局：http://www.stats.gov.cn/tjsj/sjjd/202201/t20220118_1826538.html</p>
<p>搜狐网：https://www.sohu.com/a/517495560_115571</p>
<p>人民网：http://finance.people.com.cn/n1/2022/0117/c1004-32333012.html</p>
<p>央视网：https://news.cctv.com/2022/01/17/ARTIurqSgQPHzFJLQhdEuPog220117.shtml</p>
<p>当然还包括，BBC、华尔街日报等国外媒体</p>
<p>数据公布后，理所当然的冲上当天热搜，成为所有人争相讨论的话题。</p>
<p>我也就想依此展开我的讨论“我们会越来越孤独吗？”</p>
<span id="more"></span>
<h2 id="第一反应">第一反应</h2>
<p>当我第一次看到这样的数据，第一反应就是震惊，尽管我之前早有“预言”——结婚的越来越少，要孩子的也会越来越少。可真当我看到这样的数据时，还是很震惊的，真没想到这么快啊。</p>
<p>真的要出现了！中国人口会负增长吗？种种想法很自然的出现在脑子中。</p>
<h2 id="向好">向好</h2>
<p>还是先声明，我不是专家，我只是发表一点自己的浅薄认识，意见不同，还望见谅。</p>
<p>有数据表明（是真有数据，不是措辞），近年来，中国人口自然增长率连续降低，所以说，这真的要从好久说起了。</p>
<p>我们中学时都学过地理，其中有一节课讲的是发达国家与发展中国家，其中我记得，那时书本上写的发达国家（主要是大部分西欧国家、美国、加拿大、澳大利亚、新西兰、日本、韩国等），他们的人口自然增长率就很低，甚至一些国家增长率一直都是负数；而对于发展中国家（除发达国家外，其余绝大多是都是啦），这些人口自然增长率就比较高。当时的结论大概就是越发达的国家人口自然增长率反而越低，是负相关的。那这样看，我们中国明显是往好的方向发展中的呀！这个全世界都不能否定，不然怎么会使得老霸主们撕破脸皮遏制我们呢。中国向好，全世界都看到了，中国人更是自豪又欣慰，毕竟我们的今天都是我们用勤劳的双手和艰辛的汗水拼来的。</p>
<h2 id="太快了">太快了</h2>
<p>回想上面的话题起源，为什么说“越发达的国家，人口自然增长率越低呢？”这也是我要讨论的“我们会越来越孤独吗？”。</p>
<p>首先还是我之前文章里就提到的，近几十年来发展得太快了，前后对比相同时间内，新增的“知识”太多了，这里用“知识”这个词是因为我找不到合适的词概括。总结来说“知识”密度变大了，“知识”/时间这个比值在变大。这说明了什么呢？当下年轻人更难了，他们?不，是我们，相同时间内经历的更多了，压力更大了。房子车子什么都不用说了，更关键的是，贫富差距越来越大，而且已经富了的会越来越富，穷的却很难摆脱困境。</p>
<h2 id="独一无二">独一无二</h2>
<p>如果我不知道，其实我不痛苦，但我知道。就是说，在现在这样发达的互联网环境下，信息都是互通的，加上整体教育水平提高，所有人，没错我是说所有人，都会在这样的快时代下发生一些变化。每个人都更加独一无二，无法替代。每个人都更加有思想，都能为自己为时代发声。都变得不那么简单了，复杂了起来。</p>
<h2 id="不将就">不将就</h2>
<p>我们已经通过网络看过太多太多，很难再将就了。不是过去的“父母之命媒妁之言”了，就算是到了最后境地也不愿意勉勉强强过一辈子。遇不到就不可以将就！</p>
<h2 id="看得开">看得开</h2>
<p>也就因为时代压力，很多选择，独自一人，活出精彩。现在很多呀，赚够一些钱，裸辞，玩去！何其潇洒自在啊！</p>
<h1 id="结">结</h1>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1441758494&amp;auto=1&amp;height=66">
</iframe>
<p>每个人有属于每个人活法。</p>
]]></content>
      <tags>
        <tag>思考</tag>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>/article/ff8068c0.html</url>
    <content><![CDATA[<p>本节的主题是快速排序，它可能是应用最广泛的排序算法了。快速排序流行的原因是它实现简单、适用于各种不同的输人数据且在一般应用中比其他排序算法都要快得多。快速排序引人注目的特点包括它是原地排序(只需要一个很小的辅助栈)，且将长度为<span
class="math inline">\(N\)</span>的数组排序所需的时间和<span
class="math inline">\(MlgN\)</span>成正比。我们已经学习过的排序算法都无法将这两个优点结合起来。另外，快速排序的内循环比大多数排序算法都要短小，这意味着它无论是在理论上还是在实际中都要更快。它的主要缺点是非常脆弱，在实现时要非常小心才能避免低劣的性能。已经有无数例子显示许多种错误都能致使它在实际中的性能只有平方级别。幸好我们将会看到，由这些错误中学到的教训也大大改进了快速排序算法，使它的应用更加广泛。</p>
<p><a
href="https://wnhyang.github.io/article/a444b428.html">目录</a></p>
<span id="more"></span>
<h1 id="基本算法">基本算法</h1>
<p>快速排序是一种分治的排序算法。它将一个数组分成两个子数组，将两部分独立地排序。快速排序和归并排序是互补的:归并排序将数组分成两个子数组分别排序，并将有序的子数组归并以将整个数组排序;而快速排序将数组排序的方式则是当两个子数组都有序时整个数组也就自然有序了。在第一种情况中，递归调用发生在处理整个数组之前;在第二种情况中，递归调用发生在处理整个数组之后。在归并排序中，一个数组被等分为两半;在快速排序中，切分(
partition )的位置取决于数组的内容。快速排序的大致过程如下图所示。</p>
<p><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/quicksort-overview.png" /></p>
<h1 id="快速排序">快速排序</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Quick</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span> &#123;</span><br><span class="line">        <span class="comment">//shuffle(a)消除对输入的依赖</span></span><br><span class="line">        sort(a,<span class="number">0</span>,a.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a, <span class="type">int</span> lo, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> partition(a, lo, hi);   <span class="comment">//切分</span></span><br><span class="line">        sort(a, lo, j - <span class="number">1</span>);         <span class="comment">//将左半部分a[lo..j-1]排序</span></span><br><span class="line">        sort(a, j + <span class="number">1</span>, hi);         <span class="comment">//将右半部分a[j+1..hi]排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/quicksort.png"
alt="quicksort.png" />
<figcaption aria-hidden="true">quicksort.png</figcaption>
</figure>
<p>快速排序递归地将子数组a[lo..hi]排序，先用partition()方法将a[j]放到一个合适的位置，然后再用递归调用将其他位置的元素排序。</p>
<p>该方法的关键在于切分，这个过程使得数组满足下面三个条件:</p>
<p>对于某个j，a[j] 已经排定;</p>
<p>a[lo]到a[j-1]中的所有元素都不大于a[j];</p>
<p>a[j+1]到a[hi]中的所有元素都不小于a[j]。</p>
<p>我们就是通过递归地调用切分来排序的。</p>
<h1 id="快速排序的切分">快速排序的切分</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将数组切分为a[lo..j-1]，a[i]，a[j+1..hi]</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(Comparable[] a, <span class="type">int</span> lo, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> lo, j = hi + <span class="number">1</span>;      <span class="comment">//左右扫描指针</span></span><br><span class="line">    <span class="type">Comparable</span> <span class="variable">v</span> <span class="operator">=</span> a[lo];       <span class="comment">//切分元素</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;      <span class="comment">// 扫描左右，检查扫描是否结束并交换元素</span></span><br><span class="line">        <span class="keyword">while</span> (less(a[++i], v)) <span class="keyword">if</span> (i == hi) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">while</span> (less(v, a[--j])) <span class="keyword">if</span> (j == lo) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j) <span class="keyword">break</span>;</span><br><span class="line">        exch(a, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    exch(a, lo, j);             <span class="comment">//将v=a[j]放入正确的位置</span></span><br><span class="line">    <span class="keyword">return</span> j;                   <span class="comment">//a[lo..j-1]&lt;=a[i]&lt;=a[j+1..hi] 达成</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/partitioning.png"
alt="切分轨迹（每次交换前后的数组内容）" />
<figcaption
aria-hidden="true">切分轨迹（每次交换前后的数组内容）</figcaption>
</figure>
<p>之后还有些讨论的内容这里不再详写，请看原著！</p>
<h1 id="性能特点">性能特点</h1>
<p>数学上已经对快速排序进行了详尽的分析，因此我们能够精确地说明它的性能。大量经验也证明了这些分析，它们是算法调优时的重要工具。</p>
<p>快速排序切分方法的内循环会用一个递增的索引将数组元素和一个定值比较。这种简洁性也是快速排序的一个优点，很难想象排序算法中还能有比这更短小的内循环了。例如，归并排序和希尔排序一般都比快速排序慢，其原因就是它们还在内循环中移动数据。</p>
<p>快速排序另一个速度优势在于它的比较次数很少。排序效率最终还是依赖切分数组的效果，而这依赖于切分元素的值。切分将一个较大的随机数组分成两个随机子数组，而实际上这种分割可能发生在数组的任意位置(对于元素不重复的数组而言)。</p>
<p>下面我们来分析这个算法，看看这种方法和理想方法之间的差距。看原著！</p>
<h1 id="算法改进">算法改进</h1>
<p>快速排序是由C.A.R
Hoare在1960年发明的，从那时起就有很多人在研究并改进它。改进快速排序总是那么吸引人，发明更快的排序算法就好像是计算机科学界的“老鼠夹子”，而快速排序就是夹子里的那块奶酪。几乎从Hoare第-次发
表这个算法开始，人们就不断地提出各种改进方法。并不是所有的想法都可行，因为快速排序的平衡性已经非常好，改进所带来的提高可能会被意外的副作用所抵消。但其中一些，也是我们现在要介绍的，非常有效。</p>
<p>如果你的排序代码会被执行很多次或者会被用在大型数组上(特别是如果它会被发布成一个库函数，排序的对象数组的特性是未知的)，那么下面所讨论的这些改进意见值得你参考。需要注意的是，你需要通过实验来确定改进的效果并为实现选择最佳的参数。一般来说它们能将性能提升20%
~ 30%。</p>
<p>以下三小结略</p>
<h1 id="切换到插入排序">切换到插入排序</h1>
<h1 id="三取样切分">三取样切分</h1>
<h1 id="熵最优的排序">熵最优的排序</h1>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/quicksort-bars.png"
alt="使用了三取样切分和插入排序转换的快速排序" />
<figcaption
aria-hidden="true">使用了三取样切分和插入排序转换的快速排序</figcaption>
</figure>
<h1 id="三向切分的快速排序">三向切分的快速排序</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Quick3way</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用此方法的公用方法sort()请见快速排序算法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a, <span class="type">int</span> lo, <span class="type">int</span> hi)</span> &#123; </span><br><span class="line">        <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lt</span> <span class="operator">=</span> lo, i=lo+<span class="number">1</span>, gt = hi;</span><br><span class="line">        <span class="type">Comparable</span> <span class="variable">v</span> <span class="operator">=</span> a[lo];</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= gt) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> a[i].compareTo(v);</span><br><span class="line">            <span class="keyword">if</span>      (cmp &lt; <span class="number">0</span>) exch(a, lt++, i++);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) exch(a, i, gt--);</span><br><span class="line">            <span class="keyword">else</span>              i++;</span><br><span class="line">        &#125; <span class="comment">// 现在a[lo..lt-1] &lt; v = a[lt..gt] &lt; a[gt+1..hi]成立</span></span><br><span class="line">        sort(a, lo, lt-<span class="number">1</span>);</span><br><span class="line">        sort(a, gt+<span class="number">1</span>, hi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/partitioning3.png"
alt="三分切分的轨迹（每次迭代循环之后的数组内容）" />
<figcaption
aria-hidden="true">三分切分的轨迹（每次迭代循环之后的数组内容）</figcaption>
</figure>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/quicksort3-bars.png"
alt="三向切分的快速排序的可视轨迹" />
<figcaption aria-hidden="true">三向切分的快速排序的可视轨迹</figcaption>
</figure>
<h1 id="参考资料">参考资料</h1>
<p>《算法（第4版）》第二章排序2.3快速排序</p>
<p><a href="https://algs4.cs.princeton.edu/">本书网站</a></p>
]]></content>
      <tags>
        <tag>数据结构&amp;算法</tag>
      </tags>
  </entry>
  <entry>
    <title>我回来了！</title>
    <url>/article/f2f8b3b2.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p>很长时间没有更新自己的博客了，主要还是因为这段时间经历了太多了，很多事都让我烦躁，一直处于一个自己无法掌控的状态，在这样的状态下，我确实不知道怎么去“回归”。现在我调整的差不多了，终于可以掌握我的生活节奏了。</p>
<p>所以，我回来了！！！！！</p>
<span id="more"></span>
<h1 id="月">1、2月</h1>
<p>这件事必须要从疫情开始说起，2021年底全国已经有了疫情的小反弹，尽管这与前几年相比，已经不算是严峻，但还是需要注意的。也因为这样，我第一次没有回家过年，在上海度过了我的第一个异地春节。上海的春节与许多大城市的春节一样，许许多多“打工人”都乘上春运的“火车”与家人朋友团聚了，这些大城市也就变得空虚了一些。在这里，我完全感受不到春节的乐趣，看到热闹也是想“快乐是他们的，我什么也没有”。</p>
<h1 id="月-1">3-5月</h1>
<p>春节过的很快，不像学生时代，春节有着一个月的假期，对于“打工人”只有可怜的几天。</p>
<p>很快，开工了。</p>
<p>按照我的计划，一边实习一边完成毕业设计，但就在3月中旬，疫情爆发了。</p>
<p>从3月中旬，上海逐渐开始进入封控、管控、防范的三区管理模式，很不幸，我们小区很早就进入第一批封控区，被迫开始蓄发蓄须😂</p>
<p>与此同时，抗原和核酸如雨点一样不断打来。刚开始还可以点外卖，买点东西吃，解决温饱问题，但随着疫情形式严峻，真的是混不到吃的，可怜巴巴。</p>
<p>这段时间每天解决吃饭问题真的是首要大事，谁能想到，在21世纪的上海竟然还要每天为吃饭问题担心。😭</p>
<p>尝试很多买菜APP（美团、饿了么、盒马、叮咚等等，这些APP也因为上海疫情冲上APP榜首之位🤔），定上早早的闹钟，倒数10个数，开抢，瞬间，提示的都是“系统拥挤，请稍后再试”，完全进不去的，再刷新一下，好了，不用抢了，已经没了。。。</p>
<p>这段时间是过的最差的时间，我都是靠一些速食（方便面、面包之类）撑下去的。还有除了每天要担心吃饭问题外，还有毕业设计让人心烦。懂的都懂，第一次做毕设写论文，完全没个谱，不知道如何下笔。。。</p>
<p>又过了一段时间，有了一点社区物资，同时也通过一些渠道买到了一些蔬菜、油盐刀之类的东西，可以做简单“食物”了。🥶</p>
<p>从春日到炎夏，整整3个月，从厨艺上讲确实有很大长进，但是真的要憋疯了，不能出小区是最基础的，一旦有封楼封户的直接寸步难移。同时学校那边还有好多事，但因为我这边疫情的原因，我很多事都无法完成，要么找人帮忙，要么只能硬拖下去等待解封。</p>
<p>没有办法，不知道是疫情现状还是其他什么原因，从3月到现在，不断有裁员的消息（主要指互联网行业），具体的知道的当然都知道了，不知道就去搜一些吧。😂</p>
<p>年初大事件主要就是俄乌大战和动荡的股市（基民们应该都知道发生了什么）吧。具体原因我也分析不出个大概，反正现实就是裁员、毁三方，成千上万的人进入流动人才市场，金三银四在今年成为个笑话。有幸，我也成为其中一员，结束了实习和未来的工作计划。疫情加上大环境的影响，我的状态变得很差，懒散、拖沓和焦虑成为我这段时间的主旋律。</p>
<p>最后解封前的一个月过的算是好的（与之前相比），很容易能买到吃的，每天只是吃喝玩乐，感叹自己真的要废了，但却一直没决心完全改变。</p>
<h1 id="月-2">6月</h1>
<p>我们这个小区应该是最晚解封的一批小区，直到6月3号还是4号才迈出了通往新世界的大门。那天，理了留了3个月的头发，买了雪糕吃。从初春一直到端午，哎。🤧之后马上处理一些学校、毕业、工作的事情了。</p>
<p>解封了一段时间，很多公司也渐渐开始复工，人们又开始忙起来了。而我呢，在上海又待了整整一个6月。从上海解封后就有大批人员开始返乡行动，有的是短期回乡探望，有的是长期离去谋求新的发展。对于我，因为家乡的疫情政策和自己还有些事情没有处理完，怕在隔离期间受到影响一直没有回去。这也导致我处于一种十分尴尬的境地——有家，回不了。</p>
<p>经历这半年，真的成长好多，不管是生活还是工作都有很多新认识。这种东西很难讲，只能个人去体会。这段时间如果能统计我微信语音/视频电话聊天时长，那将非常惊人。就在这段时间，我时不时在一些群或和一些人微信电话/视频聊天，轻聊聊半小时，长聊直接3、4小时。平常我是没这么多话，实在是憋疯了，就瞎聊、胡扯，扯上几个小时，可有意思了。😁</p>
<p>也是在这个月确定将要去杭州，在月底把所有事了结了，收拾好装备，决心重新出发，离开上海。</p>
<h1 id="月-3">7月</h1>
<p>也就是现在。</p>
<p>乘着开往杭州的高铁，离开了待了半年的上海。可惜，待了这么久也没有好好转一转，很多上海知名地标都没见过。😑
有机会再来吧！</p>
<h1 id="结">结</h1>
<p>今年发生了好多事，但愿明天会更好吧！</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1351664230&amp;auto=1&amp;height=66">
</iframe>
]]></content>
      <tags>
        <tag>思考</tag>
        <tag>自己</tag>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>我讨厌强迫症，我讨厌完美主义</title>
    <url>/article/fca98ffc.html</url>
    <content><![CDATA[<h1 id="如题">如题</h1>
<p>我讨厌强迫症，我讨厌完美主义</p>
<p>强迫症这个词也不知道是什么时候有的，反正，到现在我越发觉得自己就是有点强迫症啊！还有那该死的完美主义！</p>
<span id="more"></span>
<h1 id="浅谈">浅谈</h1>
<p>这是一篇吐槽向的文章，没有什么大太的实际意义，只是想记录一下而已。</p>
<p>最近看公司的代码，我能理解，每个人都有不同想法，都有自己的技术风格，代码规范，但是在公司，一个项目经过多人的流转，在一些部分还是存在很明显的不合理之处。</p>
<p>作为一个强迫症，实在是难受😖</p>
<p>明明可以那样统一规范，但它就是那样存在着。</p>
<p>太痛苦了，看到自己不满意的规范、设计真是心痛🤐这该死的强迫症！</p>
<p>比强迫症更痛苦就是有着完美主义的强迫症🤢</p>
<p>因为它们的存在，我始终有一种压力，没有他人驱动，但有我啊！</p>
<p>始终想要做的很好，很完美，容不了一点差错和遗憾，但tm太累了太累了太累了🥸</p>
<h1 id="最后">最后</h1>
<p>吐槽向、发泄类，切勿认真，希望不会给你带来消极情绪🤡</p>
]]></content>
      <tags>
        <tag>思考</tag>
        <tag>自己</tag>
      </tags>
  </entry>
  <entry>
    <title>我最想拥有的超能力</title>
    <url>/article/bc5ba5ee.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p>如题，这篇文章“天马行空”，就是想说一说自己最想拥有的超能力！</p>
<p>如果有兴趣，继续看下去吧！</p>
<span id="more"></span>
<h1 id="超能力">超能力</h1>
<p>超能力？</p>
<p>应该所有人都有想过吧，是偏爱点石成金还是长生不老呢？</p>
<p>确实，小孩子也不是那么容易满足的，我心里也是</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/1510578430145_8ed8c8c8c87311e79e1200163e00073a.44a1mmt6iro0.webp"
alt="1510578430145_8ed8c8c8c87311e79e1200163e00073a" />
<figcaption
aria-hidden="true">1510578430145_8ed8c8c8c87311e79e1200163e00073a</figcaption>
</figure>
<p>非要把葫芦七兄弟和十二生肖凑齐不可，甚至还带上X战警，哈哈哈</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/1486238012585_9b6c40cfeb1311e6ae4b80e650026b90.32kbpbb4tg20.webp"
alt="1486238012585_9b6c40cfeb1311e6ae4b80e650026b90" />
<figcaption
aria-hidden="true">1486238012585_9b6c40cfeb1311e6ae4b80e650026b90</figcaption>
</figure>
<p>but，我这里用的是“最”，并且没有“之一”，所以一定要选出一个</p>
<p>你会选什么呢？🤔</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/1484941269778_647a9ee1df4811e6a9da80e650026b90.43d98pxgkn80.webp"
alt="1484941269778_647a9ee1df4811e6a9da80e650026b90" />
<figcaption
aria-hidden="true">1484941269778_647a9ee1df4811e6a9da80e650026b90</figcaption>
</figure>
<h1 id="瞬间移动">瞬间移动</h1>
<p>有想到吗？我确实最想拥有瞬间移动的超能力！！！</p>
<p>不是兔符咒，不是快银，就是瞬间移动，有点像《七龙珠》中悟空的</p>
<p><img data-src="https://pic.imgdb.cn/item/61f5576a2ab3f51d918e7e06.gif" /></p>
<p>为什么会是这个呢？</p>
<p>点石成金，长生不老，上天入地，金刚不坏。。。</p>
<p>这些不香吗？</p>
<h1 id="理由">理由</h1>
<p>那就说一说我理由</p>
<p>首先，这东西不需要比较，不，是不能比较</p>
<p>虽然小时候，经常这样想：</p>
<p>我：我可以发射激光，打到你，你就死了☠️</p>
<p>你：长生不老，无敌，死不掉😁</p>
<p>我：金刚狼最牛，死不掉</p>
<p>你：万磁王完美克制</p>
<p>我：😒</p>
<p>你：😏</p>
<p><img data-src="https://pic.imgdb.cn/item/61f557382ab3f51d918e3fb3.gif" /></p>
<p>经常这样比来比去，最后谁也不服，现在想想可真有意思</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/1490459602055_c2d4a757117811e79bd080e650026b90.4ju7g80i8za0.webp"
alt="1490459602055_c2d4a757117811e79bd080e650026b90" />
<figcaption
aria-hidden="true">1490459602055_c2d4a757117811e79bd080e650026b90</figcaption>
</figure>
<p>就像象棋，中国象棋，哪有什么谁一定强啊，还有又不是楚河汉界，比个锤子啊？</p>
<p>不能老想着钢铁侠和蜘蛛侠谁厉害吧，那不无休止了</p>
<p>选择瞬间移动，主要还是因为感受比较深，怎么说？先来个例子，点石成金不就是有钱吗？确实可以做很多事</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/F5388113255E6DB829D7FFE9095DF7779AF0BF08_size26_w440_h440.4h9jvtovxte0.webp"
alt="F5388113255E6DB829D7FFE9095DF7779AF0BF08_size26_w440_h440" />
<figcaption
aria-hidden="true">F5388113255E6DB829D7FFE9095DF7779AF0BF08_size26_w440_h440</figcaption>
</figure>
<p>赶上了，金钱豹🥰</p>
<p>还有长身不老，上天入地，金刚不坏，这些都能用上吗？</p>
<p>我要逃离这个公交（蹭热度🐶）、</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/1000.3rqopdiz2us0.webp"
alt="1000" />
<figcaption aria-hidden="true">1000</figcaption>
</figure>
<p>马上到北欧看极光、瞬间到家，这些它们（上面那些超能力）办不到啊，深有体会是因为高中，每周上下学，都要做那公交（没有卡农😂），还经常等不到，太痛苦了，什么坐公交听音乐睡觉啥的，我都不太行，做不到电视里拍的那样，只会觉得咋还不到啊？尤其远途，时不时打开手机地图看一看到哪了，离目的地还有多远。再加上现在，大学开学/回家也很相似，还有现在实习上下班，尤其是现在要过年了，我竟然要在这过，有生以来第一次不在家过年，真的想回家啊！</p>
<p>有了瞬间移动，真就可以“上一秒在柏林落大雨，下一秒在曼谷天气晴”了。</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/1542450049600_746819e1ea5211e8bd95186590e027b5.5cs5icwitcg0.webp"
alt="1542450049600_746819e1ea5211e8bd95186590e027b5" />
<figcaption
aria-hidden="true">1542450049600_746819e1ea5211e8bd95186590e027b5</figcaption>
</figure>
<p>多帅哦！！！</p>
<p>那样就可以睡到9：50，然后瞬间到公司，哈哈哈</p>
<p>什么？？？就这点追求？？？没出息，白枉费了这能力，打工人打麻了吧</p>
<p>重新来，我要先把中国走个遍，什么泰山、华山的来一遍，什么长城、敦煌的瞧一瞧。。。</p>
<p>太多了，中国来个遍都好久了，再出国门看一看</p>
<p>也不知道这算是快节奏中慢起来，还是慢节奏中快起来？🥱</p>
<p>还有。。。好多事可以做</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/1519660751730_fc5d53361b0d11e89e1200163e00073a.6eyey1r07cg0.webp"
alt="1519660751730_fc5d53361b0d11e89e1200163e00073a" />
<figcaption
aria-hidden="true">1519660751730_fc5d53361b0d11e89e1200163e00073a</figcaption>
</figure>
<h1 id="总结">总结</h1>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1887917182&amp;auto=1&amp;height=66">
</iframe>
<p>整篇文章都是自己的幻想，嘿嘿</p>
]]></content>
      <tags>
        <tag>思考</tag>
        <tag>自己</tag>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>所有人都在教你怎么成功，但没有人告诉你怎么接受失败</title>
    <url>/article/f7365684.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p>最近好多考研的同学都进行复试了，当然有人欢喜有人忧，没希望的同学也已经开始谋划新出路了。今年考研人数达到了惊人的450w，按往常的1/3的录取率来讲，必然有近300w考生落榜。也因为竞争激烈，今年的分数线也被拔得很高，考研的难度也异常的大。更可怕的是往届率，从一些数据看到，今年的往届考研的比例也越来越大，甚至有些边工作边考研的。</p>
<p><img data-src="https://inews.gtimg.com/newsapp_bt/0/13556281903/1000" /></p>
<span id="more"></span>
<h1 id="杂谈">杂谈</h1>
<p>经历过高考的都知道，竞争是多么激烈。如今高考过去了，考研来了，又开始新一轮的竞争了！</p>
<p>考研人有多么不容易，相信都有目共睹，早出晚归，几乎没有娱乐时间，每天的任务就是学习、学习、还是学习。但凡是在学校、见到过年底的图书馆，就知道考研人有多么努力。尤其是在年底，即将迎来决战的时候，更是如此。图书馆和自习室到处都是努力的人，与高考相比真是有过之而无不及啊！</p>
<p>可尽管这样了，还是要面对现实，接受现实。今年是考研最难的一年，也是就业最难的一年，外加上疫情影响，股市跌宕，全社会经济不景气显而易见。今年所有的求职者都在感叹没有金三银四，投了很多简历都石沉大海，没有回响。但是今年又有这么多的毕业生，该怎么办呢？</p>
<p>我不喜欢贩卖焦虑，但我又是又不自然的流露焦虑。哎。。。</p>
<p>之前在一个公众要里看过一篇文章，大概讲的是一个大学生还是研究生，在学校因为遇到了挫折，意外死亡的事。很悲惨的故事，但绝对真实。他背景是，从小被教育要获得成功，要出类拔萃，他确实也做到了，是那种“别人家的孩子”。也是因为从小培养了成功的目标，并且确实没经历过多么大的失败，所以心理承受能力不足，难以接受失败，最终导致了悲剧的结果。文章里有一句话我一直记得“所有人都在教你怎么成功，但没有人告诉你怎么接受失败”。是啊，从小身边的人都要我们好好学习、天天向上，毕业了找个好工作，幸福生活。随着年龄的增长，发现这件事越来越没那么容易。这段时间，在上海封闭管理，快递外卖的都别说了，没了，社区居委会做的也不是很好，导致一段时间没什么吃的，之后都是靠居民们自发的团购养活起的。困在出租屋里，一个人，除了忙毕设论文，没事就瞎想，如果怎么样，该多好！现在困在这里，真的太难了！从去年9月算的话，我已经半年没回家了，太想了。加上这段时间在上海的感受，就觉得在家过小日子是真爽啊。越来越接受平凡的自己，就像本题，要学会接受失败，勇敢面对，当然不是躺平哈，别搞错了。另外更重要的一点是转换思维，成功是由自己来定义的。</p>
<h1 id="总结">总结</h1>
<p>总结很简单分享一首歌</p>
<p>https://www.bilibili.com/bangumi/play/ep350170</p>
]]></content>
      <tags>
        <tag>思考</tag>
        <tag>自己</tag>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>排序</title>
    <url>/article/a444b428.html</url>
    <content><![CDATA[<p>我们的排序算法模板适用于任何实现了Comparable接口的数据类型。遵守Java惯例的好处是很多你希望排序的数据都实现了Comparable接口。例如，Java中封装数字的类型Integer和Double,以及String和其他许多高级数据类型(如File和URL)都实现了Comparable接口。因此你可以直接用这些类型的数组作为参数调用我们的排序方法。</p>
<span id="more"></span>
<h1 id="初级排序算法"><a
href="https://wnhyang.github.io/article/2e8ba7ec.html">初级排序算法</a></h1>
<h1 id="归并排序"><a
href="https://wnhyang.github.io/article/1599bffe.html">归并排序</a></h1>
<h1 id="快速排序"><a
href="https://wnhyang.github.io/article/ff8068c0.html">快速排序</a></h1>
<h1 id="优先队列"><a
href="https://wnhyang.github.io/article/602ee0a8.html">优先队列</a></h1>
<h1 id="应用"><a
href="https://wnhyang.github.io/article/3a2cfc6c.html">应用</a></h1>
]]></content>
      <tags>
        <tag>数据结构&amp;算法</tag>
      </tags>
  </entry>
  <entry>
    <title>排序应用</title>
    <url>/article/3a2cfc6c.html</url>
    <content><![CDATA[<p>排序如此有用的一个主要原因是，在一个有序的数组中查找一个元素要比在一个无序的数组中查找简单得多。人们用了一个多世纪发现在一本按姓氏排序的电话黄页中查找某个人的电话号码最容易。现在，数字音乐作家们将歌曲文件按照作家名或是歌曲名排序，搜索引擎按照搜素结果的重要性的高低显示结果，电子表格按照某一列的排序结果显示所有栏，矩阵处理工具将一个对称矩阵的真实特征值按照降序排列，等等。只要队列是有序的，很多其他任务也更容易完成，比如在本书最后的有序索引中查找某项，或是从一列长长的邮件列表或者投票人列表或者网站列表中删去重复项，或是在统计学计算中剔除异常值、查找中位数或者计算比例。</p>
<span id="more"></span>
<p>在许多看似无关的领域中，排序其实仍然是个重要的子问题。
数据压缩、计算机图形学、计算生物学、供应链管理、组合优化、社会选择和投票等，不一而足。我们在本章中学习的算法也在开发本书其他章节的强大算法的过程中起到了关键作用。</p>
<p>通用排序算法是最重要的，因此我们首先会考虑些在构建适用于
多种情况的排序算法时需要注意的实际问题。虽然部分话题只适用于Java,但每个问题都仍然是所有系统需要解决的。</p>
<p>我们的主要目的是为了说明，尽管我们所学习的各种算法的思想相对简单，但它们的适用领域仍然广泛经过验证的各种排序算法的应用列表很长，我们在这里只会涉及其中的一小部分，一些是科学领域的。一
些是算法领域的。 还有一些是商业领域的。
在练习中你们还能找到更多例子。本书的网站上还有更多。</p>
<p><a
href="https://wnhyang.github.io/article/a444b428.html">目录</a></p>
<h1 id="将各种数据排序">将各种数据排序</h1>
<h1 id="交易事务">交易事务</h1>
<h1 id="指针排序">指针排序</h1>
<h1 id="不可变的键">不可变的键</h1>
<h1 id="廉价的交换">廉价的交换</h1>
<h1 id="多种排序方法">多种排序方法</h1>
<h1 id="多健数组">多健数组</h1>
<h1 id="使用比较器实现优先多列">使用比较器实现优先多列</h1>
<h1 id="稳定性">稳定性</h1>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/stability.png"
alt="从另一个键上排序的稳定性" />
<figcaption aria-hidden="true">从另一个键上排序的稳定性</figcaption>
</figure>
<h1 id="我应该使用哪种排序算法">我应该使用哪种排序算法</h1>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/sort-characteristics.png"
alt="从另一个键上排序的稳定性" />
<figcaption aria-hidden="true">从另一个键上排序的稳定性</figcaption>
</figure>
<h1 id="将原始类型数据排序">将原始类型数据排序</h1>
<h1 id="java系统库的排序算法">java系统库的排序算法</h1>
<h1 id="问题的规约">问题的规约</h1>
<h1 id="找出重复元素">找出重复元素</h1>
<h1 id="排名">排名</h1>
<h1 id="优先队列">优先队列</h1>
<h1 id="中位数与顺序统计">中位数与顺序统计</h1>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/median.png"
alt="用切分找出中位数" />
<figcaption aria-hidden="true">用切分找出中位数</figcaption>
</figure>
<h1 id="排序应用一览">排序应用一览</h1>
<h1 id="商业计算">商业计算</h1>
<h1 id="信息搜索">信息搜索</h1>
<h1 id="运筹学">运筹学</h1>
<h1 id="事件驱动模拟">事件驱动模拟</h1>
<h1 id="数值计算">数值计算</h1>
<h1 id="组合搜索">组合搜索</h1>
<h1 id="参考资料">参考资料</h1>
<p>《算法（第4版）》第二章排序2.3快速排序</p>
<p><a href="https://algs4.cs.princeton.edu/">本书网站</a></p>
]]></content>
      <tags>
        <tag>数据结构&amp;算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构绪论</title>
    <url>/article/b06cc6ec.html</url>
    <content><![CDATA[<p>数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题的学科。</p>
<h1 id="程序设计-数据结构-算法">程序设计 = 数据结构 + 算法</h1>
<p>数据结构在程序设计中占据了相当重要的地位。</p>
<span id="more"></span>
<h1 id="基本概念和术语">基本概念和术语</h1>
<h1 id="数据">数据</h1>
<p>数据：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。</p>
<h1 id="数据元素">数据元素</h1>
<p>数据元素：是组成数据、有一定意义的基本单位，在计算机中通常作为整体处理。也被称为记录。</p>
<h1 id="数据项">数据项</h1>
<p>数据项：一个数据元素可以有若干个数据项组成。数据项是数据不可分割的最小单位。</p>
<h1 id="数据对象">数据对象</h1>
<p>数据对象：是性质相同的数据元素的集合，是数据的子集。</p>
<h1 id="数据结构">数据结构</h1>
<p>数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。</p>
<h1 id="逻辑结构与物理结构">逻辑结构与物理结构</h1>
<h1 id="逻辑结构">逻辑结构</h1>
<ol type="1">
<li>集合结构</li>
<li>线性结构</li>
<li>树形结构</li>
<li>图形结构</li>
</ol>
<h1 id="物理结构">物理结构</h1>
<ol type="1">
<li>顺序存储结构
顺序存储结构：是把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。</li>
<li>顺序存储结构
顺序存储结构：是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。</li>
</ol>
<h1 id="抽象数据类型">抽象数据类型</h1>
<h1 id="数据类型">数据类型</h1>
<p>数据类型：是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。</p>
<h1 id="抽象数据类型-1">抽象数据类型</h1>
<p>抽象数据类型（Abstract Data
Type，ADT）：是指一个数学模型及定义在该模型上的一组操作。</p>
<h1 id="总结">总结</h1>
<p>一句话，数据结构非常重要！！！</p>
]]></content>
      <tags>
        <tag>数据结构&amp;算法</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建自己的个人博客（hexo）</title>
    <url>/article/101acc41.html</url>
    <content><![CDATA[<p>首先感谢B站UP主<a
href="https://space.bilibili.com/384068749/">CodeSheep</a></p>
<p>本篇文章主要来源于UP主的<a
href="https://www.bilibili.com/video/BV1Yb411a7ty">手把手教你从0开始搭建自己的个人博客
|无坑版视频教程| hexo</a><br />
依照着这个视频和视频中各位弹幕大佬终于完成了自己的个人博客搭建，因为UP视频中操作的是MACOS系统，与我使用的Window还有有些不同的，所以写下本篇文章，用以方便其他人搭建个人博客</p>
<p>个人想法：如视频中UP所讲的，程序员确实应该拥用自己的博客，用以记录学到的技术，犯过的错误，等等。这对于一个人的提高还是很有帮助的，学习嘛，就是一个不断犯错，不断总结的过程嘛。<br />
下面开始了！！！</p>
<span id="more"></span>
<h1 id="准备">准备</h1>
<p>利用<a href="https://hexo.io/">hexo</a>（A fast, simple &amp;
powerful blog framework）搭建个人博客需要先装好<a
href="https://nodejs.org/en/">node.js</a>和<a
href="https://git-scm.com/">Git</a></p>
<p>node.js需要装LTS版及长期支持版，官网首页就有<br />
Git需要配置好，抛开这篇文章说Git很重要，想要了解更多的自行查阅资料</p>
<h1 id="开始搭建">开始搭建</h1>
<p>以下引号（""）括起的都为命令，有些还包括引号中还有引号的情况</p>
<h1 id="安装hexo">安装hexo</h1>
<p>使用 <kbd>Win</kbd>+<kbd>R</kbd> 输入cmd打开命令窗口</p>
<ol type="1">
<li>输入"node -v" 查看node版本</li>
<li>输入"npm -v" 查看npm版本</li>
<li>2、3完成则node.js安装完成</li>
<li>接下来利用npm安装cnpm，因为国内安装较慢，所以推荐使用阿里云镜像安装</li>
<li>输入npm "install -g cnpm --registry=http://registry.npm.taobao.org"
安装镜像的cnpm 管理器</li>
<li>输入"cnpm -v" 查看cnpm版本(此时cnpm安装完成)</li>
<li>输入"cnpm install -g hexo-cli" 安装hexo框架</li>
<li>输入"hexo -v" 查看hexo版本并确认是否安装成功</li>
</ol>
<h1 id="使用hexo搭建博客">使用hexo搭建博客</h1>
<p>如提示要在blog目录完成一定要在该目录下完成，如进入hexo命令可通过<kbd>Ctrl</kbd>+<kbd>C</kbd>,再键入Y退出hexo
1.
建立一个空文件夹，用来放本地blog，熟悉cmd命令的可以直接在cmd上直接建立
2. 输入"cd blog" 进入blog目录,blog为你所建立的空文件夹目录 3. 输入"sudo
hexo init"
生成博客,初始化博客,自带主题,可以直接打开所建立的blog或输入"dir"
查看当前目录下生成了那些文件 4. 输入"hexo s" 启动本地博客服务 5. <a
href="http://localhost:4000/" class="uri">http://localhost:4000/</a>
本地访问地址,可在浏览器打开查看 6. 输入"hexo n "我的第一篇文章""
创建新的文章，创建成功后会显示文章的目录地址，直接用编译器如vscode打开文章，或用cmd命令操作。该文章为Markdown格式，不熟悉的可以查资料学习。随意写一些内容如：<br />
# 一级标题<br />
内容<br />
## 二级标题<br />
内容<br />
## 三级标题<br />
内容 7. 输入"hexo clean" 清理 8. 输入"hexo g" 生成 9. 输入"hexo s"
重新启动本地服务查看变化</p>
<h1 id="博客部署到github上">博客部署到Github上</h1>
<p>如果不想用Github可以用Gitee,操作相似 1.
登录Github建立一个新仓库，仓库名为 Github账户昵称.github.io 2. 输入"cnpm
install --save hexo-deployer-git"
在blog目录下安装git部署插件，如已经配置过Git则不会出现问题，如提示：<br />
Please tell me who you are.<br />
则需向Git说明自己的身份，通过如下两个命令证明：<br />
"git config --global user.name "myusername"" 用户名 "git config --global
user.email "myemail"" 邮箱<br />
要查看用户，使用：<br />
"git config --list" 3.
配置_config.yml文件，文件最底部做如下配置（下面符号’+‘代表空格！！！）：<br />
deploy:<br />
++type:+git<br />
++repo:+新建的空仓库的地址<br />
++branch:+master 4. 输入"hexo d"
部署到远端Github仓库里，在弹出对话框中输入Github账号密码 5.
成功后,刷新Github仓库会发现仓库中多了些东西,这些就是博客的一些内容<br />
6. 再浏览器中访问 1中的名称,可发现远程部署完成</p>
<h1 id="换博客主题">换博客主题</h1>
<p>此主题仅是一个示例 <a href="https://YourGithubName.github.io/"
class="uri">https://YourGithubName.github.io/</a>
访问这个地址可以查看博客<br />
下面操作依旧在blog目录下 1. 输入"git clone
https://github.com/litten/hexo-theme-yilia.git themes/yilia"
下载yilia主题到本地blog/themes目录下 2. 修改blog目录下的 _config.yml
文件,修改如下:<br />
theme: yilia 3. 输入"hexo clean" 清理 4. 输入"hexo g" 生成 5. 输入"hexo
s" 重新启动本地服务查看变化 6. 输入"hexo d"
部署到远端Github仓库里,这次不用输入账户密码 7.
在Github地址下刷新查看变换 8. 主题更换完成</p>
<h1 id="总结">总结</h1>
<blockquote>
<p>需要安装配置好node.js和Git<br />
这只是简单的搭建博客,界面比较粗糙,有待改进<br />
搭建博客容易,坚持写博客难<br />
相信在坚持写博客总结后,一定会有所提高</p>
</blockquote>
]]></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>本学期总结</title>
    <url>/article/a002a3e2.html</url>
    <content><![CDATA[<p>今年因为疫情的原因，前一个学期在家上网课，下一个学期9月份才开学，然而这学期的任务却特别重，课程比较紧张，课程也比较重要，不过最终收获还是很多的。</p>
<span id="more"></span>
<h1 id="紧张的学期">紧张的学期</h1>
<p>把今年分为两个学期，前一个网课，后一个在校。</p>
<h2 id="在家网课">在家网课</h2>
<blockquote>
<p>网课似乎是很轻松的，但恰巧这学期的课程真的是最重要的，网课阶段重要课程是：数据结构，计算机组成原理，如果再带上移动应用开发和网络应用开发的话真的感到任务巨大，当然课程不单单是这些，还有一些其他的公共必修课和专业选修课。与此同时，网课在家的阶段，家里一直在装修，旧房改造，乱七八糟各种事情，所以精力并不能完全集中在课程上。但学的也不是很糟糕，也有努力的学，因为数据结构太重要了，也就因此网课后半段包括暑假直接买书看，自己学，也是在这个时候，搭建了自己的博客，决心要边学习边总结，经常更新博客。</p>
</blockquote>
<h2 id="在校">在校</h2>
<blockquote>
<p>在校这个学期更是压力山大，可能在家呆习惯了，突然一切恢复正常，每天赶去上课，感到每节课都好长啊。这学期有同样重要的：操作系统，计算机网络，算法设计与分析。你敢说哪个不重要？这些都是计算机基础课程，重要性不用多说。除此之外编程实战方面有Java
Web与Python数据分析，这个真的把我搞的难受死了。一点也不夸张，最后几周准备Java
Web大作业的时候，每天搞到凌晨12点，最晚1点才准备玩开始休息，个人身体方面更是有感触，因为公共体育课修完了，几乎没有出去运动过，整天和电脑手机呆在一块，经常熬夜，早起更是困难，饮食也有些不规律，把身体搞得很糟糕。还有每次洗头水里和手上的头发好多啊，我是有些怕的，不是吧，一定不是的。还有12月的时候要考六级，这。。。这学期都忙成狗了，还准备六级？哪来的功夫，紧紧张张准备不到一个月，做几套题，匆匆就考试，也许好久没有经历这样的考试，紧张到不行，最后差点翻译题都没写。</p>
</blockquote>
<h2 id="复习">复习</h2>
<blockquote>
<p>近在这个一月，开始忙碌的复习，跨了年，还有10天就考试了，要复习呀。宿舍是呆不下去的，能冻死，还赶上寒潮来临，温度直接降到零下10度（最冷的时候），走在室外冷风一吹，整个人都不好了。所以还是找自习室吧，毕竟有暖气空调，整整10多天，每天早出晚归，没日没夜的复习复习复习，不夸张地说整个一月我只在我们那片宿舍食堂吃过3次饭。看书看PPT看的眼睛都累的难受，那几天睡得也不是很舒服。不过最终结局还是不错的，至少上考场的时候很轻松。我发现啊，每次复习状态最好的是第二遍复习的时候，顺便说一下我的复习习惯吧，第一遍：整体的看，在心中建立一个整体框架；第二遍：细看，把每个框架空处补全，以为第一遍的原因，这时候往往会在前后之间发现一些联系，发现有些内容关联度很高，能帮助我们理解记忆；第三遍/第四遍：课堂作业+习题，要做到每道题都懂，能搞清楚题目重点在哪，考察的是什么。接着前面的，为什么说第二遍是最好的，因为有了前面第一遍的普遍使得第二遍就像是填空游戏一样，框架大体已经存在，这时只需要我往里填就是了，而且我一直觉得第二遍是记忆最深的。最不好的是考试前的复习，前面都复习差不多了，感觉自己可以上去考试了，外加上假期马上就要来临了，心情比较激动，这时人就会变得特别浮躁，什么也看不下去，就是这临门一脚，导致功亏一篑。</p>
</blockquote>
<h2 id="总结">总结</h2>
<blockquote>
<p>我开始写博客的一个重要原因是，每次在总结开始真正敲击键盘时，就会沉静下去，沉下心来，审视自己，问自己到底该怎么表达，怎么传达自己的想法。我觉得在这样一个快节奏的社会下，沉下去真的太难了，但却是很重要的。</p>
</blockquote>
]]></content>
      <tags>
        <tag>思考</tag>
        <tag>自己</tag>
      </tags>
  </entry>
  <entry>
    <title>栈与队列</title>
    <url>/article/6534ce06.html</url>
    <content><![CDATA[<h1 id="栈">栈</h1>
<p>栈是限定仅在表尾进行插入和删除操作的线性表。</p>
<span id="more"></span>
<h1 id="栈的抽象数据类型">栈的抽象数据类型</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ADT Stack &#123;</span><br><span class="line">Data</span><br><span class="line">    元素具有相同的类型，相邻元素具有前驱后继关系。</span><br><span class="line"></span><br><span class="line"><span class="function">Operation</span></span><br><span class="line"><span class="function">    <span class="title">InitStack</span> <span class="params">(&amp;S)</span>  <span class="params">(构造空栈 )</span></span></span><br><span class="line"><span class="function">    操作结果：构造一个空栈S。</span></span><br><span class="line"><span class="function">    <span class="title">DestroyStack</span><span class="params">(&amp;S)</span>   <span class="params">(销毁栈结构)</span></span></span><br><span class="line"><span class="function">    初始条件：栈S已存在。</span></span><br><span class="line"><span class="function">    操作结果：栈S被销毁。</span></span><br><span class="line"><span class="function">    <span class="title">ClearStack</span> <span class="params">(&amp;S)</span>  <span class="params">(栈清空)</span></span></span><br><span class="line"><span class="function">    初始条件：栈S已存在。</span></span><br><span class="line"><span class="function">    操作结果：栈S清为空栈。</span></span><br><span class="line"><span class="function">    <span class="title">StackEmpty</span> <span class="params">(S)</span>   <span class="params">(判空)</span></span></span><br><span class="line"><span class="function">    初始条件：栈S已存在。</span></span><br><span class="line"><span class="function">    操作结果：若栈S为空栈，则返回<span class="literal">true</span>, 否则<span class="literal">false</span>。</span></span><br><span class="line"><span class="function">    <span class="title">StackLength</span> <span class="params">(S)</span> <span class="params">(求栈长)</span></span></span><br><span class="line"><span class="function">    初始条件：栈S已存在。</span></span><br><span class="line"><span class="function">    操作结果：返回S的元素个数，即栈的长度。</span></span><br><span class="line"><span class="function">    <span class="title">StackTraverse</span> <span class="params">(S)</span> <span class="params">(遍历栈)</span></span></span><br><span class="line"><span class="function">    初始条件：栈S已存在且非空。</span></span><br><span class="line"><span class="function">    操作结果：从栈底到栈顶依次对S的每个数据元素访问。</span></span><br><span class="line"><span class="function">    <span class="title">GetTop</span> <span class="params">(S, &amp;e)</span>   <span class="params">(求栈顶元素)</span></span></span><br><span class="line"><span class="function">    初始条件：栈S已存在且非空。</span></span><br><span class="line"><span class="function">    操作结果：用e返回S的栈顶元素。</span></span><br><span class="line"><span class="function">    <span class="title">Push</span> <span class="params">(&amp;S, e)</span> <span class="params">(入栈)</span></span></span><br><span class="line"><span class="function">    初始条件：栈S已存在。</span></span><br><span class="line"><span class="function">    操作结果：插入元素e为新的栈顶元素。</span></span><br><span class="line"><span class="function">    <span class="title">Pop</span> <span class="params">(&amp;S, &amp;e)</span>  <span class="params">(出栈)</span></span></span><br><span class="line"><span class="function">    初始条件：栈S已存在且非空。</span></span><br><span class="line"><span class="function">    操作结果：删除S的栈顶元素，并用e返回其值。</span></span><br><span class="line"><span class="function">&#125;ADT Stack</span></span><br></pre></td></tr></table></figure>
<h1 id="栈的顺序存储结构">栈的顺序存储结构</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 50      <span class="comment">/*存储空间初始分配量*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> SElemType;  <span class="comment">/*SElemType类型根据实际情况而定*/</span></span><br><span class="line"><span class="keyword">typedef</span>  <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    SElemType* data;    <span class="comment">/*存储空间基地址*/</span></span><br><span class="line">    <span class="type">int</span> top;            <span class="comment">/*栈顶指针*/</span></span><br><span class="line">&#125; SqStack;</span><br></pre></td></tr></table></figure>
<h1 id="进栈操作">进栈操作</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(SqStack&amp; S, SElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == MAXSIZE - <span class="number">1</span>)    <span class="comment">/*栈满*/</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;栈满&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        S.top++;            <span class="comment">/*栈顶指针加一*/</span></span><br><span class="line">        S.data[S.top] = e;  <span class="comment">/*新元素赋值给栈顶空间*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="出栈操作">出栈操作</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Pop</span><span class="params">(SqStack&amp; S, SElemType&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == <span class="number">-1</span>)           <span class="comment">/*栈空*/</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;栈空&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        e = S.data[S.top];  <span class="comment">/*将要删除元素赋值给e*/</span></span><br><span class="line">        S.top--;            <span class="comment">/*栈顶指针减一*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="两栈共享空间">两栈共享空间</h1>
<p>略。。。</p>
<h1 id="栈的链式存储结构">栈的链式存储结构</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">StackNode</span></span><br><span class="line">&#123;</span><br><span class="line">    SElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">StackNode</span>* next;</span><br><span class="line">&#125;StackNode, * LinkStackPtr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LinkStack</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkStackPtr top;</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">&#125;LinkStack;</span><br></pre></td></tr></table></figure>
<h1 id="进栈操作-1">进栈操作</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(LinkStack&amp; S, SElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkStackPtr s = <span class="keyword">new</span> StackNode;</span><br><span class="line">    s-&gt;data = e;        <span class="comment">/*给新结点值e*/</span></span><br><span class="line">    s-&gt;next = S.top;    <span class="comment">/*当前栈顶赋给新结点后继*/</span></span><br><span class="line">    S.top = s;          <span class="comment">/*新结点s赋给栈顶指针*/</span></span><br><span class="line">    S.count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="出栈出栈">出栈出栈</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Pop</span><span class="params">(LinkStack&amp; S, SElemType&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkStackPtr p;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">IsEmpty</span>(S))</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;栈空&quot;</span> &lt;&lt; endl;   <span class="comment">/*栈空*/</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        e = S.top-&gt;data;         <span class="comment">/*将要删除元素赋值给e*/</span></span><br><span class="line">        p = S.top;               <span class="comment">/*将栈顶结点赋值给p*/</span></span><br><span class="line">        S.top = S.top-&gt;next;     <span class="comment">/*使栈顶指针下移一位*/</span></span><br><span class="line">        <span class="keyword">delete</span> p;                <span class="comment">/*释放结点p*/</span></span><br><span class="line">        S.count--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="栈的作用">栈的作用</h1>
<p>栈的引入简化了程序设计问题，划分了不同关注层次，使得思考范围缩小，更加聚焦于我们要解决的问题核心。反之，像数组等，因为要分散精力去考虑数组的下标增减等细节问题，反而掩盖了问题的本质。</p>
<p>现在许多的高级语言，如java，C#等都有对栈结构的封装，可以不用关注它的实现细节，就可以直接使用Stack的push和pop方法，非常方便。</p>
<h1 id="栈的应用-递归">栈的应用-递归</h1>
<p>我们把一个直接调用自己或通过一系列的调用语句间接地调用自己的函数，称做递归函数。</p>
<h1 id="斐波那契数列">斐波那契数列</h1>
<p>F(n)=F(n-1)+F(n-2)，(F(1)=F(2)=1)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Fbi</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">1</span>||i==<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Fbi</span>(i<span class="number">-1</span>)+<span class="built_in">Fbi</span>(i<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="等...">等...</h1>
<h1 id="栈的应用-四则运算表达式求值">栈的应用-四则运算表达式求值</h1>
<p><a
href="https://blog.csdn.net/yzl_rex/article/details/7745341">可参考</a></p>
<h1 id="队列">队列</h1>
<p>队列是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。</p>
<h1 id="队列的抽象数据类型">队列的抽象数据类型</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ADT Queue &#123;</span><br><span class="line">Data</span><br><span class="line">    元素具有相同的类型，相邻元素具有前驱后继关系。</span><br><span class="line"></span><br><span class="line"><span class="function">Operation</span></span><br><span class="line"><span class="function">    <span class="title">InitQueue</span> <span class="params">(&amp;Q)</span>  <span class="params">(构造空队列 )</span></span></span><br><span class="line"><span class="function">    操作结果：构造一个空队列Q。</span></span><br><span class="line"><span class="function">    <span class="title">DestroyQueue</span> <span class="params">(&amp;Q)</span>   <span class="params">(销毁队列结构)</span></span></span><br><span class="line"><span class="function">    初始条件：队列Q已存在。</span></span><br><span class="line"><span class="function">    操作结果：队列Q被销毁。</span></span><br><span class="line"><span class="function">    <span class="title">ClearQueue</span>  <span class="params">(&amp;Q)</span>  <span class="params">(队列清空)</span></span></span><br><span class="line"><span class="function">    初始条件：队列Q已存在。</span></span><br><span class="line"><span class="function">    操作结果：队列Q清为空队列。</span></span><br><span class="line"><span class="function">    <span class="title">QueueEmpty</span> <span class="params">(Q)</span>   <span class="params">(判空)</span></span></span><br><span class="line"><span class="function">    初始条件：队列Q已存在。</span></span><br><span class="line"><span class="function">    操作结果：若队列Q为空，则返回<span class="literal">true</span>, 否则<span class="literal">false</span>。</span></span><br><span class="line"><span class="function">    <span class="title">QueueLength</span> <span class="params">(Q)</span> <span class="params">(求队列长)</span></span></span><br><span class="line"><span class="function">    初始条件：队列Q已存在。</span></span><br><span class="line"><span class="function">    操作结果：返回Q的元素个数，即队列的长度。</span></span><br><span class="line"><span class="function">    <span class="title">QueueTraverse</span> <span class="params">(Q)</span> <span class="params">(遍历队列)</span></span></span><br><span class="line"><span class="function">    初始条件：队列Q已存在且非空。</span></span><br><span class="line"><span class="function">    操作结果：从队头到队尾，依次对Q的每个数据元素  访问。</span></span><br><span class="line"><span class="function">    <span class="title">GetHead</span> <span class="params">(Q, &amp;e)</span>   <span class="params">(求队头元素)</span></span></span><br><span class="line"><span class="function">    初始条件：队列Q已存在且非空。</span></span><br><span class="line"><span class="function">    操作结果：用e返回Q的队头元素。</span></span><br><span class="line"><span class="function">    <span class="title">EnQueue</span> <span class="params">(&amp;Q, e)</span> <span class="params">(入队)</span></span></span><br><span class="line"><span class="function">    初始条件：队列Q已存在。</span></span><br><span class="line"><span class="function">    操作结果：插入元素e为新的队列元素。</span></span><br><span class="line"><span class="function">    <span class="title">DeQueue</span> <span class="params">(&amp;Q, &amp;e)</span>  <span class="params">(出队)</span></span></span><br><span class="line"><span class="function">    初始条件：队列Q已存在且非空。</span></span><br><span class="line"><span class="function">    操作结果：删除Q的队头元素，并用e返回其值。</span></span><br><span class="line"><span class="function">&#125;ADT Queue</span></span><br></pre></td></tr></table></figure>
<h1 id="循环队列">循环队列</h1>
<p>我们把队列的这种头尾相连的顺序存储结构称为循环队列。（可解决顺序存储空间不足）</p>
<h1 id="定义">定义</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 50</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> QElemType;</span><br><span class="line"><span class="comment">//循环队列</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    QElemType* data;</span><br><span class="line">    <span class="type">int</span> front;      <span class="comment">/*头指针*/</span></span><br><span class="line">    <span class="type">int</span> rear;       <span class="comment">/*尾指针*/</span></span><br><span class="line">&#125;SqQueue;</span><br></pre></td></tr></table></figure>
<h1 id="初始化">初始化</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitQueue</span><span class="params">(SqQueue&amp; Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Q.front = <span class="number">0</span>;</span><br><span class="line">    Q.rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="队列长度">队列长度</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetLength</span><span class="params">(SqQueue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Q.rear - Q.front + MAXSIZE) % MAXSIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="入队操作">入队操作</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">EnQueue</span><span class="params">(SqQueue&amp; Q, QElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((Q.rear + <span class="number">1</span>) % MAXSIZE == Q.front)  <span class="comment">/*队满*/</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;队列满&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Q.data[Q.rear] = e;                 <span class="comment">/*元素e赋值给队尾*/</span></span><br><span class="line">        Q.rear = (Q.rear + <span class="number">1</span>) % MAXSIZE;    <span class="comment">/*rear指针后移一位*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="出队操作">出队操作</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">DeQueue</span><span class="params">(SqQueue&amp; Q, QElemType&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Q.front == Q.rear)                  <span class="comment">/*队空*/</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;队列空&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        e = Q.data[Q.front];                <span class="comment">/*队头元素赋值给e*/</span></span><br><span class="line">        Q.front = (Q.front + <span class="number">1</span>) % MAXSIZE;  <span class="comment">/*front指针后移一位*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="队列的链式存储结构">队列的链式存储结构</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> QElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">QNode</span></span><br><span class="line">&#123;</span><br><span class="line">    QElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">QNode</span>* next;</span><br><span class="line">&#125;QNode, * QueuePtr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    QueuePtr front, rear;</span><br><span class="line">&#125;LinkQueue;</span><br></pre></td></tr></table></figure>
<h1 id="入队操作-1">入队操作</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">EnQueue</span><span class="params">(LinkQueue&amp; Q, QElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QueuePtr s = <span class="keyword">new</span> QNode;</span><br><span class="line">    <span class="keyword">if</span> (!s)                             <span class="comment">/*存储分配失败*/</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;存储分配失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        s-&gt;data = e;</span><br><span class="line">        s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        Q.rear-&gt;next = s;   <span class="comment">/*新结点s赋值给队尾后继*/</span></span><br><span class="line">        Q.rear = s;         <span class="comment">/*s设为队尾结点*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="出队操作-1">出队操作</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">DeQueue</span><span class="params">(LinkQueue&amp; Q, QElemType&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QueuePtr p;</span><br><span class="line">    <span class="keyword">if</span> (Q.front == Q.rear)          <span class="comment">/*队列空*/</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;队列空&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        p = Q.front-&gt;next;          <span class="comment">/*欲删除结点暂存给p*/</span></span><br><span class="line">        e = p-&gt;data;                <span class="comment">/*欲删除对头结点赋值给e*/</span></span><br><span class="line">        Q.front-&gt;next = p-&gt;next;    <span class="comment">/*原对头结点后继p-&gt;next赋值给头结点后继*/</span></span><br><span class="line">        <span class="keyword">if</span> (Q.rear == p)            <span class="comment">/*若队头是队尾，则删除后将rear指向头结点*/</span></span><br><span class="line">            Q.rear = Q.front;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="栈与队列对比">栈与队列对比</h1>
<table>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th>比较项目</th>
<th>栈</th>
<th>队列</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>逻辑结构</td>
<td>和线性表一样, 数据元素之间存在一对一的关系</td>
<td>和线性表一样, 数据元素之间存在一对一的关系</td>
</tr>
<tr class="even">
<td>顺序存储</td>
<td>存储空间预先分配，可能会导致空间闲置或栈满溢出现象；数据元素个数不能自由扩充</td>
<td>（常设计成循环队列形式）；存储空间预先分配，可能会导致空间闲置或队满溢出现象；数据元素个数不能自由扩充</td>
</tr>
<tr class="odd">
<td>链式存储</td>
<td>动态分配，不会出现闲置或栈满溢出现象;数据元素个数可以自由扩充</td>
<td>动态分配，不会出现闲置或栈满溢出现象;数据元素个数可以自由扩充</td>
</tr>
<tr class="even">
<td>运算规则</td>
<td>插人和删除在表的一端(栈顶)完成，后进先出</td>
<td>插入运算在表的一端(队尾)进行，删除运算在表的另一端(队头),先进先出</td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>数据结构&amp;算法</tag>
      </tags>
  </entry>
  <entry>
    <title>树</title>
    <url>/article/7b216a3b.html</url>
    <content><![CDATA[<h1 id="定义">定义</h1>
<p>树是由n个结点组成的有限集。n=0时称为空树。且对于非空树：</p>
<ul>
<li><p>有且仅有一个特定的称为根的结点；</p></li>
<li><p>当n&gt;1时，其余结点可分为m(m&gt;0)个互不相交的有限集T1,T2,…,Tm，其中每一个集合本身又是一棵树，称为根的子树(subtree)。</p></li>
</ul>
<span id="more"></span>
<h1 id="基本术语">基本术语</h1>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/树.png"
alt="树" />
<figcaption aria-hidden="true">树</figcaption>
</figure>
<blockquote>
<p>结点：一个数据元素+若干指向子树的分支</p>
</blockquote>
<blockquote>
<p>结点拥有的子树数（或分支数）称为结点的度。</p>
</blockquote>
<ul>
<li>结点A的度是3，C的是1，G的是零。度为零的结点称为叶子结点/终端结点。K，L，F，G，M，I，J是叶子结点。度不为零的结点称为分支结点/非终端结点。</li>
</ul>
<blockquote>
<p>结点的子树的根称为该结点的孩子，该结点称为孩子的双亲</p>
</blockquote>
<ul>
<li>D的孩子是H，I和J；D的双亲是A。</li>
</ul>
<blockquote>
<p>同一个双亲的孩子是兄弟。</p>
</blockquote>
<ul>
<li>H，I和J是兄弟。</li>
</ul>
<blockquote>
<p>双亲在同一层的结点称为堂兄弟</p>
</blockquote>
<blockquote>
<p>结点的祖先是从根到该结点所经过的所有结点。</p>
</blockquote>
<ul>
<li>M的祖先是A、D和H。</li>
</ul>
<blockquote>
<p>结点的子孙是该结点下层子树中的任意结点。</p>
</blockquote>
<ul>
<li>B的子孙为E、F、K和L。</li>
</ul>
<blockquote>
<p>结点的层次</p>
</blockquote>
<ul>
<li>从根到该结点的层数（根结点为第一层）。</li>
</ul>
<blockquote>
<p>树的深度</p>
</blockquote>
<ul>
<li>指所有结点最大的层数（Max{各结点的层数}）。</li>
</ul>
<blockquote>
<p>树的度</p>
</blockquote>
<ul>
<li>所有结点度的最大值（Max{各结点的度}）。</li>
<li>上图中树的度为3</li>
</ul>
<blockquote>
<p>有序树</p>
</blockquote>
<ul>
<li>结点各子树从左至右有序，不能互换（左为第一）</li>
<li>家谱</li>
</ul>
<blockquote>
<p>无序树</p>
</blockquote>
<ul>
<li>结点各子树可互换位置</li>
<li>机构</li>
</ul>
<blockquote>
<p>森林</p>
</blockquote>
<ul>
<li>指m棵互不相交的树的集合</li>
</ul>
<blockquote>
<p>任何一棵非空树是一个二元组Tree =（root，F）</p>
</blockquote>
<ul>
<li>root 被称为根结点，F 被称为子树森林</li>
</ul>
<h1 id="树的抽象数据类型">树的抽象数据类型</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ADT树(tree )</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">    树是由一个根结点和若干棵子树构成。树中结点具有相同数据类型及层次关</span><br><span class="line"></span><br><span class="line"><span class="function">Operation</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">InitTree</span> <span class="params">(&amp;T)</span> :构造空树T。</span></span><br><span class="line"><span class="function">    DestroyTree (&amp;T) :销毁树T。</span></span><br><span class="line"><span class="function">    CreateTree ( &amp;T, definition) :按definition中给出树的定义来构造树。ClearTree(&amp;T):若树T存在，则将树T清为空树。</span></span><br><span class="line"><span class="function">    TreeEmpty (T):若T为空树，返回true,否则返回false.</span></span><br><span class="line"><span class="function">    TreeDepth(T) :返回T的深度。</span></span><br><span class="line"><span class="function">    Root (T) :返回T的根结点。</span></span><br><span class="line"><span class="function">    Value (T,cur e): cur e是树T中一个结点，返回此结点的值。</span></span><br><span class="line"><span class="function">    Assign (T,cur _e,value) :给树T的结点cur_ e赋值为value。</span></span><br><span class="line"><span class="function">    Parent (T,cur e):若cur_ e是树T的非根结点，则返回它的双亲，否则返回空。LeftChild(T,cur e):若cur_ e是树T的非叶结点，则返回它的最左孩子，否则返空。</span></span><br><span class="line"><span class="function">    Rightsibling (T,cur e) :若cur_ e有右兄弟，则返回它的右兄弟，否则返回空。InsertChild(&amp;T,&amp;p,i,c):其中p指向树T的某个结点，i为所指结点P的度加上<span class="number">1</span>，非空树c与T不相交，操作结果为插入c为树T中p指结点的第i棵子树。</span></span><br><span class="line"><span class="function">    DeleteChild(&amp;T,&amp;p,i) :其中p指向树T的某个结点，i为所指结点p的度，操作结果为删除T中p所指结点的第i棵子树。</span></span><br><span class="line"><span class="function">endADT</span></span><br></pre></td></tr></table></figure>
<h1 id="树的存储结构">树的存储结构</h1>
<p>说到存储结构，就会想到我们前面章节讲过的顺序存储和链式存储两种结构。</p>
<p>先来看看顺序存储结构，用一段地址连续的存储单元依次存储线性表的数据元素。这对于线性表来说是很自然的，对于树这样多对的结构呢?</p>
<p>树中某个结点的孩子可以有多个，这就意味着，无论按何种顺序将树中所有结点存储到数组中，结点的存储位置都无法直接反映逻辑关系，你想想看，数据元素挨个的存储，谁是谁的双亲，谁是谁的孩子呢?简单的顺序存储结构是不能满足树的实现要求的。</p>
<p>不过充分利用顺序存储和链式存储结构的特点，完全可以实现对树的存储结构的表示。我们这里要介绍三种不同的表示法:双亲表示法、孩子表示法、孩子兄弟表示法。</p>
<h1 id="双亲表示法">双亲表示法</h1>
<p>在每个结点中，附设一个指示器指示其双亲结点在数组中的位置。也就是说，每个结点除了知道自己是谁以外，还知道它的双亲在哪里。</p>
<div class="line-block">data | parent |</div>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_TREE_SIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> TElemType;      <span class="comment">/*树结点的数据类型，目前暂定为int*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">PTNode</span>&#123;      <span class="comment">/*结点结构*/</span></span><br><span class="line">     TElemType  data;       <span class="comment">/*结点数据*/</span></span><br><span class="line">      <span class="type">int</span>  parent;          <span class="comment">/*双亲位置*/</span></span><br><span class="line">&#125;PTNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;             <span class="comment">/*树结构*/</span></span><br><span class="line">    PTNode nodes[MAX_TREE_SIZE];    <span class="comment">/*结点数组*/</span></span><br><span class="line">    <span class="type">int</span> r,n;                <span class="comment">/*根的位置和结点数*/</span></span><br><span class="line">&#125;PTree；</span><br></pre></td></tr></table></figure>
<h1 id="孩子表示法">孩子表示法</h1>
<p>每个结点有多个指针域，其中每个指针指向一颗子树的根结点，我们把这种方法叫做多重链表表示法。</p>
<blockquote>
<p>结点同构</p>
</blockquote>
<ul>
<li>结点的指针个数相等，为树的度D</li>
<li>缺点：容易造成空间浪费</li>
</ul>
<div class="line-block">data | child1 | child2 | … | childD |</div>
<blockquote>
<p>结点不同构</p>
</blockquote>
<ul>
<li>结点指针个数不等，为该结点的度d</li>
<li>缺点：操作不方便</li>
</ul>
<div class="line-block">data | degree | child1 | child2 | … |
childd|</div>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_TREE_SIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">CTNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> child;              <span class="comment">/*孩子结点的序号*/</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">CTNode</span> *next;    <span class="comment">/*孩子结点的指针域*/</span>　　</span><br><span class="line">&#125; *ChildPtr;                <span class="comment">/*孩子链表的结点*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    ElemType data;          <span class="comment">/* 结点的数据元素*/</span></span><br><span class="line">    ChildPtr firstchild;    <span class="comment">/* 孩子链表头指针*/</span></span><br><span class="line">&#125; CTBox;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    CTBox nodes[MAX_TREE_SIZE];</span><br><span class="line">    <span class="type">int</span> n, r; 　            <span class="comment">/* 结点数和根结点的位置*/</span>　　</span><br><span class="line">&#125; CTree;                    <span class="comment">/*树结构*/</span></span><br></pre></td></tr></table></figure>
<h1 id="孩子兄弟表示法">孩子兄弟表示法</h1>
<p>任意一棵树，它的结点的第一个孩子如果存在就是唯一的，它的右兄弟如果存在也是唯一的。因此，我们设置两个指针，分别指向该结点的第一个孩子和此结点的右兄弟。</p>
<div class="line-block">data | firstchild | rightsib |</div>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">CSNode</span>&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">CSNode</span> * firstson,* nextsibling;	</span><br><span class="line">&#125;CSNode,*CSTree;</span><br></pre></td></tr></table></figure>
<h1
id="树关联二叉树及其他内容待到二叉树完成">树关联二叉树及其他内容待到二叉树完成</h1>
<p>欢迎批评指正！</p>
]]></content>
      <tags>
        <tag>数据结构&amp;算法</tag>
      </tags>
  </entry>
  <entry>
    <title>欲加之罪何患无辞</title>
    <url>/article/e6a33677.html</url>
    <content><![CDATA[<p>出处：《左传·僖公十年》:“不有废也，君何以兴？欲加之罪，其无辞乎？”</p>
<p>后人用"欲加之罪，何患无辞"谓欲加害于人，即使无过错，也可以罗织罪名作为理由。</p>
<p>当然，这篇文章不是讲古语出处和用法问题，而是借此来谈一谈，近两年美国对中国企业打压的事情。</p>
<p>因为我对这件事件并非实时密切关注，大多数情况的了解也只是看一些知名媒体的视频和文章，所以本篇文章仅代表个人看法，如有说法不当之处，还望见谅。</p>
<span id="more"></span>
<h1 id="经过">经过</h1>
<p>从前两年起美国先是对中国加收关税，然后是对中兴的制裁，再然后是对华为在全球范围内的打压，最近美国又对Tik
Tok（抖音国际版），微信开始下动作。最近几年中国各方面发展势头是挺猛的，中国企业在海外开展业务也比较顺利，但是这就和美国的利益冲突了，美国要做世界的唯一霸主，他是不允许其他任何国家在某些核心领域赶超他的，所以美国就开始无赖行为，其实美国对于华为的制裁早已不是什么新鲜招数了，早在法国，日本等国家其实都有受到美国的“照顾”。至于原因嘛——<strong>欲加之罪何患无辞</strong>。</p>
<h1 id="处境">处境</h1>
<p><a
href="https://www.bilibili.com/video/BV1Fi4y1g7tr">盘点美国制裁中国科技企业</a></p>
<p>华为，即中华有为，大多数人知道的华为是个手机厂商，然而手机业务对于华为只是个副业，华为更准确的说信息通信公司。对于华为的创始人任正非，我是相当敬佩的，记得在学校上的《形势与政策》的课上，老师让我们看了当时华为受到制裁后，央视采访任正非的视频，面对美国强力的打压，任正非爷爷慈祥而坚定的一心在谈教育问题。真的当时的触动太大了，在华为如此紧迫的关头，任正非祥和冷静，仿佛已经有了很多对策一样，整个视频都是在谈教育问题，一心想着中国要培养出更多优秀的人才为祖国做贡献，太感动了。</p>
<h1 id="芯片问题">芯片问题</h1>
<p><a
href="https://www.bilibili.com/video/BV1v54y1e7Nu?t=908">美国打压下，华为还有哪些明显短板？</a></p>
<p><a
href="https://www.bilibili.com/video/BV1Av41167n1">华为等中国制造，美国如何靠软件，卡住脖子？</a></p>
<p>华为在5G方面的确实全球领先的，这是华为付出应有的回报，华为目光真的有够长远，在美国要求华为手机不能使用Google的Android系统后，华为紧接着就发布了自家研制了数年的<strong>鸿蒙</strong>操作系统，包括自家海思芯片华为都是希望自己中国能不被外国“卡脖子”，如果有机会的话可以看一看华为的发布会，很精彩，还有余承东的一些关于华为的文章，讲述了过去华为对未来憧憬当然还有最坏打算。在我心中，华为是一家很伟大的公司，了解华为产品命名都应该知道很多名字都来自于记录了各种奇珍异兽的《山海经》，非常有趣，更具有了独一无二的中国色彩。</p>
<p>然而，中国与美国还是有科技实力差距的，近几年中国在芯片进口花费的资金已经超过石油进口所用，可见在芯片领域中国与世界美国还是有不少的差距的。一方面是因为中国在这方面缺乏专业人才，另一方面是这个领域像是一个无底洞，你向它投出资金、人才和时间都不一定有收获，这也是很多中国企业望而却步的地方。他们都更愿意花费有限的资金购买完备的芯片，而非无限不缺的资金在研究上面。</p>
<p>华为早早开始研发自己的芯片——海思麒麟，但也只是在美国技术软件加持下完成芯片的设计工作，在芯片领域，设计和制造是两个问题，今年在美国强力打压下，台积电宣布不再为华为制造芯片，也就是说华为海思芯片可能要绝迹了。这是一个非常愤慨却又非常无奈的消息，如果看过华为的鸿蒙操作系统发布会的人都应该知道，华为的目标是浩瀚星辰，鸿蒙OS是一款“面向未来”的操作系统，一款基于微内核的面向全场景的分布式操作系统，现已适配智慧屏，未来它将适配手机、平板、电脑、智能汽车、可穿戴设备等多终端设备。从此可以看出华为战略眼光是非常长远的，但目前却只能受限于美国的制裁。</p>
<h1 id="出路">出路</h1>
<p>从前两年美国制裁打压开始后，关于这方面文章视频实在太多了，我也看过一些，我接下来说的应该是结合我知道的和我想说的一些看法。</p>
<p>的确，现在的境况是有些悲观的，但这一定是中国发展路上的必经之路，而恰巧就在这几年美国忍不住了。本人说话不是很有条理，尽量说的清楚明白。</p>
<p><strong>基础学科薄弱而牵扯出的人才缺乏问题</strong>，就目前我了解的社会大环境，绝大多数人都缺少那份探索未知的精神，没那种对基础学科的热爱（有的也是非常少数），想当初我们儿时梦想都是科学家、数学家等各种家，然而当我们慢慢长大就再也不敢提儿时的梦想了，很多人变得有些麻木，不再具有年轻时的热情。而且现在社会评判成功的标准好像变成了是不是很有钱了，这就让人很烦恼，很多人为了活得光鲜亮丽，放弃原来追求的目标，转向挣钱多的行业，自己变得不再是为自己而活了，很可悲啊。就目前我在大学的体验来说，很多大学生是比较麻木的，为的好像只是那一纸文凭，行尸走肉般在大学混日子。所以说，在基础学科或是说对于科学的热爱的人越来越少了，而这将直接导致人才缺口，还是说芯片问题，芯片涉及多学科（包括物理学、化学、软件科研人员等等），这就是对中国高端人才考验，没有这方面的基础，哪来的<strong>国产芯片</strong>。还是很希望国家能培养出更多为国效力的人才吧。</p>
<p><strong>缺乏应有激情</strong>，虽然现在不是乱世，中国社会环境非常稳定，但古语说得好——生于忧患死于安乐，而现在在我看来中国有点偏向泛娱乐化了。还是那句话“将军孤坟无人问，戏子家事天下”，多少曾经为祖国奉献的英雄人民被遗忘，而那些娱乐八卦整天铺天盖地袭来。当一个人去追求生活的必需品的时候，它往往是勤奋和勇敢的；当一个人去追求生活的消费品的时候，这个时候他往往变得懒惰和温和；当一个人去追求生活的奢侈品的时候，这个人就变得软弱了，一个人一个民族一个家庭一个单位一个国家奢侈品越多，就越愿意用剩余财富而不是以他自己的生命为代价去守卫其财富。尽管现在不是乱世，不是建国初期那样困难的时期，但我们也应都具有那样一份报国热情，那样的勇气与责任感。</p>
<h1 id="最后">最后</h1>
<p>愿中国青年都摆脱冷气，只是向上走，不必听自暴自弃者流的话，能做事的做事，能发声的发声，有一分热，发一分光，就令萤火一般，也可以在黑暗里发一点光，不必等候炬火，此后如竟没有炬火，我便是唯一的光。——鲁迅《热风，随感录四十一》</p>
]]></content>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>江南遇雪</title>
    <url>/article/2feea1bf.html</url>
    <content><![CDATA[<p>对我来说还是很惊喜的，毕竟在我的印象，南方很少能见到雪，况且这么大的雪。</p>
<span id="more"></span>
<p>那天，我一早就看到，天气预报有雪，不过我没当回事，这可是南方，我完全没当回事，但事实总是出乎意料，到了下午就真的发现外面开始飘雪了，尽管我在工位上坐着</p>
]]></content>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>点赞功能的一种实现</title>
    <url>/article/8abc133f.html</url>
    <content><![CDATA[<h1 id="简述">简述</h1>
<p>最近开发“新闻发布系统”，想要优化原有的点赞功能，所以考虑<code>Redis</code>实现一种缓存点赞方法。</p>
<p>这里直接贴出一个链接吧，https://blog.csdn.net/mrhanzhou5273/article/details/113395797</p>
<p>我觉得这里写的很不错，感兴趣的可以参考一下</p>
<span id="more"></span>
<h1 id="怎么做">怎么做</h1>
<p>我大致描述他是怎么做的</p>
<ul>
<li>通过<code>Redis</code>对点赞缓存，利用<code>hash</code>结构，将用户<code>id</code>、目标<code>id</code>、目标类型作为<code>hash</code>的<code>flied</code>，值为<code>0/1</code>，代表未点赞/点赞</li>
<li>这里使用策略模式优化了<code>ifelse</code>的判断处理操作</li>
<li>最后利用定时任务实现<code>Redis</code>的持久化</li>
</ul>
<p>看完还是能学到东西的</p>
<h1 id="问题">问题</h1>
<p>如果你看完了原文，应该想一想这样做会不会有什么问题？</p>
<p>如果你看不出什么问题，要反思了</p>
<p>我提几个问题？</p>
<ul>
<li>这里的<code>Redis</code>是不是会和数据库出现数据不一致的情况？</li>
<li>看完原文上面的答案是：会出现不一致的情况，那么从数据库查到的数据是不准确的怎么办？</li>
<li>若<code>Redis</code>的数据在未持久化前丢失了怎么办？</li>
<li>等</li>
</ul>
<p>应该有很多问题可以提的</p>
<p>那是不是说他的方案不可行，我想不是的</p>
<p>我们想一想日常使用场景，点赞是实时准确的吗？不，它不是，我们都能感受到它会在经过一段时间后有个较大的变化，这也许就可能是<code>Redis</code>持久化后的效果</p>
<p>所以说嘛，我觉得这样是可行的，但使用时还是要注意</p>
<h1 id="建议">建议</h1>
<ul>
<li>数据丢失保障</li>
<li>防止<code>Redis</code>数据集中在几个<code>key</code>上</li>
<li><code>Redis</code>使用常规问题。。。</li>
</ul>
]]></content>
      <tags>
        <tag>Redis</tag>
        <tag>定时任务</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>独立任务最优调度问题</title>
    <url>/article/da9a0c42.html</url>
    <content><![CDATA[<p>这是一道动态规划问题，提到它的原因是，我个人觉得解法挺有趣的，可能是因为见识少，没遇到过这样解决问题的。</p>
<span id="more"></span>
<h1 id="问题">问题</h1>
<p>【问题描述】用两台处理机A和B处理n个作业。设第i个作业交给机器A处理时需要时间ai,
若由机器B处理，则需要时间bi
。由于各作业的特点和机器的性能关系，可能对于某些i，有ai&gt;=bi，而对于某些j(j!=i，j不等于i)，有aj&lt;bj。即不能将一个作业分开由两台机器处理，也没有一台机器能同时处理2个作业。设计一个动态规划算法，使得这两台机器处理完成这n个作业的时间最短（从任何一台机器开工到最后一台机器停工的总时间）。</p>
<p>研究一个实例：(a1, a2, a3, a4, a5, a6)=(2, 5, 7, 10, 5, 2), (b1, b2,
b3, b4, b5, b6, )=(3, 8, 4, 11, 3, 4)
【算法设计】对于给定的两台处理机A和B处理n个作业，找出一个最优调度方案，使2台机器处理完成这n个作业的时间最短。（每个数之间用空格隔开）</p>
<p>【输入形式】第一行是1个正整数n，表示要处理n个作业。在接下来的2行中，每行有n个正整数，分别表示处理机A和B处理第i个作业需要的处理时间。</p>
<p>【输出形式】将最短处理时间输出。</p>
<p>【样例输入】</p>
<blockquote>
<p>6<br />
2 5 7 10 5 2<br />
3 8 4 11 3 4</p>
</blockquote>
<p>【样例输出】</p>
<blockquote>
<p>15</p>
</blockquote>
<h1 id="题解">题解</h1>
<p>利用dp存储每个状态的结果，最后选出最优的一个解。转换方程：dp[i][j]=min(dp[i-1][j]+b[i],dp[i-1][j-a[i]]);dp[i][j]代表做完前i个任务，A机器花几分钟情况下，B机器所花的时间，也就是说dp[i][j]就是表示B机器所花时间。</p>
<p>dp[i][j] =
dp[i-1][j]+b[i]代表第i个任务交给B来做，所以做完前i个任务的时候,A机器和前i
- 1的任务一样，还是花了j分钟，而B机器则花dp[i-1][j]+b[i]分钟；</p>
<p>dp[i][j] =
dp[i-1][j-a[i]]代表第i个任务交给A来做，现在的A机器花费时间是j，所以在前i
-
1个任务完成的时候，A机器是花了j-a[i]分钟的，所以现在B机器还是花了dp[i-1][j-a[i]]分钟；</p>
<p>一直到dp[n][i]:代表所有的任务都做完了，B机器所花费的时间，那么最迟的时间就是B的时间和A的时间求最大值；</p>
<p>for(int i=0; i&lt;=sum;
i++)ans=min(ans,max(dp[n][i],i));//max(dp[n][i],i)
表示完成前n个作业A机器花i分钟
B机器花dp[n][i]分钟情况下，最迟完工时间。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">201</span>], b[<span class="number">201</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">202</span>][<span class="number">10000</span>];<span class="comment">//dp[i][j] 表示前i个作业中A机器花j分钟的时候 B机器所花时间 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) cin&gt;&gt;b[i];</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        sum+=a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;=sum; j++) &#123;</span><br><span class="line">            dp[i][j]=dp[i<span class="number">-1</span>][j]+b[i];</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=a[i]) dp[i][j]=<span class="built_in">min</span>(dp[i<span class="number">-1</span>][j]+b[i],dp[i<span class="number">-1</span>][j-a[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">999999</span>;</span><br><span class="line">    <span class="comment">//max(dp[n][i],i) 表示完成前n个作业A机器花i分钟 B机器花dp[n][i]分钟情况下，最迟完工时间 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;=sum; i++)ans=<span class="built_in">min</span>(ans,<span class="built_in">max</span>(dp[n][i],i));</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可能有些人并没有觉得这个解有什么特殊的，但认真看这个dp数组会发现它是挺有意思的，重复上面的dp[i][j]代表做完前i个任务，A机器花几分钟情况下，B机器所花的时间，也就是说dp[i][j]就是表示B机器所花时间，而同时又显示了A机器花的时间。这样一来就可用二维数组表示B机器和A机器所花的时间了，查看我的教材答案用的却是三维数组，明显更麻烦一些，对这个的话只需最后再找到最长时间便可，也不至于三维数组。</p>
<p>也就我这种见识少的会感叹这种解法，大牛们应该也瞧不上这，仍需要做题啊。</p>
<h1 id="参考">参考</h1>
<p><a
href="https://blog.csdn.net/qq_38089964/article/details/80803595">独立任务最优调度问题</a></p>
<p>其实几乎就是搬运，再加上自己看法</p>
]]></content>
      <tags>
        <tag>数据结构&amp;算法</tag>
      </tags>
  </entry>
  <entry>
    <title>消失的农村学校</title>
    <url>/article/cdf251be.html</url>
    <content><![CDATA[<h1 id="学校去哪了">学校去哪了？</h1>
<p>如题，不知道你们有没有感受到农村学校越来越少了。从我的经历出发，在小学2年级大概，我们班突然来了将近十个新同学，他们都是从我们隔壁村过来的，听说好像是他们村的小学不办了，只能转到我们这里来上小学了。这是我第一次感受到身边的农村小学在减少。之后4、5年级的时候，又转来了一批新同学，他们则是来自更远的隔着几里地村子，原因也是一样。</p>
<span id="more"></span>
<p>小学期间还不断有老同学转到城里上小学了，更加让我坚信农村的小学不好办了，会越来越少。我们村的小学和幼儿园就隔着一堵墙，一扇不大的伸缩拉门可以来往，</p>
<p><img data-src="https://pic.imgdb.cn/item/62efa8da16f2c2beb139ac9b.jpg" /></p>
<p>至今我还有着当年拎着板凳穿过那扇门就进入未来小学的模糊记忆，好像还有什么表演来着，忘了。小学的操场围绕着幼儿园的另一侧，也是幼儿园大门的那一面，操场有两扇门，一扇通往我们小学，一扇通往外面的马路，操场除了平常承接我们体育课任务之外，其余时间对外开放，算是公共的娱乐健身场所。我们小学基础设施还算完善，能兼顾到“几乎”🤧所有的教学场景。这些年还一直在翻新，真的越来越好呢，我都想进去回望一下童年，可以一直没有机会进到校园内。最近的几个村子有我们这样的小学确实不多了，这也是我们这里一直办下去的原因吧。还记得小时候每到夏季（包括暑假开学），老师经常性的让我们带上家里的家伙事儿（就是农具，主要是铲子、铁锹、扫帚等）来学校劳动的事。劳动主要内容就是处理操场疯狂的杂草（那时操场还是土地，砖瓦石头都有的，确实作为体育场所还是有一些危险性的），那时候我们的操场很破旧，200米跑道大小的操场是主体，中间有一个破旧篮球场，篮筐是生锈的，地面是不平的，就是纯纯的混凝土场地，除了篮球场就是一片空地了，跑道外围是一些常见的器材，就只有单双杠，可能外围角落还有一个沙坑。总之就是很破，每次除草还需要号动全校的力量（一些小年级的就不用了），现在回想起来还是很有趣的。😁😁😁</p>
<p>除了小学，我的初中也是在村子里上的，就在我们隔壁村里。算起来，幼儿园、小学和初中都在我家步行10分钟路程内，还是很幸福的。对了，我记得我从幼儿园中班就开始自己一个人上学了😏</p>
<p><img data-src="https://pic.imgdb.cn/item/62efac9016f2c2beb14f21e9.png" /></p>
<h1 id="人都去哪了">人都去哪了？</h1>
<p>初中之前都是每天上下学，在家里吃住，初中才有封闭学校/管理概念的。这个初中应该是我们乡唯一的初中了，周围好像也是这样，每个乡只有一所，而且规模都特别小，都在抢生源，但绝大多数都到县城去了。从我在我们初中的三年看，之后的学生越来越少，甚至我都听到学校因为生源不够一个班也要倒下了😭😭😭</p>
<h1 id="留不下">留不下。</h1>
<p>我相信这应该不是我特有经历，对于生长在农村的你们应该也能感受到。农村留不下，年轻人留不下，学校留不下，都留不下。。。</p>
<p><img data-src="https://pic.imgdb.cn/item/62efada416f2c2beb1563312.png" /></p>
<h1 id="农村越来越冷清">农村越来越冷清</h1>
<p>这就是事实。</p>
<p>尽管，最近是有一些年轻人回到农村继续发光发热，在一些视频平台上记录生活，活得很舒服，也有不错的发展。但，仍不可否定。</p>
<p>试问，谁不愿意为养育自己的土地努力奋斗呢！？</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1494401224&amp;auto=1&amp;height=66">
</iframe>
]]></content>
      <tags>
        <tag>思考</tag>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>焦虑</title>
    <url>/article/169fc98b.html</url>
    <content><![CDATA[<p>焦虑</p>
<span id="more"></span>
<p>转眼间三年要过去了，马上也要大四了，所有人都该有点打算了，有的要考研，有的要工作，有的要考公务员。。。</p>
<p>对于我，实在不想上下去了，只想找个好些的工作，过好自己的人生，不知道为啥我就感觉的我的一些想法是与众不同的，我不想要结婚生子-哺育后代这样几乎所有人都认可的人生，我觉得人生这么短暂为什么要让别人为你决定，为别人而活呢，活着不是为了快活自在吗？</p>
<p>但是摆在面前的问题是大三了，该想一想实习，春招秋招，面试等等问题了，之前是没到这么一步，现在到这一步了，焦虑感就来了，我心里的想法是年轻是该拼的，不要到老了拼不动了才后悔，也就因此，想着怎么进入互联网大厂才会产生焦虑感，不然若是只想混日子，才不会想那么多。</p>
<p>说实话，大学生活与我期待的不一样，也可能因此没有继续上下去的想法了。</p>
<p>寒假刚刚过去，过的一般吧，主要完全没有小时候的年味了，真挺没意思的，农村里活力还是不足，一些部分还是很落后。寒假干的事还不少，除了帮帮家里干活，还在
B站 看视频学习了，发了不少博客。</p>
<p>在我看来，今年最为重要，真的今年就决定了未来几年你的学习工作的方向地点了。</p>
<p>新目标</p>
<ul>
<li>驾照（赶紧科三-科四-拿证，不能拖了）</li>
<li>准备面试（找公司-投简历，）</li>
<li>身体搞好（）</li>
<li>。</li>
</ul>
]]></content>
      <tags>
        <tag>思考</tag>
        <tag>自己</tag>
      </tags>
  </entry>
  <entry>
    <title>知识付费</title>
    <url>/article/5cd0a942.html</url>
    <content><![CDATA[<h1 id="提要">提要</h1>
<p>很早就想写一篇这样的文章了，但一直不知如何“下笔”（码字），主要还是自己的文笔太差，但这确实是自己想聊的一个话题。所以最后还是未准备好的情况下做完了，谅解！</p>
<p>近些年，人类的知识体系正在不断完善，近20年的发展可以称得上是超飞速发展。想想00年，那还是为温饱问题发愁的年代，到现在，各大领域的行业巨头在我们生活的方方面面进行着激烈的竞争，伴随着智能手机、网络通讯、人工智能、云计算、自动驾驶等在我们生活中的渗透，我们的生活受到了极大的影响。我也是愈发不敢想象未来是什么样子，因为发展的实在太快了。要知道我们能看到的未来永远都是在已有知识体系下的有限的想象，就像光，它能照亮的地方我们可能看到，但它照不到的地方我们永远都看不到。要想看到更远的地方需要有人把前人走过的路先走一遍，并能探索新的黑暗把它点亮，为后人照亮新的前路。</p>
<span id="more"></span>
<h1 id="简谈">简谈</h1>
<p>知识付费这个概念早在2016年就被提出了，百度百科给它的定义为“知识付费的现象主要指知识的接收者为所阅览知识付出资金的现象。知识付费让知识的获得者间接为向知识的传播者与筛选者给予报酬，而不是让参与知识传播链条的人通过流量或广告等其它方式获得收益。”。</p>
<p>为什么我会重新想起这个名词呢？想一想你是否有这样的时候/瞬间，曾经我们从外界接收到一些新思想新概念，但一直没有切身体会，无法理解，直到某个时候或瞬间，发现它就在我们身边，离我们很近。我的切身体会出自于越来越多的辅导班的出现，比如什么各种证书考试辅导，考研机构，培训机构等等，再加上今年兴起的互联网教育平台，包括猿辅导、作业帮、好未来，当然还有许多，甚至一些大厂也加入了。他们为什么会出现，正是因为社会发展的太快了，知识成倍增长，我们面对着无穷无尽的知识资源，不知道如何甄别、如何选择，他们出现就是为了给迷茫的我们指引一下方向。不可否认一些机构确实可以给予我们一些帮助，让我们想成功迈进，但也因此一些没有主见的同学会失去了他们那份最重要的探索精神。这份探索精神可以让他们在不依赖于外人的情况下走得更高更远，但却在这时候失去了，尤其还是在学校这个受人照顾的“小社会”中。可以说大学时代或是学生时代，很多人并不是一个完全独立的人，他们不知道未来要做什么，自己能做什么。这时他们对于社会、对于未来、对于世界是有很多美好的幻想的，即使他们社会阅历不足，也没有什么工作能力，但这些又是他们的优点，这时因为他们好奇心和探索精神使得他们可塑能力很强，成长空间特别大。这些好像偏离了知识付费，但我想说的其实就是作为当代年轻人应当敢于跳出别人给定的知识框架，多一点质疑精神，多一些思考精神。我特别不希望因为知识付费的出现，我们搜索资料、自我总结、动手实践的能力越来越差，越来越依赖于他人的帮助。</p>
<h1 id="总结">总结</h1>
<p>永远不要失去对世界的好奇心，勇于探索</p>
]]></content>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>简易短链接项目</title>
    <url>/article/68b36ea9.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p>前面已经预告（<a
href="https://wnhyang.github.io/article/3df251b7.html">MurmurHash算法初探</a>）过了，现在也是完成了，但是确实时没时间写，只能抽空“填坑”了🥱</p>
<p>关于这次从打算做到做完，应该是执行力最强的一次，仅仅不到一周时间就完成了，要是在过去，估计还要拖个几周甚至个把月。</p>
<h2 id="参考">参考：</h2>
<p><a
href="https://mp.weixin.qq.com/s/YTrBaERcyjvw7A0Fg2Iegw">高性能短链设计</a></p>
<p><a
href="https://blog.csdn.net/tianyaleixiaowu/article/details/74739827">BloomFilter布隆过滤器使用</a></p>
<span id="more"></span>
<h1 id="说明">说明</h1>
<p>关于这篇<a
href="https://mp.weixin.qq.com/s/YTrBaERcyjvw7A0Fg2Iegw">高性能短链设计</a>（下面提到的文章都是这个），写的非常好，非常建议有兴趣的认认真真看完。看完了这篇文章，解答了我对现在出现频次越来越高的短链接的很多疑惑。</p>
<p>本次做的简易短链接项目就是基于文章中说的哈希算法做的，使用的便是<code>MurmurHash</code>算法，并使用布隆过滤器优化。</p>
<p>流程如下（图片来源于上面的文章）</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.11ayt47rjc9c.webp"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>要用到的工具：</p>
<p><a
href="https://krisives.github.io/bloom-calculator/">计算布隆过滤器大小</a></p>
<p><a
href="http://tool.p2hp.com/tool-convert-hexadecimal/">在线进制转换</a></p>
<h1 id="数据库设计">数据库设计</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `short_url_map` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `lurl` <span class="type">varchar</span>(<span class="number">160</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;长地址&#x27;</span>,</span><br><span class="line">  `surl` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;短地址&#x27;</span>,</span><br><span class="line">  `gmt_create` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>
<p>文章中数据库是这样设计的，可以看到其中主键类型为
<code>unsigned int</code>，即无符号数，这样的话就可以与<code>MurmurHash</code>算法的<code>32</code>位对应上了，但是<code>Java</code>不支持无符号数，如果使用<code>int/Integer</code>类型就有可能会出现溢出情况（虽然可能性很小，因为毕竟至少要有<span
class="math inline">\(2^{32}\)</span>条数据，也就是要有<span
class="math inline">\(2^{32}\)</span>种链接，很难的啦），为了避免有可能发生的问题，我的数据库设计如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `url_map` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键id&#x27;</span>,</span><br><span class="line">  `surl` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;短链接&#x27;</span>,</span><br><span class="line">  `lurl` <span class="type">varchar</span>(<span class="number">160</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;长链接&#x27;</span>,</span><br><span class="line">  `valid` <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;是否有效&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_surl` (`surl`) <span class="keyword">USING</span> BTREE COMMENT <span class="string">&#x27;短链接唯一索引&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>
<p>把<code>id</code>改为了<code>bigint</code>，加上了我习惯使用的三字段（<code>valid</code>、<code>create_time</code>、<code>update_time</code>），还有短链接的唯一索引。</p>
<h1 id="环境搭建">环境搭建</h1>
<p>主要的依赖还是这个，不仅有必要的<code>MurmurHash</code>算法，还有布隆过滤器可直接使用（重点说明！！！这种布隆过滤器的使用是无效的，因为毕竟是内存布隆过滤器（重启即无效了），并不适用分布式场景，所以这样使用不怎么严谨）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>30.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其他的依赖我就不粘了。为了加快开发，使用了<a
href="https://wnhyang.github.io/article/52ebbcb.html">Mybatis-Plus-Generator</a>快速生成代码，所以工作量就减少很多了，剩下的只是<code>MurMurHash</code>算法、<code>BloomFilter</code>、62进制转换这些了。</p>
<h1 id="代码">代码</h1>
<h2 id="接口">接口</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 前端控制器</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wnhyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-08-22 02:52:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/urlMap&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UrlMapController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REDIRECT</span> <span class="operator">=</span> <span class="string">&quot;redirect:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UrlMapService urlMapService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;sUrl&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">redirect</span><span class="params">(<span class="meta">@PathVariable(&quot;sUrl&quot;)</span> String sUrl, HttpServletResponse response)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;重定向&#123;&#125;&quot;</span>, sUrl);</span><br><span class="line">        <span class="keyword">return</span> REDIRECT + urlMapService.redirect(sUrl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">urlMap</span><span class="params">(<span class="meta">@RequestBody</span> Url url)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;生成短链接&#123;&#125;&quot;</span>, url);</span><br><span class="line">        <span class="keyword">return</span> urlMapService.urlMap(url.getUrl());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一共两个接口，一个生成短链接，一个短链接重定向。</p>
<h2 id="核心代码">核心代码</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 服务实现类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wnhyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-08-22 02:52:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UrlMapServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UrlMapMapper, UrlMap&gt; <span class="keyword">implements</span> <span class="title class_">UrlMapService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UrlMapMapper urlMapMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">HashFunction</span> <span class="variable">HASH_FUNCTION</span> <span class="operator">=</span> Hashing.murmur3_32();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BloomFilter&lt;String&gt; BLOOM_FILTER = BloomFilter.create(Funnels.stringFunnel(Charset.defaultCharset()), Encoder62.SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">STR</span> <span class="operator">=</span> <span class="string">&quot;ZRCTGD&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">redirect</span><span class="params">(String sUrl)</span> &#123;</span><br><span class="line">        <span class="type">UrlMap</span> <span class="variable">urlMap</span> <span class="operator">=</span> urlMapMapper.selectOne(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;UrlMap&gt;().eq(<span class="string">&quot;surl&quot;</span>, sUrl));</span><br><span class="line">        <span class="keyword">return</span> urlMap.getLurl().replaceAll(STR, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">urlMap</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sUrl</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;url:&#123;&#125;&quot;</span>, url);</span><br><span class="line">            <span class="comment">// 1、MurmurHash加密</span></span><br><span class="line">            <span class="type">HashCode</span> <span class="variable">hashCode</span> <span class="operator">=</span> HASH_FUNCTION.hashString(url, StandardCharsets.UTF_8);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2、短链</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sUrl = Encoder62.encode62(hashCode.padToLong());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">&quot;sUrl:&#123;&#125;&quot;</span>, sUrl);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3、布隆过滤器</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">contain</span> <span class="operator">=</span> BLOOM_FILTER.mightContain(sUrl);</span><br><span class="line"></span><br><span class="line">            <span class="type">UrlMap</span> <span class="variable">urlMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlMap</span>();</span><br><span class="line">            urlMap.setSurl(sUrl);</span><br><span class="line">            urlMap.setLurl(url);</span><br><span class="line">            <span class="keyword">if</span> (contain) &#123;</span><br><span class="line">                url += STR;</span><br><span class="line">                log.info(<span class="string">&quot;contain,new url:&#123;&#125;&quot;</span>, url);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                urlMapMapper.insert(urlMap);</span><br><span class="line">                BLOOM_FILTER.put(sUrl);</span><br><span class="line">                log.info(<span class="string">&quot;not contain,put(&#123;&#125;)&quot;</span>, sUrl);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.ok(sUrl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里就是接口的业务实现</p>
<ul>
<li><p>重定向比较简单，通过短链接查询长链接，移除可能存在的自定义字符串（理论上有可能会误删，关键在于自定义字符串定义）。</p></li>
<li><p>生成短链接流程如上图，对应代码看即可</p></li>
</ul>
<h2 id="进制转换">62进制转换</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wnhyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-08-22 15:47</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Encoder62</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * BloomFilter预期插入次数</span></span><br><span class="line"><span class="comment">     * 1L &lt;&lt; 16 &lt;&lt; 16</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">SIZE</span> <span class="operator">=</span> <span class="number">1L</span> &lt;&lt; <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SCALE</span> <span class="operator">=</span> <span class="number">62</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">char</span>[] ARRAYS = <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>.toCharArray();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encode62</span><span class="params">(<span class="type">long</span> num)</span> &#123;</span><br><span class="line">        <span class="comment">// if (num &gt; SIZE) &#123;</span></span><br><span class="line">        <span class="comment">//     throw new RuntimeException(&quot;num:&quot; + num + &quot;过大&quot;);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">remain</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            remain = (<span class="type">int</span>) (num % SCALE);</span><br><span class="line">            sb.append(ARRAYS[remain]);</span><br><span class="line">            num /= SCALE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里说明一下，<code>BloomFilter</code>理论上应该设置<span
class="math inline">\(2^{32}\)</span>，但是通过计算可知</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.3qdqzr8sm140.webp"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>需要3.6G内存，我第一次这样设置好，直接堆溢出，太可笑了😂</p>
<p>所以我最后设置的是<span
class="math inline">\(2^{16}\)</span>，还可以接受</p>
<h1 id="测试">测试</h1>
<p>就两个接口，简单测试一下就好了，还是比较顺利的</p>
<h1 id="总结">总结</h1>
<p>关于生成短链接，除了Hash算法还有自增序列算法等方法，文章中还给出了“高性能短链的架构设计”，我还不是太懂，可以后续回看一下😯</p>
]]></content>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>租房记</title>
    <url>/article/59d8ee3f.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p>从我的租房经历给点租房建议。</p>
<span id="more"></span>
<h1 id="看房源">看房源</h1>
<p>看房源的话，有很多平台，以下只说了一部分</p>
<ul>
<li>豆瓣租房小组（我的主要阵地，有很多租房帖子，包括整租、合租、转租等等，有些是租客，有些是中介，房东比较少）</li>
<li>自如、我爱我家、蛋壳、贝壳（这些都属于一些大平台的改装房，本质是二房东，不过大平台也放心点）</li>
<li>微信群、小程序（不属于直接途径，如果能加入一些微信群或是可靠的房源小程序，那房东的概率还是大一些的）</li>
<li>探访小区（需要探访一些小区，找一找有没有一些房东贴的租房公告之类的，这种途径最耗时耗力，但直接和房东交流更可靠些）</li>
<li>。。。</li>
</ul>
<p>当然看房源的途径有很多，都需要自行甄别</p>
<h1 id="实地考察">实地考察</h1>
<p>当你锁定一些备选项后，非常需要实地考察一下，毕竟眼见为实，照片有时并不能展示最真实状况。</p>
<h2 id="光照与房型">光照与房型</h2>
<p>房子的南北朝向、窗口方向决定了这个屋子采光状况。窗户大，通风好，不仅在白天能提供充足的阳光沐浴，而且在感官上使屋子更宽敞，多多向窗外看看也能愉悦心情、对眼睛也好。</p>
<p>提到光照，要根据所在地区做出理想的判断。</p>
<p>比如在多雨的南方，到了南方潮湿的天气，衣服要在哪里晾晒？是否通风？阳光直射？遮光隐蔽条件？</p>
<p>房型只有实地看了才知道。可以在看房时想象一下，如果自己搬进来了，哪里准备放什么，自己会怎样生活在这。</p>
<h2 id="周边设施与交通">周边设施与交通</h2>
<p>周边设施与交通是最能产生差价的了，通常离公交、地铁近的都会贵一些的，周边设施的话，主要关注：医院、超市、快递点、理发店、饭店。关于这个与房价属于是鱼和熊掌的关系，要看怎么取舍了，如果你预算充足，当我没说喽🤧</p>
<h1 id="确定租房前">确定租房前</h1>
<p>房租是最关键的，通常可以试着小刀一下，同时问清楚水、电、网是怎么算，检查一下各种设施是否完好，可以拍照记录（以免有些无赖耍无赖），一定要多问，有什么疑问直接发问，不要被他们的话语给骗了，什么“我们也是打工的，没那么认真，不会骗你的”，“这个房子很抢手的，今晚不定下，明天就没了”等等，他们都是老油子，真别那么轻易相信陌生人（曾经我也很天真，相信他们都是好人，会为我考虑。现在？p，谈的都是生意，哪来的感情🤡）。</p>
<h1 id="签合同">签合同</h1>
<p>签合同是有法律效力，很重要！</p>
<p>认真看合同！！！</p>
<p>认真看合同！！！</p>
<p>认真看合同！！！</p>
<p>合同决定了你是和谁签合同，是和房东还是和平台，还是什么，看清楚了！！！</p>
<p>如果是个人，检查对方的个人信息，还可以让对方出示房产证等证件。</p>
<p>以防万一，可以把交流的聊天记录和通话记录保存下来。</p>
<h1 id="我的经历吐槽">我的经历吐槽</h1>
<h2 id="中介">中介</h2>
<p>很不幸，第一次租房就遇到中介，且听信了她的话，看完房子当晚就交了钱定下了。第二天才了解到她是中介还要中介费的，我直接傻了，可是我已经交了押金了，只能这样了（怕她有其他手段，要不回押金），极不情愿的给出了半个月房租作为中介费，还随意地和她（中介，代房东）签了合同。</p>
<h2 id="房东拖押金">房东拖押金</h2>
<p>我搬出去了，不断地给房东发消息要押金，可她像是消失了一样，一个字蹦不出来，就是不回消息，高高在上。</p>
<p>在没回我消息期间与另一个租客“谈生意”，说着“我有很多房，你的预算是多少？”。</p>
<p>又等了一周，依然没有消息。直到10天左右，我实在坐不住了，除了消息发送，开始尝试电话沟通，可是电话就没有通过。当天第一次回我“今晚结算”，我以为我看到希望，可那天过去再没消息。</p>
<p>回想起，每次她问我要房租时，她清淡的一句“X月房租到了，有空汇一下”，我还毕恭毕敬地转账截图，跟狗一样。</p>
<p>第二天，我可算忍不了了，电话轰炸，也不知道这么多房子的有钱人是有多忙，电话永远是在无人接听的最后一秒挂断，终于我发了一句“今天结了押金吧，求求了”，她愿意说一句“嗯，还有半小时到家”。我想知道你是很喜欢这种居高临下的感觉吗？非要等我我说“求求”，什么毛病。</p>
<p>可等了半个多小时依然没有消息，我只能继续电话轰炸，她是真的受不了了？给结了，可还是少了100RMB，一句话没有，问她理由是什么，继续一句不说，真的碰到这样的房东也是倒死霉了。</p>
<p>真想不通这样的有钱人这么不痛快的吗？我给朋友吐槽，他说“那你以为她为啥这么有钱的”。其实我是想好她不给押金的方案的：我是留有一些记录，我会把这些整理起来放在各种能发言的平台上，不管是视频还是文章都会控诉这样的行为。</p>
<p>到现在，虽然结了押金（不过不够，也没说明原因），但这个要押金的过程可真难啊，我还是决心发出来控诉一下。</p>
<h3 id="聊天记录">聊天记录</h3>
<p><img data-src="https://pic.imgdb.cn/item/62cfe7a0f54cd3f937b4d3f1.png" />
<img data-src="https://pic.imgdb.cn/item/62cfe7a0f54cd3f937b4d3fe.png" />
<img data-src="https://pic.imgdb.cn/item/62cfe7a0f54cd3f937b4d404.png" />
<img data-src="https://pic.imgdb.cn/item/62cfe7a0f54cd3f937b4d422.png" />
<img data-src="https://pic.imgdb.cn/item/62cfe7a0f54cd3f937b4d42c.png" />
<img data-src="https://pic.imgdb.cn/item/62cfe7cef54cd3f937b53ae0.png" /></p>
<h3 id="吐槽">吐槽</h3>
<p><img data-src="https://pic.imgdb.cn/item/62cfe7cef54cd3f937b53af4.png" /></p>
<h1 id="结">结</h1>
<p>我向来不愿意用最大的恶意揣测任何人，但是有的人确实很过分</p>
<p>三句作结</p>
<ul>
<li>要知道世界本身就是不公平的</li>
<li>别轻易相信任何人</li>
<li>法律武器!?</li>
</ul>
]]></content>
      <tags>
        <tag>自己</tag>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>算法</title>
    <url>/article/b7e144d1.html</url>
    <content><![CDATA[<h1 id="定义">定义</h1>
<p>算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。</p>
<h1 id="算法特性">算法特性</h1>
<p>算法具有五个基本特性：输入、输出、有穷性、确定性、可行性。</p>
<span id="more"></span>
<h1 id="输入输出">输入输出</h1>
<p>算法至少有一个或多个输出。</p>
<h1 id="有穷性">有穷性</h1>
<p>有穷性：指算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每个步骤在可以接受的时间内完成。</p>
<h1 id="确定性">确定性</h1>
<p>确定性：算法的每个步骤都具有确定的含义，不会出现二义性。</p>
<h1 id="可行性">可行性</h1>
<p>可行性：算法的每一步都必须是可行的，也就是说，每一步都能够通过执行有限次数完成。</p>
<h1 id="算法设计要求">算法设计要求</h1>
<h1 id="正确性">正确性</h1>
<p>正确性：算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。
大体分为以下层次：</p>
<ol type="1">
<li>算法程序没有语法错误。</li>
<li>算法程序对于合法的输入数据能够产生满足要求的输出结果。</li>
<li>算法程序对于非法的输入数据能够得出满足规格说明的结果。</li>
<li>算法程序对于精心选择的，甚至刁难的测试数据都有满足要求的输出结果。</li>
</ol>
<h1 id="可读性">可读性</h1>
<p>可读性：算法设计的另一个目的是为了便于阅读、理解和交流。</p>
<h1 id="健壮性">健壮性</h1>
<p>健壮性：当输入数据不合法时，算法也能做出相关处理，而不是产生异常或莫名其奥妙的结果。</p>
<h1 id="时间效率高和存储量低">时间效率高和存储量低</h1>
<p>设计算法应该尽量满足时间效率高和存储量低的需求。</p>
<h1 id="算法效率度量方法">算法效率度量方法</h1>
<h1 id="事后统计法">事后统计法</h1>
<p>事后统计方法:这种方法主要是通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。</p>
<h1 id="事前分析估算法">事前分析估算法</h1>
<p>事前分析估算法：在计算机程序编制前，依据统计方法对算法进行估算。</p>
<h1 id="算法时间复杂度">算法时间复杂度</h1>
<h1 id="定义-1">定义</h1>
<p>在进行算法分析时，语句总的执行次数T(n)是关于问题规模n的函数，进行分析T(n)随n的变化情况并确定T(n)的数量级。算法的时间复杂度，也就是算法的时间量度，记作：T(n)=O(f(n))。它表示随问题规模n增大，算法执行时间的增长率和f(n)的增长率相同，称作算法的渐进时间复杂度，简称为时间复杂度。其中f(n)是问题规模n的某个函数。</p>
<h1 id="推导大o阶方法">推导大O阶方法</h1>
<ol type="1">
<li>用常数1取代运行时间中的所有加法常数。</li>
<li>在修改后的运行次数函数中，只保留最高阶项。</li>
<li>如果最高阶项存在且不是1，则去除与这个项相乘的常数。得到的结果就是大O阶。</li>
</ol>
<h1 id="常数阶线性阶对数阶等">常数阶、线性阶、对数阶等</h1>
<h1 id="常见的时间复杂度">常见的时间复杂度</h1>
<table>
<thead>
<tr class="header">
<th>执行次数</th>
<th>阶</th>
<th>非正式术语</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><span class="math inline">\(12\)</span></td>
<td>O(<span class="math inline">\(1\)</span>)</td>
<td>常数阶</td>
</tr>
<tr class="even">
<td><span class="math inline">\(2n+3\)</span></td>
<td>O(<span class="math inline">\(n\)</span>)</td>
<td>线性阶</td>
</tr>
<tr class="odd">
<td><span class="math inline">\(3n^2+2n+1\)</span></td>
<td>O(<span class="math inline">\(n^2\)</span>)</td>
<td>平方阶</td>
</tr>
<tr class="even">
<td><span class="math inline">\(5log_2n+20\)</span></td>
<td>O(<span class="math inline">\(logn\)</span>)</td>
<td>对数阶</td>
</tr>
<tr class="odd">
<td><span class="math inline">\(2n+3nlog_2n+19\)</span></td>
<td>O(<span class="math inline">\(nlogn\)</span>)</td>
<td>nlogn阶</td>
</tr>
<tr class="even">
<td><span class="math inline">\(6n^3+2n^2+3n+4\)</span></td>
<td>O(<span class="math inline">\(n^3\)</span>)</td>
<td>立方阶</td>
</tr>
<tr class="odd">
<td><span class="math inline">\(2^n\)</span></td>
<td>O(<span class="math inline">\(2^n\)</span>)</td>
<td>指数阶</td>
</tr>
</tbody>
</table>
<p>O(<span class="math inline">\(1\)</span>)&lt; O(<span
class="math inline">\(1logn\)</span>)&lt; O(<span
class="math inline">\(n\)</span>)&lt; O(<span
class="math inline">\(nlogn\)</span>)&lt; O(<span
class="math inline">\(n^2\)</span>)&lt; O(<span
class="math inline">\(n^3\)</span>)&lt; O(<span
class="math inline">\(2^n\)</span>)&lt; O(<span
class="math inline">\(n!\)</span>)&lt; O(<span
class="math inline">\(n^n\)</span>)</p>
<p><a
href="https://www.jianshu.com/p/def16ee5c8c4">显示问题，参考</a></p>
<h1 id="最坏情况与平均情况">最坏情况与平均情况</h1>
<p>最坏情况运行时间是一种保证，那就是运行时间将不会在坏了。在应用中，这是一种最重要的需求，通常，除非特别指定，我们提到的运行时间都是最坏情况的运行时间。</p>
<p>平均运行时间是所有情况中最有意义，因为它是期望的运行时间。</p>
<h1 id="算法空间复杂度">算法空间复杂度</h1>
<p>算法空间复杂度通过计算算法所需的存储空间实现，算法空间复杂度的计算公式记作：S(n)=O(f(n)，其中，n为问题规模，f(n)为语句关于n所占存储空间的函数。</p>
<h1 id="总结">总结</h1>
<p>优化算法，对于计算科学和程序设计有很大意义！！！</p>
]]></content>
      <tags>
        <tag>数据结构&amp;算法</tag>
      </tags>
  </entry>
  <entry>
    <title>秒杀demo</title>
    <url>/article/5cbc0449.html</url>
    <content><![CDATA[<p>秒杀项目真的是早有耳闻，可以说是大火有一阵子，因为这其中涉及高并发、数据库、缓存，更有甚者还有分布式、分库分表、集群等。</p>
<p>这次有机会跟着视频学习了一点秒杀系统，这里做个总结</p>
<h1 id="参考">参考</h1>
<p><a
href="https://www.bilibili.com/video/BV1CE411s7xN">https://www.bilibili.com/video/BV1CE411s7xN</a></p>
<p><a
href="https://www.bilibili.com/video/BV13a4y1t7Wh">https://www.bilibili.com/video/BV13a4y1t7Wh</a></p>
<span id="more"></span>
<h1 id="基础环境和工具">基础环境和工具</h1>
<ul>
<li>IDEA 2020 + JDK8</li>
<li>SpringBoot 2.x</li>
<li>虚拟机CentOS上的 MySQL 5.7x + Redis 6.x</li>
<li>Mybatis</li>
<li>Lombok</li>
<li>Navicat （MySQL可视化工具）</li>
<li>Redis Desktop Manager （Redis可视化工具）</li>
<li>MobaXterm （SSH工具）</li>
<li>JMeter （压力测试工具）</li>
<li>Postman/Chrome</li>
</ul>
<h1 id="pom.xml-基础依赖">pom.xml 基础依赖</h1>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="application">application</h1>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8090</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.1.106:3306/seckill</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.106</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span> <span class="comment">#sql映射文件位置</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.wnh.entity</span> <span class="comment">#实体类别名</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置日志</span></span><br><span class="line"><span class="attr">logging.level.root</span>=<span class="string">info</span></span><br><span class="line"><span class="attr">logging.level.com.wnh.dao</span>=<span class="string">debug</span></span><br></pre></td></tr></table></figure>
<h1 id="项目框架">项目框架</h1>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.3kqbmcc1raq0.png"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for stock</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `stock`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `stock`  (</span><br><span class="line">  `sid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;商品id&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品名称&#x27;</span>,</span><br><span class="line">  `total` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;库存&#x27;</span>,</span><br><span class="line">  `sale` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;已售&#x27;</span>,</span><br><span class="line">  `version` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;版本号&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`sid`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">4</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for stock_order</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `stock_order`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `stock_order`  (</span><br><span class="line">  `oid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `sid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">0</span>) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">0</span>),</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`oid`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">4749</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br></pre></td></tr></table></figure>
<p>注意这里订单不能命名为order，MySQL保留字错误</p>
<h1 id="entity">Entity</h1>
<p>Stock</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stock</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer sid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer total;</span><br><span class="line">    <span class="keyword">private</span> Integer sale;</span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Order</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer oid;</span><br><span class="line">    <span class="keyword">private</span> Integer sid;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="mapper">Mapper</h1>
<p>商品Mapper</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.wnh.dao.StockMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateSale&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;stock&quot;</span>&gt;</span></span><br><span class="line">        update stock</span><br><span class="line">        set sale=sale + 1</span><br><span class="line">        where sid = #&#123;sid&#125;</span><br><span class="line">          and total &gt; sale</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateSaleWithVersion&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;stock&quot;</span>&gt;</span></span><br><span class="line">        update stock</span><br><span class="line">        set sale=sale + 1,</span><br><span class="line">            version=version + 1</span><br><span class="line">        where sid = #&#123;sid&#125;</span><br><span class="line">          and version = #&#123;version&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkStock&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;stock&quot;</span>&gt;</span></span><br><span class="line">        select sid, name, total, sale, version</span><br><span class="line">        from stock</span><br><span class="line">        where sid = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listStocks&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;stock&quot;</span>&gt;</span></span><br><span class="line">        select sid, total, sale</span><br><span class="line">        from stock</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以发现这里有两个不同的更新操作，两个都是利用数据库的乐观锁实现的简单的并发处理</p>
<p>订单Mapper</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.wnh.dao.OrderMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--useGeneratedKeys=&quot;true&quot; 数据库自增生成 keyProperty=&quot;oid&quot; 返回生成值到 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;createOrder&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;order&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;oid&quot;</span>&gt;</span></span><br><span class="line">        insert into stock_order</span><br><span class="line">        values (#&#123;oid&#125;, #&#123;sid&#125;, #&#123;createTime&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="service">Service</h1>
<p>StockService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StockServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">StockService</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StockMapper stockMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Stock&gt; <span class="title function_">listStocks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stockMapper.listStocks();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查库存</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Stock <span class="title function_">checkStock</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="type">Stock</span> <span class="variable">stock</span> <span class="operator">=</span> stockMapper.checkStock(id);</span><br><span class="line">        <span class="keyword">if</span> (stock.getSale().equals(stock.getTotal())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 已售增加</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateSale</span><span class="params">(Stock stock)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stockMapper.updateSale(stock);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OrderService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StockService stockService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">kill</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="comment">// 校验库存</span></span><br><span class="line">        <span class="type">Stock</span> <span class="variable">stock</span> <span class="operator">=</span> stockService.checkStock(id);</span><br><span class="line">        <span class="comment">// 扣除库存</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">up</span> <span class="operator">=</span> stockService.updateSale(stock);</span><br><span class="line">        <span class="keyword">if</span> (up == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建订单</span></span><br><span class="line">        <span class="keyword">return</span> createOrder(stock);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建订单</span></span><br><span class="line">    <span class="keyword">private</span> Integer <span class="title function_">createOrder</span><span class="params">(Stock stock)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.setSid(stock.getSid()).setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        orderMapper.createOrder(order);</span><br><span class="line">        <span class="keyword">return</span> order.getOid();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>关键接口是 OrderService 的 kill 方法</p>
<h1 id="controller">Controller</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;stock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BuyController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StockService stockService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 秒杀</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;kill&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">kill</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;秒杀商品id = &quot;</span> + id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">orderId</span> <span class="operator">=</span> orderService.kill(id);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;秒杀成功，订单id为：&quot;</span> + orderId;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="启动项目测试">启动项目测试</h1>
<p>初始数据库数据</p>
<p>商品表</p>
<table>
<thead>
<tr class="header">
<th>sid</th>
<th>name</th>
<th>total</th>
<th>sale</th>
<th>version</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>iphone8</td>
<td>100</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td>2</td>
<td>p40</td>
<td>5</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td>3</td>
<td>k30</td>
<td>200</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>订单表为空</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.w9zmmubhups.png"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>一次请求后</p>
<p>sale+1，变为1，增加了一条订单，其他没有变化</p>
<p>JMeter测试</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.88sba43umic.png"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>sale变为100，订单总数100条，Throughput为100-200/sec</p>
<p>总体没出现大问题，但是Throughput不尽人意</p>
<p>恢复原数据把 JMeter 参数稍稍一改，1000不变，Loop Cout
变为10，也就是总共 10000
次请求，这次整个测试过程变得很慢，最终Throughput也停留在
30-40/sec，当然这需要优化</p>
<h1 id="加入redis">加入Redis</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;stock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BuyController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StockService stockService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Stock&gt; stocks = stockService.listStocks();</span><br><span class="line">        <span class="keyword">for</span> (Stock stock : stocks) &#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(Constants.REDIS_STOCK_LAST + stock.getSid(), stock.getTotal() - stock.getSale() + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 秒杀</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;kill&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">kill</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">increment</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().decrement(Constants.REDIS_STOCK_LAST + id);</span><br><span class="line">        <span class="keyword">if</span> (increment &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().increment(Constants.REDIS_STOCK_LAST + id);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;商品已售完&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;秒杀商品id = &quot;</span> + id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">orderId</span> <span class="operator">=</span> orderService.kill(id);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;秒杀成功，订单id为：&quot;</span> + orderId;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().increment(Constants.REDIS_STOCK_LAST + id);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动系统</p>
<p>查到 Redis 里已经存入数据，Postman测试没有问题</p>
<p>JMeter 测试过程很快，但 Throughput 提升一点</p>
<h1 id="二级缓存">二级缓存</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;stock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BuyController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StockService stockService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConcurrentHashMap&lt;Integer, Boolean&gt; stockSoldOutMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Stock&gt; stocks = stockService.listStocks();</span><br><span class="line">        <span class="keyword">for</span> (Stock stock : stocks) &#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(Constants.REDIS_STOCK_LAST + stock.getSid(), stock.getTotal() - stock.getSale() + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 秒杀</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;kill&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">kill</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stockSoldOutMap.get(id) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;商品已售完&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">increment</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().decrement(Constants.REDIS_STOCK_LAST + id);</span><br><span class="line">        <span class="keyword">if</span> (increment &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            stockSoldOutMap.put(id, <span class="literal">true</span>);</span><br><span class="line">            stringRedisTemplate.opsForValue().increment(Constants.REDIS_STOCK_LAST + id);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;商品已售完&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;秒杀商品id = &quot;</span> + id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">orderId</span> <span class="operator">=</span> orderService.kill(id);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;秒杀成功，订单id为：&quot;</span> + orderId;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().increment(Constants.REDIS_STOCK_LAST + id);</span><br><span class="line">            <span class="keyword">if</span> (stockSoldOutMap.get(id) != <span class="literal">null</span>) &#123;</span><br><span class="line">                stockSoldOutMap.remove(id);</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再次测试，因为通过JVM内存缓存了是否售空，所以系统还能再提升一些。</p>
<h1 id="令牌桶限流">令牌桶限流</h1>
<p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- google开源工具类RateLimiter令牌桶实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>30.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建令牌桶实例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">RateLimiter</span> <span class="variable">rateLimiter</span> <span class="operator">=</span> RateLimiter.create(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;sale&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">sale</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.没有获取 token 请一直到获取到 token 令牌</span></span><br><span class="line">    <span class="comment">// log.info(&quot;等待时间：&quot;+rateLimiter.acquire());</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.设置等待时间，如果在等待时间内获取到了 token 令牌，则处理业务，没有则抛弃</span></span><br><span class="line">    <span class="keyword">if</span> (!rateLimiter.tryAcquire(<span class="number">2</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前请求被限流，直接抛弃，无法调用后续秒杀逻辑...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;处理业务.............&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;抢购成功&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完整Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;stock&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BuyController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StockService stockService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConcurrentHashMap&lt;Integer, Boolean&gt; stockSoldOutMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建令牌桶实例</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">RateLimiter</span> <span class="variable">rateLimiter</span> <span class="operator">=</span> RateLimiter.create(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;sale&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sale</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.没有获取 token 请一直到获取到 token 令牌</span></span><br><span class="line">        <span class="comment">// log.info(&quot;等待时间：&quot;+rateLimiter.acquire());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.设置等待时间，如果在等待时间内获取到了 token 令牌，则处理业务，没有则抛弃</span></span><br><span class="line">        <span class="keyword">if</span> (!rateLimiter.tryAcquire(<span class="number">2</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前请求被限流，直接抛弃，无法调用后续秒杀逻辑...&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;抢购失败&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理业务.............&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;抢购成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;killtoken&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">killtoken</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!rateLimiter.tryAcquire(<span class="number">2</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前请求被限流，直接抛弃，无法调用后续秒杀逻辑...&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;抢购失败&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> kill(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Stock&gt; stocks = stockService.listStocks();</span><br><span class="line">        <span class="keyword">for</span> (Stock stock : stocks) &#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(Constants.REDIS_STOCK_LAST + stock.getSid(), stock.getTotal() - stock.getSale() + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 秒杀</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;kill&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">kill</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stockSoldOutMap.get(id) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;商品已售完&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">increment</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().decrement(Constants.REDIS_STOCK_LAST + id);</span><br><span class="line">        <span class="keyword">if</span> (increment &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            stockSoldOutMap.put(id, <span class="literal">true</span>);</span><br><span class="line">            stringRedisTemplate.opsForValue().increment(Constants.REDIS_STOCK_LAST + id);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;商品已售完&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;秒杀商品id = &quot;</span> + id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">orderId</span> <span class="operator">=</span> orderService.kill(id);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;秒杀成功，订单id为：&quot;</span> + orderId;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().increment(Constants.REDIS_STOCK_LAST + id);</span><br><span class="line">            <span class="keyword">if</span> (stockSoldOutMap.get(id) != <span class="literal">null</span>) &#123;</span><br><span class="line">                stockSoldOutMap.remove(id);</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试 killtoken
接口，可以发现在一定情况下是卖不完的，虽然请求数大于库存数，这时仍然没有超卖问题</p>
<h1 id="问题">问题</h1>
<ul>
<li>规定时间段内可抢购，其他时间不能</li>
<li>恶意抓包获取接口，脚本抢购</li>
<li>单个用户限制抢购</li>
</ul>
<h1 id="限时抢购">限时抢购</h1>
<p>利用 Redis 过期时间，设置抢购时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;kill&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">kill</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    <span class="comment">// 存在则还是抢购时间段内，否则活动已结束</span></span><br><span class="line">    <span class="keyword">if</span> (!stringRedisTemplate.hasKey(Constants.REDIS_STOCK_KILL + id)) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;秒杀活动已结束...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;秒杀活动已结束&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (stockSoldOutMap.get(id) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;商品已售完&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">increment</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().decrement(Constants.REDIS_STOCK_LAST + id);</span><br><span class="line">    <span class="keyword">if</span> (increment &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        stockSoldOutMap.put(id, <span class="literal">true</span>);</span><br><span class="line">        stringRedisTemplate.opsForValue().increment(Constants.REDIS_STOCK_LAST + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;商品已售完&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;秒杀商品id = &quot;</span> + id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">orderId</span> <span class="operator">=</span> orderService.kill(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;秒杀成功，订单id为：&quot;</span> + orderId;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().increment(Constants.REDIS_STOCK_LAST + id);</span><br><span class="line">        <span class="keyword">if</span> (stockSoldOutMap.get(id) != <span class="literal">null</span>) &#123;</span><br><span class="line">            stockSoldOutMap.remove(id);</span><br><span class="line">        &#125;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> e.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试</p>
<p>设置1号商品5秒内可抢购</p>
<p><code>set stock_kill_1 1 EX 5</code></p>
<p>JMeter测试正常，部分因令牌桶限流，部分因超过抢购时间直接返回</p>
<h1 id="防脚本验证">防脚本验证</h1>
<p>用户表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `uid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`uid`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure>
<p>加入</p>
<table>
<thead>
<tr class="header">
<th>uid</th>
<th>name</th>
<th>password</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>小杨</td>
<td>123456</td>
</tr>
</tbody>
</table>
<p>User</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UserMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    User <span class="title function_">findUserById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UserMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.wnh.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select uid, name, password</span><br><span class="line">        from user</span><br><span class="line">        where uid = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Controller新加入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成MD5</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;md5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getMD5</span><span class="params">(Integer sid, Integer uid)</span> &#123;</span><br><span class="line">    String md5;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        md5 = orderService.getMD5(sid, uid);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;获取md5失败：&quot;</span> + e.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;获取的MD5为：&quot;</span> + md5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OrderService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getMD5</span><span class="params">(Integer sid, Integer uid)</span> &#123;</span><br><span class="line">    <span class="comment">// 验证用户</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findUserById(uid);</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户不存在！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;用户信息:[&#123;&#125;]&quot;</span>, user.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证商品</span></span><br><span class="line">    <span class="type">Stock</span> <span class="variable">stock</span> <span class="operator">=</span> stockService.checkStock(sid);</span><br><span class="line">    <span class="keyword">if</span> (stock == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;商品不存在！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;商品信息:[&#123;&#125;]&quot;</span>, stock.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成hashkey</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">hashKey</span> <span class="operator">=</span> <span class="string">&quot;KEY_&quot;</span> + uid + <span class="string">&quot;_&quot;</span> + sid;</span><br><span class="line">    <span class="comment">// 生成MD5 随机盐-&quot;!Qr*#3&quot;</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> DigestUtils.md5DigestAsHex((uid + <span class="string">&quot;!Qr*#3&quot;</span> + sid).getBytes());</span><br><span class="line">    stringRedisTemplate.opsForValue().set(hashKey, key, <span class="number">120</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;Redis写入:[&#123;&#125;]-[&#123;&#125;]&quot;</span>, hashKey, key);</span><br><span class="line">    <span class="keyword">return</span> key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>postman测试接口为http://localhost:8090/stock/md5?sid=1&amp;uid=1</p>
<p>结果为：<code>获取的MD5为：6f2c1a31e4b297c4f85c166c09009ec6</code></p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.68ksory3x580.png"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>控制台</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image-20210530152757952.1htot39bww3k.png"
alt="image-20210530152757952" />
<figcaption aria-hidden="true">image-20210530152757952</figcaption>
</figure>
<p>查看Redis，没有问题</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.2u8i2kq3s7s0.png"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>看到设置了120秒的过期时间</p>
<p>改造加入验证</p>
<p>Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;killtokenmd5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">killtokenmd5</span><span class="params">(Integer sid, Integer uid, String md5)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!rateLimiter.tryAcquire(<span class="number">2</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前请求被限流，直接抛弃，无法调用后续秒杀逻辑...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;抢购失败&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试验证用户 暂时注释</span></span><br><span class="line">    <span class="comment">// if (!stringRedisTemplate.hasKey(Constants.REDIS_STOCK_KILL + sid)) &#123;</span></span><br><span class="line">    <span class="comment">//     System.out.println(&quot;秒杀活动已结束...&quot;);</span></span><br><span class="line">    <span class="comment">//     return &quot;秒杀活动已结束&quot;;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (stockSoldOutMap.get(sid) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;商品已售完&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">increment</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().decrement(Constants.REDIS_STOCK_LAST + sid);</span><br><span class="line">    <span class="keyword">if</span> (increment &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        stockSoldOutMap.put(sid, <span class="literal">true</span>);</span><br><span class="line">        stringRedisTemplate.opsForValue().increment(Constants.REDIS_STOCK_LAST + sid);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;商品已售完&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;秒杀商品id = &quot;</span> + sid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">orderId</span> <span class="operator">=</span> orderService.killtokenmd5(sid, uid, md5);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;秒杀成功，订单id为：&quot;</span> + orderId;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().increment(Constants.REDIS_STOCK_LAST + sid);</span><br><span class="line">        <span class="keyword">if</span> (stockSoldOutMap.get(sid) != <span class="literal">null</span>) &#123;</span><br><span class="line">            stockSoldOutMap.remove(sid);</span><br><span class="line">        &#125;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> e.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">killtokenmd5</span><span class="params">(Integer sid, Integer uid, String md5)</span> &#123;</span><br><span class="line">    <span class="comment">//验证签名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">hashKey</span> <span class="operator">=</span> <span class="string">&quot;KEY_&quot;</span> + uid + <span class="string">&quot;_&quot;</span> + sid;</span><br><span class="line">    <span class="keyword">if</span> (!md5.equals(stringRedisTemplate.opsForValue().get(hashKey))) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;当前请求不合法，请稍后再试！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校验库存</span></span><br><span class="line">    <span class="type">Stock</span> <span class="variable">stock</span> <span class="operator">=</span> stockService.checkStock(sid);</span><br><span class="line">    <span class="comment">// 扣除库存</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">up</span> <span class="operator">=</span> stockService.updateSale(stock);</span><br><span class="line">    <span class="keyword">if</span> (up == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建订单</span></span><br><span class="line">    <span class="keyword">return</span> createOrder(stock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试，先请求获取 md5 接口使 Redis 存在该
md5，在过期时间内请求新的秒杀接口，不同于前，需要加上用户 id 和 md5
用以验证</p>
<p>正确结果如下，若不先请求 md5，则无法利用 Redis 验证导致失败，错误的
md5 同样 失败</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.2zitzg4v5ri0.png"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<h1 id="用户限制">用户限制</h1>
<p>限制用户访问频率</p>
<p>利用 Redis 超时时间和 incr 操作限制访问频率</p>
<p>UserService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">saveUserView</span><span class="params">(Integer uid)</span> &#123;</span><br><span class="line">        <span class="comment">// 根据用户id生成调用次数key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">limitKey</span> <span class="operator">=</span> <span class="string">&quot;LIMIT&quot;</span> + <span class="string">&quot;_&quot;</span> + uid;</span><br><span class="line">        <span class="comment">// 获取Redis指定key的调用次数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">limitNum</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(limitKey);</span><br><span class="line">        <span class="type">long</span> <span class="variable">limit</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (limitNum == <span class="literal">null</span>) &#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(limitKey, <span class="string">&quot;0&quot;</span>, <span class="number">3600</span>, TimeUnit.SECONDS);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            limit = stringRedisTemplate.opsForValue().increment(limitKey);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> limit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">getUserView</span><span class="params">(Integer uid)</span> &#123;</span><br><span class="line">        <span class="comment">// 根据用户id生成调用次数key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">limitKey</span> <span class="operator">=</span> <span class="string">&quot;LIMIT&quot;</span> + <span class="string">&quot;_&quot;</span> + uid;</span><br><span class="line">        <span class="comment">// 获取Redis指定key的调用次数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">limitNum</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(limitKey);</span><br><span class="line">        <span class="keyword">if</span> (limitNum == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 为空直接抛弃说明key异常</span></span><br><span class="line">            log.error(<span class="string">&quot;该用户没用申请验证值记录，疑似异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(limitNum) &lt;= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;killtokenmd5limit&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">killtokenmd5limit</span><span class="params">(Integer sid, Integer uid, String md5)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!rateLimiter.tryAcquire(<span class="number">2</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前请求被限流，直接抛弃，无法调用后续秒杀逻辑...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;抢购失败&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试验证用户 暂时注释</span></span><br><span class="line">    <span class="comment">// if (!stringRedisTemplate.hasKey(Constants.REDIS_STOCK_KILL + sid)) &#123;</span></span><br><span class="line">    <span class="comment">//     System.out.println(&quot;秒杀活动已结束...&quot;);</span></span><br><span class="line">    <span class="comment">//     return &quot;秒杀活动已结束&quot;;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (stockSoldOutMap.get(sid) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;商品已售完&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">increment</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().decrement(Constants.REDIS_STOCK_LAST + sid);</span><br><span class="line">    <span class="keyword">if</span> (increment &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        stockSoldOutMap.put(sid, <span class="literal">true</span>);</span><br><span class="line">        stringRedisTemplate.opsForValue().increment(Constants.REDIS_STOCK_LAST + sid);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;商品已售完&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;秒杀商品id = &quot;</span> + sid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 加入用户访问频率限制</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">view</span> <span class="operator">=</span> userService.saveUserView(uid);</span><br><span class="line">        log.info(<span class="string">&quot;用户已访问次数:[&#123;&#125;]&quot;</span>, view);</span><br><span class="line">        <span class="type">boolean</span> isAllowed= userService.getUserView(uid);</span><br><span class="line">        <span class="keyword">if</span> (!isAllowed) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;购买失败，超过访问频率！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;购买失败，超过访问频率！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 秒杀业务</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">orderId</span> <span class="operator">=</span> orderService.killtokenmd5(sid, uid, md5);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;秒杀成功，订单id为：&quot;</span> + orderId;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().increment(Constants.REDIS_STOCK_LAST + sid);</span><br><span class="line">        <span class="keyword">if</span> (stockSoldOutMap.get(sid) != <span class="literal">null</span>) &#123;</span><br><span class="line">            stockSoldOutMap.remove(sid);</span><br><span class="line">        &#125;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> e.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试，依然先获取md5，在用 JMeter
测试，接口及参数<code>/stock/killtokenmd5limit?sid=1&amp;uid=1&amp;md5=6f2c1a31e4b297c4f85c166c09009ec6</code>访问
20
次结果如下，因为限制10次，所以10次后被限制，也就是限制为10/（h*u）单用户每小时限制访问10次</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/cloud-picture/image.6qhcbkswl300.png"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<h1 id="总结">总结</h1>
<p>这仅仅是一个小demo，还有好多要学习</p>
<p>继续努力吧</p>
]]></content>
      <tags>
        <tag>Spring Boot</tag>
        <tag>MySQL</tag>
        <tag>Mybatis/Mybatis-plus</tag>
        <tag>Redis</tag>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>线性表</title>
    <url>/article/40f24371.html</url>
    <content><![CDATA[<h1 id="定义">定义</h1>
<p>顾名思义，线性表中的数据是线性排列的，是包括零个或多个数据元素的有限序列。</p>
<span id="more"></span>
<h1 id="线性表的抽象数据类型">线性表的抽象数据类型</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ADT 线性表(List)</span><br><span class="line">Data</span><br><span class="line">    线性表的数据对象集合为&#123;a1,a2,....,an&#125;,每个元素的类型均为DataType。其中，除了第一个元素a1外，每一个元素有且只有一个直接前驱元素，除最后一个元素an外，每一个元素有且只有一个直接后继元素。数据元素之间的关系是一对一的关系。</span><br><span class="line"></span><br><span class="line"><span class="function">Operation</span></span><br><span class="line"><span class="function">    <span class="title">InitList</span><span class="params">(*L)</span>:初始化操作，建立一个空的线性表。</span></span><br><span class="line"><span class="function">    ListEmpty(L):若线性表为空，返回true，否则返回false。</span></span><br><span class="line"><span class="function">    ClearList(*L):线性表清空。</span></span><br><span class="line"><span class="function">    GetElem(L,i,*e):将线性表L中第i个位置元素返回给e。</span></span><br><span class="line"><span class="function">    LocateElem(L,e):在线性表L中查找与给定值e相等的元素，如果查找成功,返回该元素在表中的序列号；否则，返回<span class="number">0</span>表示失败。</span></span><br><span class="line"><span class="function">    ListInsert(*L,i,e):在线性表的第i个位置插入元素e。</span></span><br><span class="line"><span class="function">    ListDelete(*L,i,*e):删除线性表L中的第i个元素，并用e返回其值</span></span><br><span class="line"><span class="function">    ListLength(L):返回线性表L的元素个数。</span></span><br><span class="line"><span class="function">    PrintList(L):打印线性表</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">对于不同的应用，线性表的基本操作是不同的，上述操作是最基本的。</span></span><br><span class="line"><span class="function">对于实际问题中涉及的关于线性表的更复杂操作，完全可以用这些基本操作的组合来实现。</span></span><br></pre></td></tr></table></figure>
<h1 id="线性表的顺序存储结构">线性表的顺序存储结构</h1>
<p>线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素。</p>
<h1 id="定义-1">定义</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">define</span>  MAXSIZE   50  <span class="comment">/*存储空间初始分配量*/</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;   <span class="comment">/*ElemType类型根据实际情况而定*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    ElemType* data;     <span class="comment">/*存储空间基地址*/</span></span><br><span class="line">    <span class="type">int</span> length;         <span class="comment">/*线性表当前长度*/</span></span><br><span class="line">&#125;SqList;</span><br></pre></td></tr></table></figure>
<h1 id="元素获取">元素获取</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetElem</span><span class="params">(SqList L, <span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L.length == <span class="number">0</span> || i&lt;<span class="number">1</span> || i&gt;L.length)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;位置信息有误！&quot;</span> &lt;&lt; endl;   <span class="comment">/*位置不合法，返回-1*/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> L.data[i - <span class="number">1</span>];       <span class="comment">/*返回位置i的值*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="元素插入">元素插入</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InsertElem</span><span class="params">(SqList&amp; L, <span class="type">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L.length == MAXSIZE)</span><br><span class="line">        <span class="keyword">return</span>;         <span class="comment">/*空间已满*/</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L.length + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span>;     <span class="comment">/*位置不合法*/</span></span><br><span class="line">        elseyici</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/*从最后元素到第i个元素依次后移一位*/</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = L.length - <span class="number">1</span>; j &gt;= i - <span class="number">1</span>; j--)</span><br><span class="line">                L.data[j + <span class="number">1</span>] = L.data[j];</span><br><span class="line">            L.data[i - <span class="number">1</span>] = e;  <span class="comment">/*第i的位置为值e*/</span></span><br><span class="line">            L.length++;         <span class="comment">/*长度加一*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="元素删除">元素删除</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">DeleteElem</span><span class="params">(SqList&amp; L, <span class="type">int</span> i, ElemType&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;         <span class="comment">/*空表没有删除操作*/</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L.length)</span><br><span class="line">            <span class="keyword">return</span>;     <span class="comment">/*位置不合法*/</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            e = L.data[i - <span class="number">1</span>];  <span class="comment">/*删除元素存入e*/</span></span><br><span class="line">            <span class="comment">/*从第i+1元素到最后元素依次前移一位*/</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; L.length; j++)</span><br><span class="line">                L.data[j - <span class="number">1</span>] = L.data[j];</span><br><span class="line">            L.length--;     <span class="comment">/*长度减一*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="优缺点">优缺点</h1>
<p>优点：</p>
<ul>
<li>无需为表示表中元素之间的逻辑关系而增加额外的存储空间<br />
</li>
<li>可以快速地存取表中任意位置元素</li>
</ul>
<p>缺点：</p>
<ul>
<li>插入和删除操作需要移动大量元素</li>
<li>当线性表长度变化较大时，难以确定存储空间的容量</li>
<li>造成存储空间的“碎片”</li>
</ul>
<h1 id="线性表的链式存储结构">线性表的链式存储结构</h1>
<p>线性表中元素不再是相邻排列，而是由“链”连接成。</p>
<h1 id="头指针与头结点的异同">头指针与头结点的异同</h1>
<p>头指针： *
头指针是指链表指向的第一个结点的指针，若链表有头结点，则是指向头结点的指针
* 头指针具有标识作用，所有常用头指针冠以链表的名字 *
无论链表是否为空，头指针均不为空。头指针是链表的必要元素</p>
<p>头结点： *
头结点是为了操作的统一和方便而设计的，放在第一元素的结点之前，其数据域一般无意义（也存放链表的长度）
*
有了头结点，对在第一元素结点前插入结点和删除第一结点，其操作与其他结点的操作就统一了
* 头结点不一定是链式必须要素</p>
<h1 id="定义-2">定义</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span></span><br><span class="line">&#123;</span><br><span class="line">    ElemType   data;       <span class="comment">/*数据域*/</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span>* next;   <span class="comment">/*指针域*/</span></span><br><span class="line">&#125; LNode, * LinkList;          <span class="comment">/*LinkList为LNode类型的指针*/</span></span><br></pre></td></tr></table></figure>
<h1 id="元素获取-1">元素获取</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">GetElem</span><span class="params">(LinkList L, <span class="type">int</span> i, ElemType&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//当第i个元素存在时，其值赋给e</span></span><br><span class="line">    LinkList p = L-&gt;next;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">1</span>; <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; j &lt; i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//向后扫描，直到p指向第i个元素或p为空</span></span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!p || j &gt; i) </span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;个结点不存在\n&quot;</span>; <span class="comment">//第i个元素不存在</span></span><br><span class="line">        e = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        e = p-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="元素插入-1">元素插入</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ListInsert</span><span class="params">(LinkList&amp; L, <span class="type">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList p, s;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line">    p = L;</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; j &lt; i)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;    <span class="comment">//寻找第i−1个结点</span></span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!p || j &gt; i) cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;个结点不存在&quot;</span> &lt;&lt; endl;	<span class="comment">//i大于表长 + 1或者小于1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        s = <span class="keyword">new</span> LNode;                    <span class="comment">//生成新结点*s</span></span><br><span class="line">        s-&gt;data = e;      		          <span class="comment">//将结点*s的数据域置为e</span></span><br><span class="line">        s-&gt;next = p-&gt;next;	   	          <span class="comment">//将结点*s插入L中</span></span><br><span class="line">        p-&gt;next = s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="元素删除-1">元素删除</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ListDelete</span><span class="params">(LinkList&amp; L, <span class="type">int</span> i, ElemType&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList p, q;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line">    p = L;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next &amp;&amp; j &lt; i) <span class="comment">//寻找第i个结点，并令p指向其前驱</span></span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(p-&gt;next) || j &gt; i) cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;个结点不存在&quot;</span> &lt;&lt; endl; <span class="comment">//删除位置不合理</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        q = p-&gt;next; <span class="comment">//临时保存被删结点的地址以备释放</span></span><br><span class="line">        p-&gt;next = q-&gt;next; 	<span class="comment">//改变删除结点前驱结点的指针域</span></span><br><span class="line">        <span class="keyword">delete</span> q;<span class="comment">//释放结点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="单链表创建">单链表创建</h1>
<p>头插法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateList_H</span><span class="params">(LinkList&amp; L, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList p;</span><br><span class="line">    L = <span class="keyword">new</span> LNode;</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>; <span class="comment">//先建立一个带头结点的单链表</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;输入&quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot;个新值：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p = <span class="keyword">new</span> LNode;<span class="comment">//生成新结点</span></span><br><span class="line">        cin &gt;&gt; p-&gt;data;</span><br><span class="line">        p-&gt;next = L-&gt;next;</span><br><span class="line">        L-&gt;next = p; <span class="comment">//插入到表头</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>尾插法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateList_T</span><span class="params">(LinkList&amp; L, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//正位序输入n个元素的值，建立带表头结点的单链表L</span></span><br><span class="line">    LinkList p, r;</span><br><span class="line">    L = <span class="keyword">new</span> LNode;</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    r = L; <span class="comment">//尾指针r指向头结点</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;输入&quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot;个新值：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p = <span class="keyword">new</span> LNode; <span class="comment">//生成新结点</span></span><br><span class="line">        cin &gt;&gt; p-&gt;data;</span><br><span class="line">        p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        r-&gt;next = p; <span class="comment">//插入到表尾</span></span><br><span class="line">        r = p; <span class="comment">//r指向新的尾结点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="单链表整表删除">单链表整表删除</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ClearList</span><span class="params">(LinkList&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 将L重置为空表</span></span><br><span class="line">    LinkList p, q;</span><br><span class="line">    p = L-&gt;next;   <span class="comment">//p指向第一个结点</span></span><br><span class="line">    <span class="keyword">while</span> (p)       <span class="comment">//没到表尾</span></span><br><span class="line">    &#123;</span><br><span class="line">        q = p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        p = q;</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;   <span class="comment">//头结点指针域为空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="静态链表">静态链表</h1>
<p><a href="http://data.biancheng.net/view/163.html">引用</a></p>
<h1 id="循环链表">循环链表</h1>
<p><a href="http://data.biancheng.net/view/7.html">引用</a></p>
<h1 id="双向链表">双向链表</h1>
<p><a href="http://data.biancheng.net/view/166.html">引用</a></p>
<h1
id="单链表结构与顺序存储结构优缺点">单链表结构与顺序存储结构优缺点</h1>
<table>
<colgroup>
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
</colgroup>
<thead>
<tr class="header">
<th>存储结构</th>
<th>顺序表</th>
<th>链表</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>存储空间</td>
<td>预先分配，会导致空间闲置或溢出现象</td>
<td>动态分配，不会出现存储空间闲置或溢出现象</td>
<td></td>
</tr>
<tr class="even">
<td>存储密度</td>
<td>不用为表示结点间的逻辑关系而增加额外的存储开销，存储密度等于1</td>
<td>需要借助指针来体现元素间的逻辑关系，存储密度小于1</td>
<td></td>
</tr>
<tr class="odd">
<td>存取元素</td>
<td>随机存取，按位置访问元素的时间复杂度为O(1)</td>
<td>顺序存取， 按位置访问元素时间复杂度为O(n)</td>
<td></td>
</tr>
<tr class="even">
<td>插入、删除</td>
<td>平均移动约表中一半元素， 时间复杂度为O(n)</td>
<td>不需移动元素， 确定插入.删除位置后，时间复杂度为0(1)</td>
<td></td>
</tr>
<tr class="odd">
<td>使用情况</td>
<td>①表长变化不大，且能事先确定变化的范围②很少进行插入或删除操作，经常按元素位置序号访问数据元素</td>
<td>①长度变化较大②频繁进行插人或删除操作</td>
<td></td>
</tr>
</tbody>
</table>
<p>---参考《大话数据结构》</p>
<p><a
href="https://blog.csdn.net/baidu_39630193/article/details/76526691?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase">详细</a></p>
]]></content>
      <tags>
        <tag>数据结构&amp;算法</tag>
      </tags>
  </entry>
  <entry>
    <title>规矩</title>
    <url>/article/1e97111a.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p>俗话说的好，没有规矩不成方圆。随着一个人的成长，就会发现，规矩的制约性越来越强大。现在我也是深有体会啊！</p>
<span id="more"></span>
<h1 id="守规矩的人最受欺负">守规矩的人最受欺负</h1>
<p>这是B站上的一个视频，说的是“守规矩的人最受欺负”。本来这个不是我所计划讨论的范围，但是看了视频还是很有感悟的，下面直接贴上视频。</p>
<iframe src="//player.bilibili.com/player.html?aid=513157465&amp;bvid=BV173411c754&amp;cid=767193987&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true">
</iframe>
<p>看完视频，我相信会有一大批人会感同身受的。其实我觉得这更像是一个过程，怎么说？最开始的时候，我们被教育遵守规矩，我们天真无邪，都非常乐意去遵守规矩，做个好孩子，但是却总总有不守规矩的人，我们无可奈何且往往并不会因为安分守矩被优待，长此以往，守规矩好像就是个“傻子”。一旦我们尝试打破规矩，不再有那样的心理障碍，规矩确实不再是那么不可侵犯了，我们也就变成了早前自己眼中不守规矩的人了。</p>
<h1 id="人类社会是需要规矩的">人类社会是需要规矩的</h1>
<p>前面的都是我临时外加的，我更想说的是，随着成长，所有人都应当认识到世界是需要规矩的制约的。</p>
<p>天真浪漫的童年是你我都回不去的美好时光，童年的美好就在无拘无束上，什么都不用想，什么都可以想。渐渐的，我们受到家里、学校的制约，我们要怎样怎样，不能怎样怎样，有着一堆规矩要我们遵守。离开学校进入社会后更是这样，规矩越来越多。交通有交规，法律有法规，公司也是一堆繁琐的规定。。。</p>
<p>人都被大大小小的规矩给框起来了，然而，要知道人类社会延续发展就是需要这些规矩的。</p>
<h1 id="结">结</h1>
<p>又是一篇写到一半不知道怎么写，甚至不知道我写的意义在哪，是不是全部删掉当没写过，😂</p>
<p>就此吧，之后每开始一篇新的，一定要做个完美的规划，想到什么就在当时记录下来，省的写的时候全忘了🤡</p>
]]></content>
      <tags>
        <tag>思考</tag>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>职业教育什么时候能被接受？</title>
    <url>/article/d89980ea.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p>提到职业教育，不知道你的第一想法是什么？</p>
<p>反正总会有这样那样😏😊😒🤔😖😑😯😔😭😮‍💨🥶🤧🤭🤓，不同的反应，不同的想法</p>
<p>职业教育好像天生就在高等教育之下，不受人重视，不被人接受。他们好像天生就被人抛弃，是没有未来的！？</p>
<p>我也一直好奇，为什么啊？凭什么啊？</p>
<iframe src="//player.bilibili.com/player.html?aid=638375544&amp;bvid=BV1dY4y1a7H7&amp;cid=584483124&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true">
</iframe>
<p>上面的视频是我定下这篇文章后，在新华社-央视新闻中看到的，恰巧与我这篇文章不谋而合。</p>
<span id="more"></span>
<h1 id="正题">正题</h1>
<p>据我了解，在德国，职业教育已经发展的非常成熟。他们的职业教育和普通高中、大学一样是教育行业的重要组成部分。而且接受职业教育并且选择职业教育的人数很多，对于他们而言，职业教育和普通高等教育没有什么区别，都是接受教育，为社会输送人才。</p>
<p>当然，我们如今的发展现状是无法直接与这样的发达国家做对比。他们有着成熟且发达的教育体系，完整的社会保障机制，更重要的是经济发达，可从事的更多是高级劳动。他们已经完成了劳动力的转换，低级劳动逐渐被机器取代，更多的是高级人才需求，服务业需求等等。如今的我们，也是需要高级人才的，但是这方面的缺口比例与低级劳动还是呈现很大的差别的。说的简单点，中国如今还未能完成劳动力的升级，还有很长的路要走。我也相信在不远的将来，中国也会成为那样——从事低级劳动的人越来越少，人们的生活过的越来越幸福。这是需要我们一起不懈努力的。</p>
<p>既然这是历史发展的必然趋势，我为什么还要完成这篇文章呢？</p>
<p>因为我怕啊！我怕现在人都被教育的追求高级人才，不肯接受如今的现实并不能支撑得起那么多的“高级人才”。所以才有现在的内卷，需要的就那么多，自然多出来的就是没必要的，就要被淘汰。另外，职业教育从出现开始就被贴上标签，现在尤其严重。标签不可怕，可怕的是被标签化。看看现在职位JD，总会有亮眼的211/985，所有大学生都逃不脱那个标签，那个标签会伴随他一生。更可怕的是我见到越来越多的人（包括我），喜欢以双非、四非、二本、三本、职教自黑，也渐渐接受别人给予自己的标签。我多么希望，什么时候大家能舍弃这些标签，抛弃偏见，接受所有努力的人啊。</p>
<h1 id="总结">总结</h1>
<p>当中国全体开始接受职业教育的时候就是中国进入新时代的时候。</p>
]]></content>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>解决PicGo+GitHub搭建个人图床上传失败问题</title>
    <url>/article/60f304a0.html</url>
    <content><![CDATA[<p>为了解决写个人博客，图片的问题，花费了大概一整天，在网上搜各种方法，但过程不是那么顺利，终于最后有了一个比较完美的解决方案，在这里做个分享！</p>
<span id="more"></span>
<h1 id="过程可跳过直接看解决">过程（可跳过直接看解决）</h1>
<p>最开始在这里<a
href="https://blog.csdn.net/Cassie_zkq/article/details/79968598">利用github分享图片</a>，但结果不太行，然后查资料有人解答需要修改host文件的，感觉按那样做挺麻烦的，尤其不想在电脑内乱搞（不懂嘛，怕出问题），于是放弃这种方法。</p>
<p>再然后看到许多人用云（阿里云，腾讯云...）存图片分享，没有找到一个相对简单的方法，而且这些云更商业化一些，好像不适合我这种只是存放图片写博客的人，个别还要收费，那算了，换。</p>
<p>终于发现了<a
href="https://blog.csdn.net/yefcion/article/details/88412025">PicGo +
GitHub
搭建个人图床工具</a>，先收藏了（太晚了当时）。第二天，照着这篇博客几乎把所有内容配置好了，心想终于成了！还没来及高兴，噩梦来了</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/PicGo.png"
alt="失败，失败，还是失败" />
<figcaption aria-hidden="true">失败，失败，还是失败</figcaption>
</figure>
<p>不知什么原因，总是上传失败，人都要疯了，之后又找到<a
href="https://blog.csdn.net/TalesOV/article/details/104450037?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-5.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-5.channel_param">PicGo踩坑记（上传失败，服务端出错，请重试）</a>，检查完所有问题，依然上传失败，直到那天下午，忽然有了灵感，那就试它一试。</p>
<h1 id="最终解决">最终解决</h1>
<p>不就是上传问题嘛！直接用GitHub上传啊</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/Upload.png"
alt="Upload files.png" />
<figcaption aria-hidden="true">Upload files.png</figcaption>
</figure>
<p>当时上传只成功了一张照片，就是这张照片让我看到了希望</p>
<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/PicGoGitHub.png"
alt="Upload files.png" />
<figcaption aria-hidden="true">Upload files.png</figcaption>
</figure>
<p>记得当时自己设置的自定义域名吧，那么你上传在GitHub的图片分享地址就是</p>
<p>自定义域名（通常是https://......@master）+/图片.格式(通常是png，jpg...)</p>
<p>成功！当时我是开心极了。</p>
]]></content>
      <tags>
        <tag>Git/GitHub/Gitee</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>计算连续范围内奇/偶数个数</title>
    <url>/article/c1ef7922.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p>这篇就讨论一个问题，“计算连续范围内奇/偶数个数”，很简单，就是给定一个范围[a,b]，计算出这个范围内的奇数、偶数个数</p>
<p>如：[1,18]</p>
<p>这个范围奇数9个，偶数9个，问题很简单</p>
<span id="more"></span>
<h1 id="说明">说明</h1>
<p>其实这个我毕设的一个计算需要，其实是根据周次和单双周计算有多少周，下面列个表</p>
<table>
<thead>
<tr class="header">
<th></th>
<th>单双周</th>
<th>单周</th>
<th>双周</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1-18</td>
<td>18</td>
<td>9</td>
<td>9</td>
</tr>
<tr class="even">
<td>1-17</td>
<td>17</td>
<td>9</td>
<td>8</td>
</tr>
<tr class="odd">
<td>2-18</td>
<td>17</td>
<td>8</td>
<td>9</td>
</tr>
<tr class="even">
<td>2-17</td>
<td>16</td>
<td>8</td>
<td>8</td>
</tr>
</tbody>
</table>
<p>上面的例子包含了所有情况，即对于范围[a,b]</p>
<p>分别代表了</p>
<ul>
<li>奇数-偶数</li>
<li>奇数-奇数</li>
<li>偶数-偶数</li>
<li>偶数-奇数</li>
</ul>
<p>先说最容易的，单双周计算最简便b-a+1</p>
<p>单周或是双周计算方式最随着a,b的不同而不同</p>
<p>当然有人会说了，这一个遍历不就完事了，但是我绝不可能那么做的，这很明显是有数学关系的，之前刷题也见过不少是数学关系的，可以直接找到其中关系，计算出来的</p>
<p>再次分析上面的表格</p>
<table>
<thead>
<tr class="header">
<th></th>
<th>单双周（y=b-a+1）</th>
<th>单周</th>
<th>双周</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1-18</td>
<td>18</td>
<td>9（y/2）</td>
<td>9（y/2）</td>
</tr>
<tr class="even">
<td>1-17</td>
<td>17</td>
<td>9（y/2+1）</td>
<td>8（y/2）</td>
</tr>
<tr class="odd">
<td>2-18</td>
<td>17</td>
<td>8（y/2）</td>
<td>9（y/2+1）</td>
</tr>
<tr class="even">
<td>2-17</td>
<td>16</td>
<td>8（y/2）</td>
<td>8（y/2）</td>
</tr>
</tbody>
</table>
<p>看出了吗？</p>
<p>其中肯定有数学关系的，这里把a、b用奇1，偶0来表示</p>
<table>
<thead>
<tr class="header">
<th></th>
<th>单双周（y=b-a+1）</th>
<th>单周</th>
<th>双周</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1-18（1-0）</td>
<td>18</td>
<td>9（y/2）</td>
<td>9（y/2）</td>
</tr>
<tr class="even">
<td>1-17（1-1）</td>
<td>17</td>
<td>9（y/2+1）</td>
<td>8（y/2）</td>
</tr>
<tr class="odd">
<td>2-18（0-0）</td>
<td>17</td>
<td>8（y/2）</td>
<td>9（y/2+1）</td>
</tr>
<tr class="even">
<td>2-17（0-1）</td>
<td>16</td>
<td>8（y/2）</td>
<td>8（y/2）</td>
</tr>
</tbody>
</table>
<p>这样就很明显了</p>
<ul>
<li>单周，1-1情况下+1</li>
<li>双周，0-0情况下+1</li>
</ul>
<p>转换一下就是</p>
<ul>
<li>单周，a、b与运算为1，可以+1</li>
<li>双周，a、b或运算为0，可以+1</li>
</ul>
<p>这里单双周0，单周1，双周2，那么伪代码就如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compute</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> singleOrDouble)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(singleOrDouble==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> b - a + <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(singleOrDouble == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(((a &amp; b) &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">            b++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (b - a + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(singleOrDouble == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(((a | b) &amp; <span class="number">1</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">            b++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (b - a + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这其中利用了位运算，非常有趣</p>
<p>当然还有很多地方可以可以用这种解决方法，LeetCode上也有很多类似的</p>
<h1 id="总结">总结</h1>
<p>很多时候探索的过程是最珍贵的</p>
]]></content>
      <tags>
        <tag>数据结构&amp;算法</tag>
      </tags>
  </entry>
  <entry>
    <title>记住，那也是你生活的一部分</title>
    <url>/article/74020674.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p>最近刷到一个视频，链接如下</p>
<p><a
href="https://www.bilibili.com/video/BV1si4y117Fy">我想让每个人都看的视频啊啊啊啊啊啊！_哔哩哔哩_bilibili</a></p>
<iframe src="//player.bilibili.com/player.html?aid=552045088&amp;bvid=BV1si4y117Fy&amp;cid=541906595&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true">
</iframe>
<p>看完确实有所感触、收获，非常推荐看一下😁</p>
<p>我的总结如题，“记住，那也是你生活的一部分”</p>
<p>就是说，我们在生活中经常性的有——“过完这段时间我就xxx了”的想法</p>
<p>如过完最后一周，考完试，就轻松了</p>
<p>过完高中，上了大学，就自由了</p>
<p>往往产生这样的想法，都是对当下生活的不满，心中有种渴求赶快过完这段时间的，也就因此对于这段时间我们不珍视，甚至觉得这段时间不是自己想经历的，它不属于自己。但是清醒一下啊，这就是你的生活啊！！！</p>
]]></content>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-行为模式-策略模式</title>
    <url>/article/4eb55b31.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p>在策略模式（Strategy
Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。</p>
<p>在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的
context 对象。策略对象改变 context 对象的执行算法。</p>
<p>好吧，不抄了，上链接，https://www.runoob.com/design-pattern/strategy-pattern.html</p>
<p>1。。。2。。。3。。。</p>
<p>哈哈哈哈哈</p>
<p>策略模式虽说是替换了<code>ifelse</code>，但看上去更复杂了呀？</p>
<p>不是说工程就得复杂，而是说工程就得考虑的长远，好维护，好扩展😁</p>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>编译原理-语法分析实验</title>
    <url>/article/b49b1500.html</url>
    <content><![CDATA[<p>从来没有写过关于课程内容的博客，这算是第一次吧</p>
<p>今天刚做了编译原理语法分析实验，感觉还挺有趣的写一写记录一下</p>
<h1 id="参考">参考</h1>
<p>主要还是课堂内容，书本知识</p>
<p><a
href="https://zheng.blog.csdn.net/article/details/89857531?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-5.baidujs&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-5.baidujs">编译原理
—— 递归下降分析法</a></p>
<span id="more"></span>
<h1 id="实验内容">实验内容</h1>
<p>实验指导书就不整个贴了，下面是实验内容</p>
<p>1、对算术表达式文法：</p>
<p>E→TE'</p>
<p>E'→+TE'| -TE' |ε</p>
<p>T→FT'</p>
<p>T'→*FT'| /FT' |ε</p>
<p>F→(E) | id |num</p>
<p>构造其递归下降分析程序。</p>
<p>2、实验步骤</p>
<p>（1）求出每个非终结符的FIRST和FOLLOW集（在练习本上求出即可，不要求程序实现）；</p>
<p>（2）构造递归下降分析程序；</p>
<p>（3）验证结果。</p>
<h1 id="代码">代码</h1>
<p>关于编译原理的知识我也不补充了，刚学我还没搞明白呢</p>
<p>废话不多数直接上代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.year21h1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wnhyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2021-04-16 09:55</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ex2</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 算术表达式文法</span></span><br><span class="line"><span class="comment">     * E→TE&#x27;</span></span><br><span class="line"><span class="comment">     * E&#x27;→+TE&#x27;| -TE&#x27; |ε</span></span><br><span class="line"><span class="comment">     * T→FT&#x27;</span></span><br><span class="line"><span class="comment">     * T&#x27;→*FT&#x27;| /FT&#x27; |ε</span></span><br><span class="line"><span class="comment">     * F→(E) | id |num</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> String s;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        s = sc.next();</span><br><span class="line">        E();</span><br><span class="line">        System.out.println(sb);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">E</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        sb.append(<span class="string">&quot;E-&gt;TE&#x27;\t&quot;</span>);</span><br><span class="line">        T();</span><br><span class="line">        Ep();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Ep</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (!end() &amp;&amp; (sym() == <span class="string">&#x27;+&#x27;</span> || sym() == <span class="string">&#x27;-&#x27;</span>)) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;E&#x27;-&gt;&quot;</span>).append(sym()).append(<span class="string">&quot;TE&#x27;\t&quot;</span>);</span><br><span class="line">            index++;</span><br><span class="line">            T();</span><br><span class="line">            Ep();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;E&#x27;-&gt;ε\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">T</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        sb.append(<span class="string">&quot;T-&gt;FT&#x27;\t&quot;</span>);</span><br><span class="line">        F();</span><br><span class="line">        Tp();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Tp</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (!end() &amp;&amp; (sym() == <span class="string">&#x27;*&#x27;</span> || sym() == <span class="string">&#x27;/&#x27;</span>)) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;T&#x27;-&gt;&quot;</span>).append(sym()).append(<span class="string">&quot;FT&#x27;\t&quot;</span>);</span><br><span class="line">            index++;</span><br><span class="line">            F();</span><br><span class="line">            Tp();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;T&#x27;-&gt;ε\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">F</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (!end()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sym() == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                sb.append(<span class="string">&quot;F-&gt;(E)\t&quot;</span>);</span><br><span class="line">                index++;</span><br><span class="line">                E();</span><br><span class="line">                <span class="keyword">if</span> (sym() == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    index++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sym() == <span class="string">&#x27;i&#x27;</span>) &#123;</span><br><span class="line">                index++;</span><br><span class="line">                <span class="keyword">if</span> (sym() == <span class="string">&#x27;d&#x27;</span>) &#123;</span><br><span class="line">                    sb.append(<span class="string">&quot;F-&gt;id\t&quot;</span>);</span><br><span class="line">                    index++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sym() == <span class="string">&#x27;n&#x27;</span>) &#123;</span><br><span class="line">                index++;</span><br><span class="line">                <span class="keyword">if</span> (sym() == <span class="string">&#x27;u&#x27;</span>) &#123;</span><br><span class="line">                    index++;</span><br><span class="line">                    <span class="keyword">if</span> (sym() == <span class="string">&#x27;m&#x27;</span>) &#123;</span><br><span class="line">                        sb.append(<span class="string">&quot;F-&gt;num\t&quot;</span>);</span><br><span class="line">                        index++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下标合法，当前下标字符，否则异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  当前字符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">sym</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= s.length()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.charAt(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否到达串尾</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">end</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> index == s.length();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输入：</p>
<blockquote>
<p>(id+num)*num/(num-id)</p>
</blockquote>
<p>输出：</p>
<blockquote>
<p>E-&gt;TE' T-&gt;FT' F-&gt;(E) E-&gt;TE' T-&gt;FT' F-&gt;id T'-&gt;ε
E'-&gt;+TE' T-&gt;FT' F-&gt;num T'-&gt;ε E'-&gt;ε T'-&gt;*FT' F-&gt;num
T'-&gt;/FT' F-&gt;(E) E-&gt;TE' T-&gt;FT' F-&gt;num T'-&gt;ε E'-&gt;-TE'
T-&gt;FT' F-&gt;id T'-&gt;ε E'-&gt;ε T'-&gt;ε E'-&gt;ε</p>
</blockquote>
<p>本程序能输出输入串的构造过程（当然必须是合法可构造的），如果递归构造失败则会抛出异常</p>
<p>上面程序只看代码再结合给定的算术表达式就比较容易看懂了，但其实自己动手做不是那么容易，首先要理清其逻辑关系，然后写代码，这时往往总会会忽略一些细节，需要自己调试，直到自己满意</p>
<h1 id="总结">总结</h1>
<p>能在繁忙或是说无聊的生活中找到自己喜欢并能投入进去的事实在是太幸福了</p>
]]></content>
      <tags>
        <tag>JavaSE</tag>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-行为模式-模板模式</title>
    <url>/article/2958ee2b.html</url>
    <content><![CDATA[<h1 id="提要">提要</h1>
<p>前几天做项目时，遇到一个类设计的问题，请教同事后，参考已有代码完成我需要的设计，这时回想设计模式，终于能体会它的意义了😁</p>
<span id="more"></span>
<h1 id="问题">问题</h1>
<p>简单描述问题就是：</p>
<p>我希望有一个从Redis取特定String缓存的工具，可以依据不同参数做不同取缓存操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pattern</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStringById</span><span class="params">(String keyPrefix, Long id)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">            </span><br><span class="line">        A</span><br><span class="line">            </span><br><span class="line">		...</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getStringByIdWithRedisLock</span><span class="params">(String keyPrefix, Long id)</span>&#123;</span><br><span class="line">		...</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        B   </span><br><span class="line">            </span><br><span class="line">		...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>整体模板就是这样，现在问题是，在调用<code>private</code>时B部分代码会依据参数不同走不同的调用，也就是我需要一种能利用这个模板，仅仅暴露出<code>public</code>方法便可完成调用</p>
<p>可以想一想自己会怎么做？</p>
<h1 id="解决">解决</h1>
<p>有想法了吗？</p>
<p>最简单最容易想到的就是设计接口，不同实现，构造器传入这样的</p>
<p>废话不多说上代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RedisService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过id获取string，流程：redis-db</span></span><br><span class="line"><span class="comment">     * 使用包括，通过id获取username，通过id获取title，通过id获取categoryName，通过id获取feedbackTypeName。。。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyPrefix</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">getStringById</span><span class="params">(String keyPrefix, Long id)</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getStringByIdFromDB</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>设计接口，其实也不是很必要，直接设计抽象类也可以</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractRedisService</span> <span class="keyword">implements</span> <span class="title class_">RedisService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStringById</span><span class="params">(String keyPrefix, Long id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(keyPrefix + id);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(value)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;缓存未命中。。。将要查询数据库。。。&quot;</span>);</span><br><span class="line">            value = getStringByIdWithRedisLock(keyPrefix, id);</span><br><span class="line">            stringRedisTemplate.opsForValue().set(keyPrefix + id, value, RedisKeyConstants.DEFAULT_TTL, TimeUnit.SECONDS);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;缓存命中。。。直接读取。。。&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getStringByIdWithRedisLock</span><span class="params">(String keyPrefix, Long id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> stringRedisTemplate.opsForValue()</span><br><span class="line">                .setIfAbsent(RedisLockUtils.LOCK + key, uuid, RedisLockUtils.EXPIRE, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(lock) &amp;&amp; lock) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;获取分布式锁成功。。。&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                value = <span class="built_in">this</span>.getStringByIdFromDB(id);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;查询数据库失败&quot;</span>, e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                stringRedisTemplate.execute(<span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;(RedisLockUtils.UNLOCK_LUA, Boolean.class)</span><br><span class="line">                        , Collections.singletonList(RedisLockUtils.LOCK + key), uuid);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;获取分布式锁失败。。。等待重试。。。&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(RedisLockUtils.RETRY_TIME);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> getStringByIdWithRedisLock(keyPrefix, id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getStringByIdFromDB</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的已经很清晰了自己看就能明白</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRedisService</span> <span class="keyword">extends</span> <span class="title class_">AbstractRedisService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStringByIdFromDB</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(RedisKeyConstants.USER_NAME + id);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(userName)) &#123;</span><br><span class="line">            <span class="keyword">return</span> userName;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;查询了数据库。。。&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectByPrimaryKey(id);</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(RedisKeyConstants.USER_NAME + id, user.getUserName()</span><br><span class="line">                , RedisKeyConstants.DEFAULT_TTL, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> user.getUserName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUserName</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        stringRedisTemplate.delete(RedisKeyConstants.USER_NAME + id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>抽象类的一个实现</p>
<p>完成这个设计还是很自豪，转头一想，这是不是哪种设计模式啊？</p>
<p>果然，查到了，它属于设计模式-行为模式-模板模式，感兴趣的可以查资料好好看一看</p>
<h1 id="小结">小结</h1>
<p>果然呐，一些设计模式只有你在生产工作中才会有更深的体会和理解！</p>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-行为模式-观察者模式</title>
    <url>/article/8366968a.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<h2 id="参考">参考</h2>
<p>https://www.runoob.com/design-pattern/observer-pattern.html</p>
<h2 id="介绍">介绍</h2>
<p>当对象间存在一对多关系时，则使用观察者模式（Observer
Pattern）。比如，当一个对象被修改时，则会自动通知依赖它的对象。</p>
<span id="more"></span>
<h1 id="实现">实现</h1>
<h2 id="步骤1">步骤1</h2>
<p><code>Subject</code>类对应着多个<code>Observer</code>类，每当<code>Subject</code>发生变化，<code>Observer</code>会观察到变化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(<span class="type">int</span> state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">        notifyAllObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attach</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyAllObservers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">            observer.update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤2">步骤2</h2>
<p><code>Observer</code>作为一个抽象类，可以有多个实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Subject subject;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤3">步骤3</h2>
<p><code>Observer</code>多个实现</p>
<p><code>BinaryObserver</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryObserver</span> <span class="keyword">extends</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BinaryObserver</span><span class="params">(Subject subject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subject = subject;</span><br><span class="line">        <span class="built_in">this</span>.subject.attach(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BinaryObserver: &quot;</span> + Integer.toBinaryString(subject.getState()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>OctalObserver</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OctalObserver</span> <span class="keyword">extends</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OctalObserver</span><span class="params">(Subject subject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subject = subject;</span><br><span class="line">        <span class="built_in">this</span>.subject.attach(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Octal String: &quot;</span> + Integer.toOctalString(subject.getState()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>HexObserver</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HexObserver</span> <span class="keyword">extends</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HexObserver</span><span class="params">(Subject subject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subject = subject;</span><br><span class="line">        <span class="built_in">this</span>.subject.attach(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hex String: &quot;</span> + Integer.toHexString(subject.getState()).toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤4">步骤4</h2>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObserverPatternDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HexObserver</span>(subject);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">OctalObserver</span>(subject);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">BinaryObserver</span>(subject);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;First state change: 15&quot;</span>);</span><br><span class="line">        subject.setState(<span class="number">15</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Second state change: 10&quot;</span>);</span><br><span class="line">        subject.setState(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<blockquote>
<p>First state change: 15 Hex String: F Octal String: 17 BinaryObserver:
1111 Second state change: 10 Hex String: A Octal String: 12
BinaryObserver: 1010</p>
</blockquote>
<h1 id="扩展">扩展</h1>
<p>从观察者模式很容易能联想到微服务架构下的注册中心，注册中心的职责不就是监听者注册了的服务，向服务消费者提供需要的服务。这就和观察者模式很相像了，每当我们的服务变化，注册中心也会观察到变化，进而改变该服务在注册中心的状态信息，保证能提供稳定可靠的服务。</p>
<p>未来会学习并思考，注册中心到底是如何实现的。</p>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>说唱新世代</title>
    <url>/article/e0fcbea0.html</url>
    <content><![CDATA[<figure>
<img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/newgeneration.jpg"
alt="说唱新世代" />
<figcaption aria-hidden="true">说唱新世代</figcaption>
</figure>
<p>说唱新世代陪伴着我一起度过了2020年这个如此美好的夏天。如果不是有特别的感情，我是不会写下这篇文章的。感谢这个2020能遇到《说唱新世代》，这个节目带给了我许多思考启迪。</p>
<span id="more"></span>
<h1 id="说唱">说唱</h1>
<p>如果你没有看过这个节目，那我只能说“可惜了”，你错过了太多有趣美好的东西了。只看节目名，很多人就会认为这就是一场说唱选拔节目吗，再怎么“新”又能怎样，我只能说“NO，不”，你真的小看它了。</p>
<p>嘻哈（hip
hop）是一种新文化，不可否认。它不只是说唱，当然还有DJ（打碟），Graffiti（涂鸦）,Breaking(街舞），是的它的发展时间不长，但目前来看还是会被许多人喜欢的，尤其是年轻人。嘻哈在我看来是真实的表达，能量的传递，不是只拘泥于上面所说的那些形式。当然我不太会说话，传达出来的可能很模糊，但不重要。</p>
<p>从去年吧，受室友影响，开始接触一些说唱音乐，可能之前就已经接触过了，但还没有那样的概念。听了不少说唱音乐，的确有了些许改变，不是说自己打扮、行为更加
Hip Hip 了，而是整个人更加坚定了，有些歌词还能带给我共鸣，产生思考。</p>
<h1 id="节目本身">节目本身</h1>
<p>上说的所有都是为了这里，这个节目太牛逼了！</p>
<p>节目的宗旨是：万物皆可说唱，寻找时代表达者。</p>
<p>如果你看过节目，你真的不会觉得这是一场比赛，是完全就是一场享受与心灵的交谈啊。</p>
<p>首先我要夸严敏代表的制作团队，太厉害了，所有的赛制规则设计都是非常新颖能真真切切地感受到所有人的用心，另外舞台、音乐等更是不用说，可以说是把钱用到了最对的地方。</p>
<p>然后节目中的每个导师选手，导师真的非常专业，建议中肯，能很容易地指出选手问题所在。选手更不用说，每个人我是说每个人，都特别有想法，对音乐对生活都有个人的体会，并能通过自己的音乐表达出来，太优秀了！</p>
<p>11.1节目结束了，从夏天到秋天，这个节目带给导师选手包括观众的，真的不只是说唱音乐本身，对我来说更重要的是它要传达的内涵与精神力量。</p>
<h1 id="期待再见">期待再见</h1>
<p>最后我要说一声：</p>
<p>说唱新时代真漂亮！！！</p>
]]></content>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>读《Java编程思想（第4版）》（更新中）</title>
    <url>/article/48f2f4c1.html</url>
    <content><![CDATA[<h1
id="section"><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/java编译原理.jpg" width = "" height = "200" alt="《Java编程思想（第4版）》"/></h1>
<h1 id="内容简介">内容简介 · · · · · ·</h1>
<p>本书赢得了全球程序员的广泛赞誉，即使是最晦涩的概念，在Bruce
Eckel的文字亲和力和小而直接的编程示例面前也会化解于无形。从Java的基础语法到最高级特性（深入的面向对象概念、多线程、自动项目构建、单元测试和调试等），本书都能逐步指导你轻松掌握。</p>
<p>从本书获得的各项大奖以及来自世界各地的读者评论中，不难看出这是一本经典之作。本书的作者拥有多年教学经验，对C、C++以及Java语言都有独到、深入的见解，以通俗易懂及小而直接的示例解释了一个个晦涩抽象的概念。本书共22章，包括操作符、控制执行流程、访问权限控制、复用类、多态、接口、通过异常处理错误、字符串、泛型、数组、容器深入研究、Java
I/O系统、枚举类型、并发以及图形化用户界面等内容。这些丰富的内容，包含了Java语言基础语法以及高级特性，适合各个层次的Java程序员阅读，同时也是高等院校讲授面向对象程序设计语言以及Java语言的绝佳教材和参考书。</p>
<span id="more"></span>
<h1 id="读">读。。。</h1>
<h1 id="结">结</h1>
]]></content>
      <tags>
        <tag>JavaSE</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>读《算法（第4版）》（更新中）</title>
    <url>/article/6ec37244.html</url>
    <content><![CDATA[<h1
id="section"><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/算法.jpg" width = "" height = "200" alt="《算法（第4版）》"/></h1>
<h1 id="内容简介">内容简介 · · · · · ·</h1>
<p>本书全面讲述算法和数据结构的必备知识，具有以下几大特色。<br />
 算法领域的经典参考书<br />
Sedgewick畅销著作的最新版，反映了经过几十年演化而成的算法核心知识体系<br />
 内容全面<br />
全面论述排序、搜索、图处理和字符串处理的算法和数据结构，涵盖每位程序员应知应会的50种算法<br />
 全新修订的代码<br />
全新的Java实现代码，采用模块化的编程风格，所有代码均可供读者使用<br />
 与实际应用相结合<br />
在重要的科学、工程和商业应用环境下探讨算法，给出了算法的实际代码，而非同类著作常用的伪代码<br />
 富于智力趣味性<br />
简明扼要的内容，用丰富的视觉元素展示的示例，精心设计的代码，详尽的历史和科学背景知识，各种难度的练习，这一切都将使读者手不释卷<br />
 科学的方法<br />
用合适的数学模型精确地讨论算法性能，这些模型是在真实环境中得到验证的<br />
 与网络相结合<br />
配套网站<a
href="algs4.cs.princeton.edu">algs4.cs.princeton.edu</a>提供了本书内容的摘要及相关的代码、测试数据、编程练习、教学课件等资源</p>
<span id="more"></span>
<h1 id="第1章-基础">第1章 基础</h1>
<h1 id="第2章-排序"><a
href="https://wnhyang.github.io/article/a444b428.html">第2章
排序</a></h1>
<h1 id="更新中">更新中</h1>
]]></content>
      <tags>
        <tag>数据结构&amp;算法</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>转战Edge</title>
    <url>/article/4e33af7.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p>如题，我真的要转战<code>Edge</code>了</p>
<p>Chrome在全球的市场份额可谓是一家独大，也是我最常用的浏览器，虽然<code>Windows</code>上有<code>Edge</code>和<code>IE</code>，很抱歉我还提了<code>IE</code>😂</p>
<p>我一直对自己的电脑也好、文件也好、还有身边的东西，都是经常性的整理，看到它们整整齐齐的心里就很舒服</p>
<span id="more"></span>
<h1 id="原因">原因</h1>
<p>必须要说的原因肯定是同步，之前找一个云文档工具已经说了，现在同步的要求对我来说太重要的了</p>
<p>可以上云的一定要上云，因为我相信，云会是大趋势，一切都会在高速网络的支持下，变得更加便捷</p>
<p>未来可能会出现真正的云<code>IDE</code>来帮助程序员完成同步协作工作，更有真正的云游戏，那种我们只需要交互设备（屏幕，鼠标，握把，VR头盔等），一些的计算任务都交由云来完成，我们只需关心网络问题就可以了</p>
<p>回到正题</p>
<p><code>Edge</code>最大的优势应该是国内<code>Google</code>服务的限制，无法同步谷歌账户，更别说<code>Google</code>搜索了，其次还有<code>Googel</code>应用商店，反正<code>Google</code>相关的服务，正常手段，不借用<code>VPN</code>是无法体验的，与之相反，微软这个做的很好，不管是微软账户，还是微软应用商店都很好用，而且现在<code>Edge</code>已经换成了
<a href="https://www.chromium.org/">Chromium</a>
内核了，所以可以说除了<code>Google</code>服务的差别，其他几乎没有差别了</p>
<table>
<thead>
<tr class="header">
<th></th>
<th>Chrome</th>
<th>Edge</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>内核</td>
<td>Chromium</td>
<td>Chromium</td>
</tr>
<tr class="even">
<td>账户</td>
<td>Google账户（国内限制）</td>
<td>微软账户</td>
</tr>
<tr class="odd">
<td>同步性</td>
<td>限制</td>
<td>可</td>
</tr>
<tr class="even">
<td>应用插件</td>
<td>限制，有其他手段获取</td>
<td>直接访问下载</td>
</tr>
<tr class="odd">
<td>可玩性</td>
<td>一般</td>
<td>很不错</td>
</tr>
</tbody>
</table>
<p>关于<code>Edge</code>有很多使用技巧都可以通过找资料看视频来学习，相信它不会让你失望的</p>
]]></content>
      <tags>
        <tag>软件/工具</tag>
      </tags>
  </entry>
  <entry>
    <title>读《大话数据结构》（更新中）</title>
    <url>/article/19bb1124.html</url>
    <content><![CDATA[<h1
id="section"><img data-src="https://cdn.staticaly.com/gh/wnhyang/clouding@master/大话数据结构.jpg" width = "" height = "200" alt="《大话数据结构》"/></h1>
<h1 id="内容简介">内容简介</h1>
<p>本书为超级畅销书《大话设计模式》作者程杰潜心三年推出的扛鼎之作！以一个计算机教师教学为场景，讲解数据结构和相关算法的知识。通篇以一种趣味方式来叙述，大量引用了各种各样的生活知识来类比，并充分运用图形语言来体现抽象内容，对数据结构所涉及到的一些经典算法做到逐行分析、多算法比较。与市场上的同类数据结构图书相比，本书内容趣味易读，算法讲解细致深刻，是一本非常适合自学的读物。</p>
<p>本书以一个计算机教师教学为场景，讲解数据结构和相关算法的知识。通篇?一种趣味方式来叙述，大量引用了各种各样的生活知识来类比，并充分运用图形语言来体现抽象内容，对数据结构所涉及到的一些经典算法做到逐行分析、多算法比较。与市场上的同类数据结构图书相比，本书内容趣味易读，算法讲解细致深刻，是一本非常适合自学的读物。</p>
<span id="more"></span>
<h1 id="数据结构绪论"><a
href="https://wnhyang.github.io/article/b06cc6ec.html">数据结构绪论</a></h1>
<h1 id="算法"><a
href="https://wnhyang.github.io/article/b7e144d1.html">算法</a></h1>
<h1 id="线性表"><a
href="https://wnhyang.github.io/article/40f24371.html">线性表</a></h1>
<h1 id="栈与队列"><a
href="https://wnhyang.github.io/article/6534ce06.html">栈与队列</a></h1>
<h1 id="kmp"><a
href="https://wnhyang.github.io/article/3d43acee.html">KMP</a></h1>
<h1 id="树"><a
href="https://wnhyang.github.io/article/7b216a3b.html">树</a></h1>
<h1 id="二叉树"><a
href="https://wnhyang.github.io/article/e85d694a.html">二叉树</a></h1>
<h1 id="哈夫曼树及应用"><a
href="https://wnhyang.github.io/article/29d55788.html">哈夫曼树及应用</a></h1>
<h1 id="图"><a href="">图</a></h1>
<h1 id="查找"><a
href="https://wnhyang.github.io/article/33cb1151.html">查找</a></h1>
<h1 id="排序"><a
href="https://wnhyang.github.io/article/a444b428.html">排序</a></h1>
]]></content>
      <tags>
        <tag>数据结构&amp;算法</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>软件推荐</title>
    <url>/article/c92482f1.html</url>
    <content><![CDATA[<h1 id="推荐好用的软件">推荐好用的软件</h1>
<p>因为平台不同我会标注<code>PC</code>：<code>Win/Mac/Linux</code>，移动：<code>Android/iOS</code></p>
<p>目前分类，基础软件、记录写作、学习提升、编程、浏览器插件、小程序。。。</p>
<span id="more"></span>
<h1 id="基础软件">基础软件</h1>
<h2 id="geekwin"><a
href="https://geekuninstaller.com/">geek</a>（Win）</h2>
<p>快速彻底的一款卸载软件，极轻量，用了之后再没用过控制面板。</p>
<h2 id="火绒安全pc"><a
href="https://www.huorong.cn/">火绒安全</a>（PC）</h2>
<p>如其名，安全相关的，无广告，无强制捆绑，简单清爽。</p>
<h2 id="腾讯柠檬mac"><a
href="https://lemon.qq.com/">腾讯柠檬</a>（Mac）</h2>
<p><code>Mac</code>平台下的一款清理软件，免费好用。</p>
<h2 id="bandzipwinmac"><a
href="https://www.bandisoft.com/bandizip/">Bandzip</a>（Win/Mac）</h2>
<p>轻量全能的解压缩软件，超级好用。与盛传的<code>7zip</code>相比界面更好看些，尽管有广告（说实话这个我真的无感，推出广告好长时间我都没发现，正常使用完全不用在意这个）。</p>
<h2 id="chromewinmac"><a
href="https://www.google.cn/intl/en_uk/chrome/">Chrome</a>（Win/Mac）</h2>
<p>这个更不用多说，唯一遗憾可能是国内无法使用谷歌的一些服务吧。</p>
<h2 id="edgewinmac"><a
href="https://www.microsoft.com/zh-cn/edge">Edge</a>（Win/Mac）</h2>
<p><code>Edge</code>与<code>Chrome</code>的差距真的不大，现在都是<code>Chromium</code>内核，插件生态，各种兼容。之前一篇对比文章，<a
href="https://wnhyang.github.io/article/4e33af7.html">点这</a>。</p>
<h2 id="夸克androidios"><a
href="https://www.myquark.cn/">夸克</a>（Android/iOS）</h2>
<p>还是很好用的手机浏览器。</p>
<h2 id="neatdownloadmanagerwinmac"><a
href="https://www.neatdownloadmanager.com/index.php/en/">NeatDownloadManager</a>（Win/Mac）</h2>
<p>超级推荐的一款下载器，相比于IDM，免费。配合浏览器插件就可以起飞了。</p>
<h1 id="记录写作">记录写作</h1>
<h2 id="语雀"><a href="https://www.yuque.com/">语雀</a></h2>
<p>推荐：<code>PC</code>网页+移动<code>APP</code></p>
<p>之前用的也是<code>Typora</code>，总所周知它开始收费了，更重要的是它无法满足我需要的云（数据同步，多端使用）需要，就转向语雀了😊。感兴趣的看这篇<a
href="https://wnhyang.github.io/article/1ac0b150.html">MD编辑器的烦恼</a>。</p>
<h2 id="图床素材更新ing">图床、素材更新ing</h2>
<h1 id="学习提升">学习提升</h1>
<p>这方面的软件、网站太多了，耳熟能详的就不提了。</p>
<h2 id="简讯adnroidios"><a
href="https://www.tipsoon.com/?a=download">简讯</a>（Adnroid/iOS）</h2>
<p>轻阅读，打发空闲时间（3、5分钟那样的），全方面的知识。</p>
<h1 id="编程">编程</h1>
<h2 id="vscodepc"><a
href="https://code.visualstudio.com/">VSCode</a>（PC）</h2>
<p>免费，而且几乎是全能的。</p>
<h2 id="ideawinmac"><a
href="https://www.jetbrains.com/idea/">IDEA</a>（Win/Mac）</h2>
<p><code>jetbrains</code>出品正在全方面占领市场，靠的就是硬硬的真实力。</p>
<h2 id="navicatwinmac"><a
href="https://navicat.com.cn/">Navicat</a>（Win/Mac）</h2>
<p>个人最喜欢的数据库管理工具，就是好用。</p>
<h2 id="mobaxtermwin"><a
href="https://mobaxterm.mobatek.net/">MobaXterm</a>（Win）</h2>
<p><code>SSH</code>客户端、网络工具，可惜只有<code>Win</code>版，要是有<code>Mac</code>版，我相信会爆。</p>
<h1 id="浏览器插件">浏览器插件</h1>
<p>都是<code>Chrome</code>和<code>Edge</code>所支持的，可能所有<code>Chromium</code>都支持，我也不知道😂</p>
<h2 id="adblock"><a
href="https://chrome.google.com/webstore/detail/gighmmpiobklfepjocnamgkkbiglidom">AdBlock</a></h2>
<p>广告拦截器</p>
<h2 id="tampermonkey"><a
href="https://chrome.google.com/webstore/detail/dhdgffkkebhmkfjojejmpbldmpobfkfo">Tampermonkey</a></h2>
<p>知名的油猴，我玩的不是很六，自己发掘吧🤧</p>
<h2 id="neatdownloadmanager-extension"><a
href="https://chrome.google.com/webstore/detail/cpcifbdmkopohnnofedkjghjiclmhdah">NeatDownloadManager
Extension</a></h2>
<p>配合<code>NeatDownloadManager</code>起飞，飞。</p>
<h2 id="octotree---github-code-tree"><a
href="https://chrome.google.com/webstore/detail/bkhaagjahfmjljalopjnoealnfndnagc">Octotree
- GitHub code tree</a></h2>
<p>如果你有网页查看GitHub代码跳转的困惑，那用它就完事了。</p>
<h2 id="jsonvue"><a
href="https://chrome.google.com/webstore/detail/chklaanhfefbnpoihckbnefhakgolnmc">JSONVue</a></h2>
<p>浏览器<code>JSON</code>格式化显示，当然用<code>Postman</code>更专业😒，但有时确实是需要用一下😏。</p>
<h2 id="划词翻译"><a
href="https://chrome.google.com/webstore/detail/ikhdkkncnoglghljlkmcimlnlhkeamad">划词翻译</a></h2>
<p>本来作为谷歌翻译的替代品，但越用越喜欢。多源翻译可选择，多种翻译方式，设置自定义化程度很高。</p>
<h1 id="小程序">小程序</h1>
<h1 id="总结">总结</h1>
<p>好软件的标准是什么，我常在思考。</p>
<p>差生文具多。在开始做什么事之前，我总想着找到最好的工具，帮助我快速高效地达成目标，然而这也导致我花了大把时间在搜寻工具上，却忘了我还站在原地呢。所以啊，不要在搜寻工具上迷失了。</p>
<p>谈起好的软件，我个人认为首先就是免费（doge）。哈哈哈哈哈，不是。</p>
<p>好的软件肯定是用户友好的，符合使用习惯的，学习成本低的，易上手的。</p>
<p>关于轻量和全面，有人希望它们各司其职，各干各的，术业有专攻；有人希望能全面发展，一个顶几个，能干各种活。关于这个就仁者见仁智者见智了。</p>
]]></content>
      <tags>
        <tag>软件/工具</tag>
      </tags>
  </entry>
  <entry>
    <title>那些年我见过的路人</title>
    <url>/article/83b3a899.html</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p>标题浅显易懂，那些年我见过的路人。<br />
尽管我去过的地方不算多，但总能遇到一些让人影响深刻的路人。我一般不会影像记录，因为我觉得不经允许地拍一个陌生人不太好。也就因为这样他们中的有一些一直存于我的脑海中。</p>
<span id="more"></span>
<h1 id="赏诗">赏诗</h1>
<p>大约是在18年或是19年国庆，有点记不清了😁</p>
<p>在郑州的一个汽车站，天气很热，加上假期人非常多，人群排队都排到车站外了。大太阳直射着，汗水直流，心里只想坐上空调大巴驶向回家路。燥热的天气，烦躁的我，只能抠一下手机，慢慢随队伍移动。正排着队，忽然发现前面有一个穿着朴素、看上去上了点年纪的大妈（或是说阿姨，不知道😂）。他身边呢有个稍微年轻一点的男人，称不上中年，穿着也同样朴素，当然身边还有一些行李，他要比身边的女人高出一头。他们就在我前面几米处。吸引我注意的当然不是他们的组合，毕竟在汽车站什么样的人见不到呢。他们这样朴素打扮的中老年人比比皆是，那些朴实的人们往往为了省下一点路费，选择大巴出行（远一点可能就是火车了），他们的行李大多数都装在编织袋里，什么被子、衣服和生活用品都可以装，省钱嘛。还有一些还会带上一些锅碗瓢盆随自己奔波，都是钱买的，舍不得丢下。回到正题，其实吸引我的是女人手里的一本书——《诗经》。没错，就是记录着“窈窕淑女，君子好逑”的《诗经》。刚发现的时候我有点说不出的感受，不知道怎么表达。只见着，女人认真的看书时而还会读出来（周围太嘈杂，人太多，听不到什么），兴致勃勃，脸上还带着微笑，似乎是在欣赏绝美的诗句。男人呢，一边帮忙拿着行李，一边对于女人欣赏诗句的行为做出回应。他们闲庭信步，赶着队伍，与周围烦躁吵闹的人群形成鲜明的对比。他们此刻就像裳衣飘飘古代男女，相依在一块，一同欣赏美好的“诗情画意”。我试图接近他们，看一看他们到底在看什么，听一听他们在说些什么，但之后进了车站就走散了。</p>
<p>很幸运，我能遇到他们，让我真正感受到——任何人都有仰望星空的权力，任何人都可以欣赏美好的艺术。之所以让我印象深刻至今，是因为这其中包含了普通人对于精神世界的美好追求。</p>
<p>想象一下，一个农名大伯，除了和天下所有农民朋友一样劳作，独爱在空闲时看《论文》、《道德经》这些书籍，看这些书不会让他的庄稼收成更高，但他不在意，还是乐在其中，快乐自在。旁人会冷嘲热讽，觉得他这是浪费时间，没有意义，可“子非鱼，安知鱼之乐”呢？</p>
<p>最近网上越来越多一些基层平明百姓出圈的报道，有播音员的农民大叔，有街舞出众的工地小哥，有书法有劲的公园大爷，这些是通过一些自己喜好出圈的。我想说的不是“坚持一个爱好说不定什么时候就能出名，怎样怎样的”。我想说的是有自己的精神追求或是什么热爱的事情，做下去，快乐就是自己的，结果怎么样有何干系。</p>
<h1 id="无奈">无奈</h1>
<p>7月初，我逃离上海来到杭州。虽然我来之前有咨询和报备，我所在上海的地区也属于低风险区域，也有24小时的核酸阴性证明，但是到了杭州站还是受到了一些阻碍。不得不说各地的防疫政策不同还可以理解，但是健康码和核酸报告竟然也是不一样的。上海封控那段时间是不停的做抗原做核酸，解封后出现了很多常态化核酸检测点，出门也会要求扫场所码还有48小时或是72小时的核酸阴性证明。有需要的话每天都可以做核酸，很方便。我来的前一天就做了核酸，不仅为了方便离沪也方便到其他地方落脚。可是到了杭州，这边又是不同于上海的系统，查不到在上海做的核酸。很苦恼😒<br />
那天，天气也是属于炎热一档，到站时间大概是11点多，车站人非常多，要出去要通过两道关卡，第一道扫码验证健康码，我是第一次到杭州，健康码显示是绿色，很容易就通过第一道关卡，第二道扫场所码，查看核酸报告和行程信息，这里我的行程这里出现问题（属于外来人员需要登记）。按照工作人员的指示，到一个指定通道登记顺便做核酸。就在跟随工作人员前往的路上，还是在拥挤人群的车站内，一个工作人员守护的路口，看见一个脸色黝黑、身形瘦弱、孤身一人带着行李的大妈，无奈的要哭出来了，手里拿着手机正在给谁打电话，无奈的痛苦般的叫着（带着方言），隐约听到“他们不让我过，这么大，怎么走啊。。。”这类的话语。我还在跟随着队伍，没有注意她那是不是智能机，也没有搞清楚到底发生了什么，不过大概也是疫情出行政策规定相关的吧。看着她我还是挺难受的，疫情期间，老人家，出门在外，人生地不熟，我一个玩通各种手机软件、查看地图、地区公告的年轻人也难免会遇到一些麻烦，更何况这位大妈。</p>
<p>是该讨论疫情出行还是老人关爱还是。。。我不知道啊！？</p>
<h1 id="结">结</h1>
<p>当然还有很多形形色色不同的路人与我相遇，然后错过，这也仅仅记录了我还有印象的极个别而已。</p>
]]></content>
      <tags>
        <tag>思考</tag>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>重置电脑</title>
    <url>/article/9d85b11b.html</url>
    <content><![CDATA[<p>太难了，重置一次电脑太难了，尤其是对于那些在自己电脑上搞了很多东西的，就比如我</p>
<span id="more"></span>
<h1 id="原因">原因</h1>
<p>考完试当天下午回家，放松了一天，想着打开IDEA看看吧，毕竟好久没有玩电脑了，好久没有IDEA了，这个月一直忙着复习备考，真的是没有机会精力，打开玩电脑了。</p>
<p>接下来，双击IDEA，期盼着打开这学期的<strong>Java
Web</strong>项目在瞅瞅，没想到啊没想到，打不开了，整个人一下慌了，卸载安装卸载安装，重复好几次始终没有解决问题，在网上也搜了不少解决方案，种种都试了试，但都没能再次打开IDEA，这时重置的想法已经萌生，但随即想想，重置后我需要做多少工作，简直后怕，不敢，纠结纠结，过了一天在经过一上午的抉择终于决心重置了，一方面是因为IDEA，还有我对于我电脑里乱七八糟的东西实在是烦，这次重置可以好好整理一番。</p>
<h1 id="备份">备份</h1>
<ul>
<li>我的一些重要配置及文件，如：maven、geek、idea项目、曾经的C++、C#、Android等文件</li>
<li>博客</li>
<li>一些重要的安装包</li>
<li>JDK</li>
<li>等</li>
</ul>
<h1 id="重置">重置</h1>
<p>上面说的好像很轻松，但我简述一下，重置后我做了哪些工作吧</p>
<ul>
<li>先把电脑自带的软件整理或删除，通过控制面板</li>
<li>Office软件整理、迈克菲软件卸载（找了半天终于卸载干净了）</li>
<li>装上我需要的社交娱乐软件：Chrome（幸好有同步功能，太惊喜了，剩下绝大部工作）、火绒、Tim、微信、网易云音乐、百度网盘等</li>
<li>Java开发环境和博客环境，JDK、IDEA（换上了新版2020.3）、Tomcat、MySQL、Navicat、Git、node.js</li>
<li>VS Code 安装及配置，Python及C++环境</li>
</ul>
<h1 id="总结">总结</h1>
<p>从重置到基本回复，大概用了一天多，还是比较顺利的，Chrome太惊喜了，所有书签、密码、插件等都同步到谷歌账户了，省去了太多工作了，过程还挺好的，帮助我熟悉了一些软件及环境的配置安装。</p>
]]></content>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>重读KMP算法</title>
    <url>/article/3d43acee.html</url>
    <content><![CDATA[<p>这几天看了《大话数据结构》第五章-串，重新了解了串这个数据结构，当然其中最重要的模式匹配算法KMP有了新的认识，或者说是终于理解了。<br />
接下来结合我的理解和<a
href="https://blog.csdn.net/v_JULY_v/article/details/7041827">CSDN中大佬</a>的详解，讲一讲KMP吧！</p>
<h1
id="朴素的模式匹配bf算法暴力算法">朴素的模式匹配（BF算法、暴力算法）</h1>
<h1 id="简介">简介</h1>
<p>这是最早、最简单的模式匹配算法，就是简单的暴力算法，思路：<br />
* 主串S，模式串T *
从主串S第一位开始和模式串T第一位开始匹配，成功匹配返回匹配成功的第一位，匹配失败，主串S后移一位，模式串重新从头开始匹配</p>
<span id="more"></span>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//朴素的匹配,从pos位置开始匹配</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Index</span><span class="params">(string S, string T, <span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = pos;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; S.<span class="built_in">length</span>() &amp;&amp; j &lt; T.<span class="built_in">length</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (S[i] == T[j])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//①如果当前字符匹配成功（即S[i] == T[j]），则i++，j++  </span></span><br><span class="line">            ++i;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//②如果失配（即S[i]! = T[j]），令i =（i - j） + 1，j = 0  </span></span><br><span class="line">            i = i - j + <span class="number">1</span>;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">if</span> (j == T.<span class="built_in">length</span>())</span><br><span class="line">        <span class="keyword">return</span> i - j;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="例">例</h1>
<p>S="goodgoogle",T="google"<br />
&gt;1. <del>goo</del>dgoogle<br />
<del>goo</del>gle &gt;2. goodgoogle<br />
  google &gt;3. goodgoogle<br />
    google &gt;4. goodgoogle<br />
      google &gt;5. good<del>google</del><br />
        <del>google</del></p>
<p>朴素的模式匹配就是这个过程，可以看出这种算法的时间复杂度很大，为了优化模式匹配就有了KMP算法
# KMP算法</p>
<h1 id="简介-1">简介</h1>
<p>KMP是由三位前辈研究出来的避免重复遍历的高效率模式匹配算法，它们分别是D.E.Knuth、J.H.Morris、V.R.Pratt。知道了吧KMP是来自这三位前辈的名字，我们在称之为克努特-莫里斯-普拉特算法。
# 原理</p>
<p>通俗的讲，KMP算法利用已匹配的现有信息，省去不必要的匹配过程，进而优化算法。<br />
&gt;先上一个例子解释一下<br />
S="abcababcax",T="abcabx"<br />
&gt;1. <del>abcab</del>abcax<br />
<del>abcab</del>x<br />
&gt;2. abcababcax<br />
  abcabx<br />
&gt;3. abcababcax<br />
    abcabx<br />
&gt;4. abc<del>a</del>babcax<br />
      <del>a</del>bcabx<br />
&gt;5. abc<del>ab</del>abcax<br />
      <del>ab</del>cabx<br />
&gt;6. abc<del>ab</del>abcax<br />
      <del>ab</del>cabx</p>
<p>1前5位“abcab”匹配成功，此时S的第i位"a"与T的第j位"x"匹配失败，i=5，j=5，按照朴素的模式匹配算法，接下来要让T串后移一位继续与S匹配，i变为1，j变成0，就是上面的过程，其实从1获取的匹配信息可以知道S的前三位"abc"已与T的相应位匹配成功，且"bc"并不等于"a"，所以23步不可能匹配成功，i在第一步时已经等于5了，但经过2345过程5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;5最后S的第i位"a"与T的第j位"c"匹配失败,i=5，j=2。可以发现之前的2345可以去掉，i在这变化中又回到5，这个过程变化的好像只是j的值，KMP要做的就是省去不必要的匹配过程，直接跳到合适的位置。
# 代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//KMP</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">KmpSearch</span><span class="params">(string S, string T, <span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = pos;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> Sl = S.<span class="built_in">length</span>();</span><br><span class="line">    <span class="type">int</span> Tl = T.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">while</span> (i &lt; Sl &amp;&amp; j &lt; Tl)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//①如果j = -1，或者当前字符匹配成功（即S[i] == T[j]），都令i++，j++</span></span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || S[i] == T[j])</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//②如果j != -1，且当前字符匹配失败（即S[i] != T[j]），则令 i 不变，j = next[j]    </span></span><br><span class="line">            <span class="comment">//next[j]即为j所对应的next值      </span></span><br><span class="line">            j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j == Tl)</span><br><span class="line">        <span class="keyword">return</span> i - j;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="next数组">next数组</h1>
<p>前面提到合适的位置，什么叫做合适的位置呢，就是主串S与模式串T失配时，i不变，只移动模式串T到合适的位置再与S匹配，这个合适的位置就存在next数组中。<br />
上例中第一次在i=5，j=5失配，省去不必要的过程后i=5，j=2，也就是i不变，j从5变成2，这个过程中省去的是T前两位"ab"与S的45位"ab"匹配的过程，省去的原因是在第一次已经匹配过了，S的"abcab"与T的"abcab"匹配，可以发现，T的前缀和后缀都有"ab"，则下次匹配可以从T的第2位"c"开始与S上次失配的第5位开始重新匹配。</p>
<h1 id="最大相同前后缀">最大相同前后缀</h1>
<p>要计算next数组一定要知道最大相同前后缀，从上面的解释可以知道，j的变化与模式串T有关，在失配时j=next[j]，所以要知道T最大前后缀与next数组的关系。</p>
<h1 id="对于模式串tabcabx">对于模式串T="abcabx"</h1>
<table>
<thead>
<tr class="header">
<th>模式串</th>
<th>a</th>
<th>b</th>
<th>c</th>
<th>a</th>
<th>b</th>
<th>x</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>最大相同前后缀</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>0</td>
</tr>
<tr class="even">
<td>next数组</td>
<td>-1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>2</td>
</tr>
</tbody>
</table>
<p>串为"a"，"ab"，"abc"，时最大相同前后缀为0，"abca"为1及前后的"a"，"abcab"为2及前后的"ab"。把next
数组跟求得的最大相同前后缀对比后，不难发现，next
数组相当于“最大相同前后缀” 整体向右移动一位，然后初始值赋为-1。</p>
<h1 id="代码-1">代码</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//next数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GetNext</span><span class="params">(string T, <span class="type">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;T.<span class="built_in">length</span>() - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//T[k]表示前缀，T[j]表示后缀</span></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">-1</span> || T[j] == T[k])</span><br><span class="line">        &#123;</span><br><span class="line">            ++k;</span><br><span class="line">            ++j;</span><br><span class="line">            next[j] = k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            k = next[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码有点难理解，我简单解释一下，这里涉及了已知next[0,...,j],求next[j+1]的问题。<br />
&gt; 对于T的前j+1个序列字符：</p>
<ul>
<li>若T[k] == T[j]，则next[j + 1 ] = next [j] + 1 = k + 1；<br />
</li>
<li>若T[k ] ≠ T[j]，如果此时T[ next[k] ] == T[j ]，则next[ j + 1 ] =
 next[k] + 1，否则继续递归前缀索引k =
next[k]，而后重复此过程。 相当于在字符T[j+1]之前不存在长度为k+1的前缀"T0
T1, …, Tk-1 Tk"跟后缀“Tj-k Tj-k+1, …, Tj-1
Tj"相等，那么是否可能存在另一个值t+1 &lt; k+1，使得长度更小的前缀 “T0
T1, …, Tt-1 Tt” 等于长度更小的后缀 “Tj-t Tj-t+1, …, Tj-1 Tj”
呢？如果存在，那么这个t+1 便是next[ j+1]的值，此相当于利用已经求得的next
数组（next [0, ..., k, ..., j]）进行T串前缀跟T串后缀的匹配。</li>
<li>原文链接：https://blog.csdn.net/v_JULY_v/article/details/7041827</li>
</ul>
<h1 id="next数组的优化">next数组的优化</h1>
<h1 id="问题的出现">问题的出现</h1>
<p>后来有人发现，KMP算法还是有缺陷的。<br />
如果用之前的next 数组方法求模式串“abab”的next 数组，可得其next 数组为-1
0 0 1（0 0 1
2整体右移一位，初值赋为-1），当它跟下图中的文本串去匹配的时候，发现b跟c失配，于是模式串j
= next[j] =1。 &gt; <del>aba</del>cabababc<br />
<del>aba</del>b</p>
<p>右移2位后，b又跟c失配。事实上，因为在上一步的匹配中，已经得知p[3] =
b，与s[3] = c失配，而右移两位之后，让p[ next[3] ] = p[1] = b
再跟s[3]匹配时，必然失配。<br />
&gt; ab<del>a</del>cabababc     ab<del>a</del>b</p>
<p>问题出在不该出现T[j] = T[ next[j] ]。为什么呢？理由是：当T[j] != S[i]
时，下次匹配必然是T[ next [j]] 跟S[i]匹配，如果T[j] = T[ next[j]
]，必然导致后一步匹配失败（因为T[j]已经跟S[i]失配，然后你还用跟T[j]等同的值T[next[j]]去跟S[i]匹配，很显然，必然失配），所以不能允许T[j]
= T[ next[j ]]。如果出现了T[j] = T[ next[j]
]咋办呢？如果出现了，则需要再次递归，即令next[j] = next[ next[j]
]。<br />
原文链接：https://blog.csdn.net/v_JULY_v/article/details/7041827</p>
<h1 id="代码-2">代码</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//优化过后的next 数组求法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GetNextval</span><span class="params">(string T, <span class="type">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; T.<span class="built_in">length</span>()- <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//T[k]表示前缀，T[j]表示后缀  </span></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">-1</span> || T[j] == T[k])</span><br><span class="line">        &#123;</span><br><span class="line">            ++j;</span><br><span class="line">            ++k;</span><br><span class="line">            <span class="comment">//较之前next数组求法，改动在下面4行</span></span><br><span class="line">            <span class="keyword">if</span> (T[j] != T[k])</span><br><span class="line">                next[j] = k;   <span class="comment">//之前只有这一行</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="comment">//因为不能出现T[j] = T[ next[j ]]，所以当出现时需要继续递归，k = next[k] = next[next[k]]</span></span><br><span class="line">                next[j] = next[k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            k = next[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="kmp算法时间复杂度分析">KMP算法时间复杂度分析</h1>
<p>朴素的模式匹配算法时间复杂度分析如下：（n为主串长度
，m为模式串长度）</p>
<table>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th>情况</th>
<th>时间复杂度</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>最好情况</td>
<td>O(1)</td>
<td>一开始就匹配成功</td>
</tr>
<tr class="even">
<td>最坏情况</td>
<td>O((n-m+1)*m)</td>
<td>每次不成功的匹配都发生在模式串的最后一个字符</td>
</tr>
<tr class="odd">
<td>平均情况</td>
<td>O(n+m)</td>
<td>根据等概率原则，平均是(n+m)/2次查找</td>
</tr>
</tbody>
</table>
<h1 id="总结">总结</h1>
<p>数据结构是非常重要的，这次的KMP算法也是花了好久才理解的。<br />
欢迎批评指正。</p>
]]></content>
      <tags>
        <tag>数据结构&amp;算法</tag>
      </tags>
  </entry>
</search>
